{
  "_format": "ethers-rs-sol-build-info-1",
  "solcVersion": "0.8.20",
  "solcLongVersion": "0.8.20+commit.a1b79de6.Windows.msvc",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/Pizza.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\n\r\ncontract Pizza is Initializable, UUPSUpgradeable, OwnableUpgradeable {\r\n   uint256 public slices;\r\n\r\n    ///@dev no constructor in upgradable contracts. Instead we have initializers\r\n    ///@param _sliceCount initial number of slices for the pizza\r\n\r\n   function initialize(uint256 _sliceCount , address initialOwner) public initializer {\r\n       slices = _sliceCount;\r\n\r\n      ///@dev as there is no constructor, we need to initialise the OwnableUpgradeable explicitly\r\n    __Ownable_init(initialOwner);\r\n   }\r\n\r\n   ///@dev required by the OZ UUPS module\r\n   function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n   //add upgradeTo function \r\n    function upgradeTo(address newImplementation) external {\r\n    \r\n    }\r\n\r\n   ///@dev decrements the slices when called\r\n   function eatSlice() public {\r\n       require(slices > 1, \"no slices left\");\r\n       slices -= 1;\r\n   }\r\n}"
      },
      "contracts/PizzaV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport {Pizza} from \"./Pizza.sol\";\r\n\r\ncontract PizzaV2 is Pizza {\r\n   ///@dev increments the slices when called\r\n   function refillSlice() external {\r\n       slices += 1;\r\n   }\r\n\r\n   ///@dev returns the contract version\r\n   function pizzaVersion() external pure returns (uint256) {\r\n       return 2;\r\n   }\r\n\r\n}"
      },
      "lib/forge-std/lib/ds-test/src/test.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.0;\r\n\r\ncontract DSTest {\r\n    event log                    (string);\r\n    event logs                   (bytes);\r\n\r\n    event log_address            (address);\r\n    event log_bytes32            (bytes32);\r\n    event log_int                (int);\r\n    event log_uint               (uint);\r\n    event log_bytes              (bytes);\r\n    event log_string             (string);\r\n\r\n    event log_named_address      (string key, address val);\r\n    event log_named_bytes32      (string key, bytes32 val);\r\n    event log_named_decimal_int  (string key, int val, uint decimals);\r\n    event log_named_decimal_uint (string key, uint val, uint decimals);\r\n    event log_named_int          (string key, int val);\r\n    event log_named_uint         (string key, uint val);\r\n    event log_named_bytes        (string key, bytes val);\r\n    event log_named_string       (string key, string val);\r\n\r\n    bool public IS_TEST = true;\r\n    bool private _failed;\r\n\r\n    address constant HEVM_ADDRESS =\r\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\r\n\r\n    modifier mayRevert() { _; }\r\n    modifier testopts(string memory) { _; }\r\n\r\n    function failed() public returns (bool) {\r\n        if (_failed) {\r\n            return _failed;\r\n        } else {\r\n            bool globalFailed = false;\r\n            if (hasHEVMContext()) {\r\n                (, bytes memory retdata) = HEVM_ADDRESS.call(\r\n                    abi.encodePacked(\r\n                        bytes4(keccak256(\"load(address,bytes32)\")),\r\n                        abi.encode(HEVM_ADDRESS, bytes32(\"failed\"))\r\n                    )\r\n                );\r\n                globalFailed = abi.decode(retdata, (bool));\r\n            }\r\n            return globalFailed;\r\n        }\r\n    }\r\n\r\n    function fail() internal virtual {\r\n        if (hasHEVMContext()) {\r\n            (bool status, ) = HEVM_ADDRESS.call(\r\n                abi.encodePacked(\r\n                    bytes4(keccak256(\"store(address,bytes32,bytes32)\")),\r\n                    abi.encode(HEVM_ADDRESS, bytes32(\"failed\"), bytes32(uint256(0x01)))\r\n                )\r\n            );\r\n            status; // Silence compiler warnings\r\n        }\r\n        _failed = true;\r\n    }\r\n\r\n    function hasHEVMContext() internal view returns (bool) {\r\n        uint256 hevmCodeSize = 0;\r\n        assembly {\r\n            hevmCodeSize := extcodesize(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)\r\n        }\r\n        return hevmCodeSize > 0;\r\n    }\r\n\r\n    modifier logs_gas() {\r\n        uint startGas = gasleft();\r\n        _;\r\n        uint endGas = gasleft();\r\n        emit log_named_uint(\"gas\", startGas - endGas);\r\n    }\r\n\r\n    function assertTrue(bool condition) internal {\r\n        if (!condition) {\r\n            emit log(\"Error: Assertion Failed\");\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertTrue(bool condition, string memory err) internal {\r\n        if (!condition) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertTrue(condition);\r\n        }\r\n    }\r\n\r\n    function assertEq(address a, address b) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [address]\");\r\n            emit log_named_address(\"      Left\", a);\r\n            emit log_named_address(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(address a, address b, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string (\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n\r\n    function assertEq(bytes32 a, bytes32 b) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [bytes32]\");\r\n            emit log_named_bytes32(\"      Left\", a);\r\n            emit log_named_bytes32(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string (\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n    function assertEq32(bytes32 a, bytes32 b) internal {\r\n        assertEq(a, b);\r\n    }\r\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\r\n        assertEq(a, b, err);\r\n    }\r\n\r\n    function assertEq(int a, int b) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [int]\");\r\n            emit log_named_int(\"      Left\", a);\r\n            emit log_named_int(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(int a, int b, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n    function assertEq(uint a, uint b) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [uint]\");\r\n            emit log_named_uint(\"      Left\", a);\r\n            emit log_named_uint(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(uint a, uint b, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n    function assertEqDecimal(int a, int b, uint decimals) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"      Left\", a, decimals);\r\n            emit log_named_decimal_int(\"     Right\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEqDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"      Left\", a, decimals);\r\n            emit log_named_decimal_uint(\"     Right\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEqDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertNotEq(address a, address b) internal {\r\n        if (a == b) {\r\n            emit log(\"Error: a != b not satisfied [address]\");\r\n            emit log_named_address(\"      Left\", a);\r\n            emit log_named_address(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertNotEq(address a, address b, string memory err) internal {\r\n        if (a == b) {\r\n            emit log_named_string (\"Error\", err);\r\n            assertNotEq(a, b);\r\n        }\r\n    }\r\n\r\n    function assertNotEq(bytes32 a, bytes32 b) internal {\r\n        if (a == b) {\r\n            emit log(\"Error: a != b not satisfied [bytes32]\");\r\n            emit log_named_bytes32(\"      Left\", a);\r\n            emit log_named_bytes32(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertNotEq(bytes32 a, bytes32 b, string memory err) internal {\r\n        if (a == b) {\r\n            emit log_named_string (\"Error\", err);\r\n            assertNotEq(a, b);\r\n        }\r\n    }\r\n    function assertNotEq32(bytes32 a, bytes32 b) internal {\r\n        assertNotEq(a, b);\r\n    }\r\n    function assertNotEq32(bytes32 a, bytes32 b, string memory err) internal {\r\n        assertNotEq(a, b, err);\r\n    }\r\n\r\n    function assertNotEq(int a, int b) internal {\r\n        if (a == b) {\r\n            emit log(\"Error: a != b not satisfied [int]\");\r\n            emit log_named_int(\"      Left\", a);\r\n            emit log_named_int(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertNotEq(int a, int b, string memory err) internal {\r\n        if (a == b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertNotEq(a, b);\r\n        }\r\n    }\r\n    function assertNotEq(uint a, uint b) internal {\r\n        if (a == b) {\r\n            emit log(\"Error: a != b not satisfied [uint]\");\r\n            emit log_named_uint(\"      Left\", a);\r\n            emit log_named_uint(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertNotEq(uint a, uint b, string memory err) internal {\r\n        if (a == b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertNotEq(a, b);\r\n        }\r\n    }\r\n    function assertNotEqDecimal(int a, int b, uint decimals) internal {\r\n        if (a == b) {\r\n            emit log(\"Error: a != b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"      Left\", a, decimals);\r\n            emit log_named_decimal_int(\"     Right\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertNotEqDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a == b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertNotEqDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertNotEqDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a == b) {\r\n            emit log(\"Error: a != b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"      Left\", a, decimals);\r\n            emit log_named_decimal_uint(\"     Right\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertNotEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a == b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertNotEqDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertGt(uint a, uint b) internal {\r\n        if (a <= b) {\r\n            emit log(\"Error: a > b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Value a\", a);\r\n            emit log_named_uint(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGt(uint a, uint b, string memory err) internal {\r\n        if (a <= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGt(a, b);\r\n        }\r\n    }\r\n    function assertGt(int a, int b) internal {\r\n        if (a <= b) {\r\n            emit log(\"Error: a > b not satisfied [int]\");\r\n            emit log_named_int(\"  Value a\", a);\r\n            emit log_named_int(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGt(int a, int b, string memory err) internal {\r\n        if (a <= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGt(a, b);\r\n        }\r\n    }\r\n    function assertGtDecimal(int a, int b, uint decimals) internal {\r\n        if (a <= b) {\r\n            emit log(\"Error: a > b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a <= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGtDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a <= b) {\r\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a <= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGtDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertGe(uint a, uint b) internal {\r\n        if (a < b) {\r\n            emit log(\"Error: a >= b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Value a\", a);\r\n            emit log_named_uint(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGe(uint a, uint b, string memory err) internal {\r\n        if (a < b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGe(a, b);\r\n        }\r\n    }\r\n    function assertGe(int a, int b) internal {\r\n        if (a < b) {\r\n            emit log(\"Error: a >= b not satisfied [int]\");\r\n            emit log_named_int(\"  Value a\", a);\r\n            emit log_named_int(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGe(int a, int b, string memory err) internal {\r\n        if (a < b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGe(a, b);\r\n        }\r\n    }\r\n    function assertGeDecimal(int a, int b, uint decimals) internal {\r\n        if (a < b) {\r\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a < b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGeDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a < b) {\r\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a < b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGeDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertLt(uint a, uint b) internal {\r\n        if (a >= b) {\r\n            emit log(\"Error: a < b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Value a\", a);\r\n            emit log_named_uint(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLt(uint a, uint b, string memory err) internal {\r\n        if (a >= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLt(a, b);\r\n        }\r\n    }\r\n    function assertLt(int a, int b) internal {\r\n        if (a >= b) {\r\n            emit log(\"Error: a < b not satisfied [int]\");\r\n            emit log_named_int(\"  Value a\", a);\r\n            emit log_named_int(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLt(int a, int b, string memory err) internal {\r\n        if (a >= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLt(a, b);\r\n        }\r\n    }\r\n    function assertLtDecimal(int a, int b, uint decimals) internal {\r\n        if (a >= b) {\r\n            emit log(\"Error: a < b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a >= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLtDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a >= b) {\r\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a >= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLtDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertLe(uint a, uint b) internal {\r\n        if (a > b) {\r\n            emit log(\"Error: a <= b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Value a\", a);\r\n            emit log_named_uint(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLe(uint a, uint b, string memory err) internal {\r\n        if (a > b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLe(a, b);\r\n        }\r\n    }\r\n    function assertLe(int a, int b) internal {\r\n        if (a > b) {\r\n            emit log(\"Error: a <= b not satisfied [int]\");\r\n            emit log_named_int(\"  Value a\", a);\r\n            emit log_named_int(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLe(int a, int b, string memory err) internal {\r\n        if (a > b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLe(a, b);\r\n        }\r\n    }\r\n    function assertLeDecimal(int a, int b, uint decimals) internal {\r\n        if (a > b) {\r\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a > b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLeDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a > b) {\r\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a > b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLeDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertEq(string memory a, string memory b) internal {\r\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\r\n            emit log(\"Error: a == b not satisfied [string]\");\r\n            emit log_named_string(\"      Left\", a);\r\n            emit log_named_string(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(string memory a, string memory b, string memory err) internal {\r\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n\r\n    function assertNotEq(string memory a, string memory b) internal {\r\n        if (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b))) {\r\n            emit log(\"Error: a != b not satisfied [string]\");\r\n            emit log_named_string(\"      Left\", a);\r\n            emit log_named_string(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertNotEq(string memory a, string memory b, string memory err) internal {\r\n        if (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b))) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertNotEq(a, b);\r\n        }\r\n    }\r\n\r\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\r\n        ok = true;\r\n        if (a.length == b.length) {\r\n            for (uint i = 0; i < a.length; i++) {\r\n                if (a[i] != b[i]) {\r\n                    ok = false;\r\n                }\r\n            }\r\n        } else {\r\n            ok = false;\r\n        }\r\n    }\r\n    function assertEq0(bytes memory a, bytes memory b) internal {\r\n        if (!checkEq0(a, b)) {\r\n            emit log(\"Error: a == b not satisfied [bytes]\");\r\n            emit log_named_bytes(\"      Left\", a);\r\n            emit log_named_bytes(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\r\n        if (!checkEq0(a, b)) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq0(a, b);\r\n        }\r\n    }\r\n\r\n    function assertNotEq0(bytes memory a, bytes memory b) internal {\r\n        if (checkEq0(a, b)) {\r\n            emit log(\"Error: a != b not satisfied [bytes]\");\r\n            emit log_named_bytes(\"      Left\", a);\r\n            emit log_named_bytes(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertNotEq0(bytes memory a, bytes memory b, string memory err) internal {\r\n        if (checkEq0(a, b)) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertNotEq0(a, b);\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/Base.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nimport {StdStorage} from \"./StdStorage.sol\";\r\nimport {Vm, VmSafe} from \"./Vm.sol\";\r\n\r\nabstract contract CommonBase {\r\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\r\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\"hevm cheat code\"))));\r\n    // console.sol and console2.sol work by executing a staticcall to this address.\r\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\r\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\r\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\r\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\r\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\"foundry default caller\"))));\r\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\r\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\r\n    // Deterministic deployment address of the Multicall3 contract.\r\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\r\n    // The order of the secp256k1 curve.\r\n    uint256 internal constant SECP256K1_ORDER =\r\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\r\n\r\n    uint256 internal constant UINT256_MAX =\r\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    Vm internal constant vm = Vm(VM_ADDRESS);\r\n    StdStorage internal stdstore;\r\n}\r\n\r\nabstract contract TestBase is CommonBase {}\r\n\r\nabstract contract ScriptBase is CommonBase {\r\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\r\n}\r\n"
      },
      "lib/forge-std/src/StdAssertions.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nimport {DSTest} from \"ds-test/test.sol\";\r\nimport {stdMath} from \"./StdMath.sol\";\r\n\r\nabstract contract StdAssertions is DSTest {\r\n    event log_array(uint256[] val);\r\n    event log_array(int256[] val);\r\n    event log_array(address[] val);\r\n    event log_named_array(string key, uint256[] val);\r\n    event log_named_array(string key, int256[] val);\r\n    event log_named_array(string key, address[] val);\r\n\r\n    function fail(string memory err) internal virtual {\r\n        emit log_named_string(\"Error\", err);\r\n        fail();\r\n    }\r\n\r\n    function assertFalse(bool data) internal virtual {\r\n        assertTrue(!data);\r\n    }\r\n\r\n    function assertFalse(bool data, string memory err) internal virtual {\r\n        assertTrue(!data, err);\r\n    }\r\n\r\n    function assertEq(bool a, bool b) internal virtual {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [bool]\");\r\n            emit log_named_string(\"      Left\", a ? \"true\" : \"false\");\r\n            emit log_named_string(\"     Right\", b ? \"true\" : \"false\");\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertEq(bool a, bool b, string memory err) internal virtual {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n\r\n    function assertEq(bytes memory a, bytes memory b) internal virtual {\r\n        assertEq0(a, b);\r\n    }\r\n\r\n    function assertEq(bytes memory a, bytes memory b, string memory err) internal virtual {\r\n        assertEq0(a, b, err);\r\n    }\r\n\r\n    function assertEq(uint256[] memory a, uint256[] memory b) internal virtual {\r\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\r\n            emit log(\"Error: a == b not satisfied [uint[]]\");\r\n            emit log_named_array(\"      Left\", a);\r\n            emit log_named_array(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertEq(int256[] memory a, int256[] memory b) internal virtual {\r\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\r\n            emit log(\"Error: a == b not satisfied [int[]]\");\r\n            emit log_named_array(\"      Left\", a);\r\n            emit log_named_array(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertEq(address[] memory a, address[] memory b) internal virtual {\r\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\r\n            emit log(\"Error: a == b not satisfied [address[]]\");\r\n            emit log_named_array(\"      Left\", a);\r\n            emit log_named_array(\"     Right\", b);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertEq(uint256[] memory a, uint256[] memory b, string memory err) internal virtual {\r\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n\r\n    function assertEq(int256[] memory a, int256[] memory b, string memory err) internal virtual {\r\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n\r\n    function assertEq(address[] memory a, address[] memory b, string memory err) internal virtual {\r\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n\r\n    // Legacy helper\r\n    function assertEqUint(uint256 a, uint256 b) internal virtual {\r\n        assertEq(uint256(a), uint256(b));\r\n    }\r\n\r\n    function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta) internal virtual {\r\n        uint256 delta = stdMath.delta(a, b);\r\n\r\n        if (delta > maxDelta) {\r\n            emit log(\"Error: a ~= b not satisfied [uint]\");\r\n            emit log_named_uint(\"      Left\", a);\r\n            emit log_named_uint(\"     Right\", b);\r\n            emit log_named_uint(\" Max Delta\", maxDelta);\r\n            emit log_named_uint(\"     Delta\", delta);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta, string memory err) internal virtual {\r\n        uint256 delta = stdMath.delta(a, b);\r\n\r\n        if (delta > maxDelta) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertApproxEqAbs(a, b, maxDelta);\r\n        }\r\n    }\r\n\r\n    function assertApproxEqAbsDecimal(uint256 a, uint256 b, uint256 maxDelta, uint256 decimals) internal virtual {\r\n        uint256 delta = stdMath.delta(a, b);\r\n\r\n        if (delta > maxDelta) {\r\n            emit log(\"Error: a ~= b not satisfied [uint]\");\r\n            emit log_named_decimal_uint(\"      Left\", a, decimals);\r\n            emit log_named_decimal_uint(\"     Right\", b, decimals);\r\n            emit log_named_decimal_uint(\" Max Delta\", maxDelta, decimals);\r\n            emit log_named_decimal_uint(\"     Delta\", delta, decimals);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertApproxEqAbsDecimal(uint256 a, uint256 b, uint256 maxDelta, uint256 decimals, string memory err)\r\n        internal\r\n        virtual\r\n    {\r\n        uint256 delta = stdMath.delta(a, b);\r\n\r\n        if (delta > maxDelta) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertApproxEqAbsDecimal(a, b, maxDelta, decimals);\r\n        }\r\n    }\r\n\r\n    function assertApproxEqAbs(int256 a, int256 b, uint256 maxDelta) internal virtual {\r\n        uint256 delta = stdMath.delta(a, b);\r\n\r\n        if (delta > maxDelta) {\r\n            emit log(\"Error: a ~= b not satisfied [int]\");\r\n            emit log_named_int(\"       Left\", a);\r\n            emit log_named_int(\"      Right\", b);\r\n            emit log_named_uint(\" Max Delta\", maxDelta);\r\n            emit log_named_uint(\"     Delta\", delta);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertApproxEqAbs(int256 a, int256 b, uint256 maxDelta, string memory err) internal virtual {\r\n        uint256 delta = stdMath.delta(a, b);\r\n\r\n        if (delta > maxDelta) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertApproxEqAbs(a, b, maxDelta);\r\n        }\r\n    }\r\n\r\n    function assertApproxEqAbsDecimal(int256 a, int256 b, uint256 maxDelta, uint256 decimals) internal virtual {\r\n        uint256 delta = stdMath.delta(a, b);\r\n\r\n        if (delta > maxDelta) {\r\n            emit log(\"Error: a ~= b not satisfied [int]\");\r\n            emit log_named_decimal_int(\"      Left\", a, decimals);\r\n            emit log_named_decimal_int(\"     Right\", b, decimals);\r\n            emit log_named_decimal_uint(\" Max Delta\", maxDelta, decimals);\r\n            emit log_named_decimal_uint(\"     Delta\", delta, decimals);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertApproxEqAbsDecimal(int256 a, int256 b, uint256 maxDelta, uint256 decimals, string memory err)\r\n        internal\r\n        virtual\r\n    {\r\n        uint256 delta = stdMath.delta(a, b);\r\n\r\n        if (delta > maxDelta) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertApproxEqAbsDecimal(a, b, maxDelta, decimals);\r\n        }\r\n    }\r\n\r\n    function assertApproxEqRel(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\r\n    ) internal virtual {\r\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\r\n\r\n        uint256 percentDelta = stdMath.percentDelta(a, b);\r\n\r\n        if (percentDelta > maxPercentDelta) {\r\n            emit log(\"Error: a ~= b not satisfied [uint]\");\r\n            emit log_named_uint(\"        Left\", a);\r\n            emit log_named_uint(\"       Right\", b);\r\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta * 100, 18);\r\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta * 100, 18);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertApproxEqRel(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\r\n        string memory err\r\n    ) internal virtual {\r\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\r\n\r\n        uint256 percentDelta = stdMath.percentDelta(a, b);\r\n\r\n        if (percentDelta > maxPercentDelta) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertApproxEqRel(a, b, maxPercentDelta);\r\n        }\r\n    }\r\n\r\n    function assertApproxEqRelDecimal(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\r\n        uint256 decimals\r\n    ) internal virtual {\r\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\r\n\r\n        uint256 percentDelta = stdMath.percentDelta(a, b);\r\n\r\n        if (percentDelta > maxPercentDelta) {\r\n            emit log(\"Error: a ~= b not satisfied [uint]\");\r\n            emit log_named_decimal_uint(\"        Left\", a, decimals);\r\n            emit log_named_decimal_uint(\"       Right\", b, decimals);\r\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta * 100, 18);\r\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta * 100, 18);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertApproxEqRelDecimal(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\r\n        uint256 decimals,\r\n        string memory err\r\n    ) internal virtual {\r\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\r\n\r\n        uint256 percentDelta = stdMath.percentDelta(a, b);\r\n\r\n        if (percentDelta > maxPercentDelta) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals);\r\n        }\r\n    }\r\n\r\n    function assertApproxEqRel(int256 a, int256 b, uint256 maxPercentDelta) internal virtual {\r\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\r\n\r\n        uint256 percentDelta = stdMath.percentDelta(a, b);\r\n\r\n        if (percentDelta > maxPercentDelta) {\r\n            emit log(\"Error: a ~= b not satisfied [int]\");\r\n            emit log_named_int(\"        Left\", a);\r\n            emit log_named_int(\"       Right\", b);\r\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta * 100, 18);\r\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta * 100, 18);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertApproxEqRel(int256 a, int256 b, uint256 maxPercentDelta, string memory err) internal virtual {\r\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\r\n\r\n        uint256 percentDelta = stdMath.percentDelta(a, b);\r\n\r\n        if (percentDelta > maxPercentDelta) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertApproxEqRel(a, b, maxPercentDelta);\r\n        }\r\n    }\r\n\r\n    function assertApproxEqRelDecimal(int256 a, int256 b, uint256 maxPercentDelta, uint256 decimals) internal virtual {\r\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\r\n\r\n        uint256 percentDelta = stdMath.percentDelta(a, b);\r\n\r\n        if (percentDelta > maxPercentDelta) {\r\n            emit log(\"Error: a ~= b not satisfied [int]\");\r\n            emit log_named_decimal_int(\"        Left\", a, decimals);\r\n            emit log_named_decimal_int(\"       Right\", b, decimals);\r\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta * 100, 18);\r\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta * 100, 18);\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertApproxEqRelDecimal(int256 a, int256 b, uint256 maxPercentDelta, uint256 decimals, string memory err)\r\n        internal\r\n        virtual\r\n    {\r\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\r\n\r\n        uint256 percentDelta = stdMath.percentDelta(a, b);\r\n\r\n        if (percentDelta > maxPercentDelta) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals);\r\n        }\r\n    }\r\n\r\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {\r\n        assertEqCall(target, callDataA, target, callDataB, true);\r\n    }\r\n\r\n    function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)\r\n        internal\r\n        virtual\r\n    {\r\n        assertEqCall(targetA, callDataA, targetB, callDataB, true);\r\n    }\r\n\r\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)\r\n        internal\r\n        virtual\r\n    {\r\n        assertEqCall(target, callDataA, target, callDataB, strictRevertData);\r\n    }\r\n\r\n    function assertEqCall(\r\n        address targetA,\r\n        bytes memory callDataA,\r\n        address targetB,\r\n        bytes memory callDataB,\r\n        bool strictRevertData\r\n    ) internal virtual {\r\n        (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);\r\n        (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);\r\n\r\n        if (successA && successB) {\r\n            assertEq(returnDataA, returnDataB, \"Call return data does not match\");\r\n        }\r\n\r\n        if (!successA && !successB && strictRevertData) {\r\n            assertEq(returnDataA, returnDataB, \"Call revert data does not match\");\r\n        }\r\n\r\n        if (!successA && successB) {\r\n            emit log(\"Error: Calls were not equal\");\r\n            emit log_named_bytes(\"  Left call revert data\", returnDataA);\r\n            emit log_named_bytes(\" Right call return data\", returnDataB);\r\n            fail();\r\n        }\r\n\r\n        if (successA && !successB) {\r\n            emit log(\"Error: Calls were not equal\");\r\n            emit log_named_bytes(\"  Left call return data\", returnDataA);\r\n            emit log_named_bytes(\" Right call revert data\", returnDataB);\r\n            fail();\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdChains.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\n/**\r\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\r\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\r\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\r\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\r\n * alias used in this contract, which can be found as the first argument to the\r\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\r\n *\r\n * There are two main ways to use this contract:\r\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\r\n *      `setChain(string memory chainAlias, Chain memory chain)`\r\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\r\n *\r\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\r\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\r\n * `defaultRpcUrls`.\r\n *\r\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\r\n *\r\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\r\n * we want to retrieve the RPC URL for `mainnet`:\r\n *   - If you have specified data with `setChain`, it will return that.\r\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\r\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\r\n *   - If neither of the above conditions is met, the default data is returned.\r\n *\r\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\r\n */\r\nabstract contract StdChains {\r\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    bool private stdChainsInitialized;\r\n\r\n    struct ChainData {\r\n        string name;\r\n        uint256 chainId;\r\n        string rpcUrl;\r\n    }\r\n\r\n    struct Chain {\r\n        // The chain name.\r\n        string name;\r\n        // The chain's Chain ID.\r\n        uint256 chainId;\r\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\r\n        string chainAlias;\r\n        // A default RPC endpoint for this chain.\r\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\r\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\r\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\r\n        string rpcUrl;\r\n    }\r\n\r\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\r\n    mapping(string => Chain) private chains;\r\n    // Maps from the chain's alias to it's default RPC URL.\r\n    mapping(string => string) private defaultRpcUrls;\r\n    // Maps from a chain ID to it's alias.\r\n    mapping(uint256 => string) private idToAlias;\r\n\r\n    bool private fallbackToDefaultRpcUrls = true;\r\n\r\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\r\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\r\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\r\n\r\n        initializeStdChains();\r\n        chain = chains[chainAlias];\r\n        require(\r\n            chain.chainId != 0,\r\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\r\n        );\r\n\r\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\r\n    }\r\n\r\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\r\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\r\n        initializeStdChains();\r\n        string memory chainAlias = idToAlias[chainId];\r\n\r\n        chain = chains[chainAlias];\r\n\r\n        require(\r\n            chain.chainId != 0,\r\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\r\n        );\r\n\r\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\r\n    }\r\n\r\n    // set chain info, with priority to argument's rpcUrl field.\r\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\r\n        require(\r\n            bytes(chainAlias).length != 0,\r\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\r\n        );\r\n\r\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\r\n\r\n        initializeStdChains();\r\n        string memory foundAlias = idToAlias[chain.chainId];\r\n\r\n        require(\r\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\r\n            string(\r\n                abi.encodePacked(\r\n                    \"StdChains setChain(string,ChainData): Chain ID \",\r\n                    vm.toString(chain.chainId),\r\n                    \" already used by \\\"\",\r\n                    foundAlias,\r\n                    \"\\\".\"\r\n                )\r\n            )\r\n        );\r\n\r\n        uint256 oldChainId = chains[chainAlias].chainId;\r\n        delete idToAlias[oldChainId];\r\n\r\n        chains[chainAlias] =\r\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\r\n        idToAlias[chain.chainId] = chainAlias;\r\n    }\r\n\r\n    // set chain info, with priority to argument's rpcUrl field.\r\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\r\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\r\n    }\r\n\r\n    function _toUpper(string memory str) private pure returns (string memory) {\r\n        bytes memory strb = bytes(str);\r\n        bytes memory copy = new bytes(strb.length);\r\n        for (uint256 i = 0; i < strb.length; i++) {\r\n            bytes1 b = strb[i];\r\n            if (b >= 0x61 && b <= 0x7A) {\r\n                copy[i] = bytes1(uint8(b) - 32);\r\n            } else {\r\n                copy[i] = b;\r\n            }\r\n        }\r\n        return string(copy);\r\n    }\r\n\r\n    // lookup rpcUrl, in descending order of priority:\r\n    // current -> config (foundry.toml) -> environment variable -> default\r\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain) private returns (Chain memory) {\r\n        if (bytes(chain.rpcUrl).length == 0) {\r\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\r\n                chain.rpcUrl = configRpcUrl;\r\n            } catch (bytes memory err) {\r\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\r\n                if (fallbackToDefaultRpcUrls) {\r\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\r\n                } else {\r\n                    chain.rpcUrl = vm.envString(envName);\r\n                }\r\n                // Distinguish 'not found' from 'cannot read'\r\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\r\n                bytes memory oldNotFoundError =\r\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\r\n                bytes memory newNotFoundError = abi.encodeWithSignature(\r\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\r\n                );\r\n                bytes32 errHash = keccak256(err);\r\n                if (\r\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\r\n                        || bytes(chain.rpcUrl).length == 0\r\n                ) {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, err), mload(err))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return chain;\r\n    }\r\n\r\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\r\n        fallbackToDefaultRpcUrls = useDefault;\r\n    }\r\n\r\n    function initializeStdChains() private {\r\n        if (stdChainsInitialized) return;\r\n\r\n        stdChainsInitialized = true;\r\n\r\n        // If adding an RPC here, make sure to test the default RPC URL in `testRpcs`\r\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"mainnet\", ChainData(\"Mainnet\", 1, \"https://mainnet.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\r\n            \"goerli\", ChainData(\"Goerli\", 5, \"https://goerli.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\r\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\r\n        setChainWithDefaultRpcUrl(\"optimism_goerli\", ChainData(\"Optimism Goerli\", 420, \"https://goerli.optimism.io\"));\r\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"arbitrum_one_goerli\", ChainData(\"Arbitrum One Goerli\", 421613, \"https://goerli-rollup.arbitrum.io/rpc\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\r\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"polygon_mumbai\", ChainData(\"Polygon Mumbai\", 80001, \"https://rpc-mumbai.maticvigil.com\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\r\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\r\n            \"bnb_smart_chain_testnet\",\r\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\r\n        setChainWithDefaultRpcUrl(\"moonbeam\", ChainData(\"Moonbeam\", 1284, \"https://rpc.api.moonbeam.network\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"moonriver\", ChainData(\"Moonriver\", 1285, \"https://rpc.api.moonriver.moonbeam.network\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"moonbase\", ChainData(\"Moonbase\", 1287, \"https://rpc.testnet.moonbeam.network\"));\r\n        setChainWithDefaultRpcUrl(\"base_goerli\", ChainData(\"Base Goerli\", 84531, \"https://goerli.base.org\"));\r\n        setChainWithDefaultRpcUrl(\"base\", ChainData(\"Base\", 8453, \"https://mainnet.base.org\"));\r\n    }\r\n\r\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\r\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\r\n        string memory rpcUrl = chain.rpcUrl;\r\n        defaultRpcUrls[chainAlias] = rpcUrl;\r\n        chain.rpcUrl = \"\";\r\n        setChain(chainAlias, chain);\r\n        chain.rpcUrl = rpcUrl; // restore argument\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdCheats.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\r\nimport {console2} from \"./console2.sol\";\r\nimport {Vm} from \"./Vm.sol\";\r\n\r\nabstract contract StdCheatsSafe {\r\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    uint256 private constant UINT256_MAX =\r\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    bool private gasMeteringOff;\r\n\r\n    // Data structures to parse Transaction objects from the broadcast artifact\r\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\r\n    // and then converted to the one that is used by the user for better UX.\r\n\r\n    struct RawTx1559 {\r\n        string[] arguments;\r\n        address contractAddress;\r\n        string contractName;\r\n        // json value name = function\r\n        string functionSig;\r\n        bytes32 hash;\r\n        // json value name = tx\r\n        RawTx1559Detail txDetail;\r\n        // json value name = type\r\n        string opcode;\r\n    }\r\n\r\n    struct RawTx1559Detail {\r\n        AccessList[] accessList;\r\n        bytes data;\r\n        address from;\r\n        bytes gas;\r\n        bytes nonce;\r\n        address to;\r\n        bytes txType;\r\n        bytes value;\r\n    }\r\n\r\n    struct Tx1559 {\r\n        string[] arguments;\r\n        address contractAddress;\r\n        string contractName;\r\n        string functionSig;\r\n        bytes32 hash;\r\n        Tx1559Detail txDetail;\r\n        string opcode;\r\n    }\r\n\r\n    struct Tx1559Detail {\r\n        AccessList[] accessList;\r\n        bytes data;\r\n        address from;\r\n        uint256 gas;\r\n        uint256 nonce;\r\n        address to;\r\n        uint256 txType;\r\n        uint256 value;\r\n    }\r\n\r\n    // Data structures to parse Transaction objects from the broadcast artifact\r\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\r\n    // and then converted to the one that is used by the user for better UX.\r\n\r\n    struct TxLegacy {\r\n        string[] arguments;\r\n        address contractAddress;\r\n        string contractName;\r\n        string functionSig;\r\n        string hash;\r\n        string opcode;\r\n        TxDetailLegacy transaction;\r\n    }\r\n\r\n    struct TxDetailLegacy {\r\n        AccessList[] accessList;\r\n        uint256 chainId;\r\n        bytes data;\r\n        address from;\r\n        uint256 gas;\r\n        uint256 gasPrice;\r\n        bytes32 hash;\r\n        uint256 nonce;\r\n        bytes1 opcode;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint256 txType;\r\n        address to;\r\n        uint8 v;\r\n        uint256 value;\r\n    }\r\n\r\n    struct AccessList {\r\n        address accessAddress;\r\n        bytes32[] storageKeys;\r\n    }\r\n\r\n    // Data structures to parse Receipt objects from the broadcast artifact.\r\n    // The Raw structs is what is parsed from the JSON\r\n    // and then converted to the one that is used by the user for better UX.\r\n\r\n    struct RawReceipt {\r\n        bytes32 blockHash;\r\n        bytes blockNumber;\r\n        address contractAddress;\r\n        bytes cumulativeGasUsed;\r\n        bytes effectiveGasPrice;\r\n        address from;\r\n        bytes gasUsed;\r\n        RawReceiptLog[] logs;\r\n        bytes logsBloom;\r\n        bytes status;\r\n        address to;\r\n        bytes32 transactionHash;\r\n        bytes transactionIndex;\r\n    }\r\n\r\n    struct Receipt {\r\n        bytes32 blockHash;\r\n        uint256 blockNumber;\r\n        address contractAddress;\r\n        uint256 cumulativeGasUsed;\r\n        uint256 effectiveGasPrice;\r\n        address from;\r\n        uint256 gasUsed;\r\n        ReceiptLog[] logs;\r\n        bytes logsBloom;\r\n        uint256 status;\r\n        address to;\r\n        bytes32 transactionHash;\r\n        uint256 transactionIndex;\r\n    }\r\n\r\n    // Data structures to parse the entire broadcast artifact, assuming the\r\n    // transactions conform to EIP1559.\r\n\r\n    struct EIP1559ScriptArtifact {\r\n        string[] libraries;\r\n        string path;\r\n        string[] pending;\r\n        Receipt[] receipts;\r\n        uint256 timestamp;\r\n        Tx1559[] transactions;\r\n        TxReturn[] txReturns;\r\n    }\r\n\r\n    struct RawEIP1559ScriptArtifact {\r\n        string[] libraries;\r\n        string path;\r\n        string[] pending;\r\n        RawReceipt[] receipts;\r\n        TxReturn[] txReturns;\r\n        uint256 timestamp;\r\n        RawTx1559[] transactions;\r\n    }\r\n\r\n    struct RawReceiptLog {\r\n        // json value = address\r\n        address logAddress;\r\n        bytes32 blockHash;\r\n        bytes blockNumber;\r\n        bytes data;\r\n        bytes logIndex;\r\n        bool removed;\r\n        bytes32[] topics;\r\n        bytes32 transactionHash;\r\n        bytes transactionIndex;\r\n        bytes transactionLogIndex;\r\n    }\r\n\r\n    struct ReceiptLog {\r\n        // json value = address\r\n        address logAddress;\r\n        bytes32 blockHash;\r\n        uint256 blockNumber;\r\n        bytes data;\r\n        uint256 logIndex;\r\n        bytes32[] topics;\r\n        uint256 transactionIndex;\r\n        uint256 transactionLogIndex;\r\n        bool removed;\r\n    }\r\n\r\n    struct TxReturn {\r\n        string internalType;\r\n        string value;\r\n    }\r\n\r\n    struct Account {\r\n        address addr;\r\n        uint256 key;\r\n    }\r\n\r\n    enum AddressType {\r\n        Payable,\r\n        NonPayable,\r\n        ZeroAddress,\r\n        Precompile,\r\n        ForgeAddress\r\n    }\r\n\r\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\r\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\r\n        // Nothing to check if `token` is not a contract.\r\n        uint256 tokenCodeSize;\r\n        assembly {\r\n            tokenCodeSize := extcodesize(token)\r\n        }\r\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\r\n\r\n        bool success;\r\n        bytes memory returnData;\r\n\r\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\r\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\r\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\r\n\r\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\r\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\r\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\r\n    }\r\n\r\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\r\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\r\n    // backwards compatibility, since this name was used in the original PR which has already has\r\n    // a release. This function can be removed in a future release once we want a breaking change.\r\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\r\n        assumeNotBlacklisted(token, addr);\r\n    }\r\n\r\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\r\n        if (addressType == AddressType.Payable) {\r\n            assumeNotPayable(addr);\r\n        } else if (addressType == AddressType.NonPayable) {\r\n            assumePayable(addr);\r\n        } else if (addressType == AddressType.ZeroAddress) {\r\n            assumeNotZeroAddress(addr);\r\n        } else if (addressType == AddressType.Precompile) {\r\n            assumeNotPrecompile(addr);\r\n        } else if (addressType == AddressType.ForgeAddress) {\r\n            assumeNotForgeAddress(addr);\r\n        }\r\n    }\r\n\r\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\r\n        assumeAddressIsNot(addr, addressType1);\r\n        assumeAddressIsNot(addr, addressType2);\r\n    }\r\n\r\n    function assumeAddressIsNot(\r\n        address addr,\r\n        AddressType addressType1,\r\n        AddressType addressType2,\r\n        AddressType addressType3\r\n    ) internal virtual {\r\n        assumeAddressIsNot(addr, addressType1);\r\n        assumeAddressIsNot(addr, addressType2);\r\n        assumeAddressIsNot(addr, addressType3);\r\n    }\r\n\r\n    function assumeAddressIsNot(\r\n        address addr,\r\n        AddressType addressType1,\r\n        AddressType addressType2,\r\n        AddressType addressType3,\r\n        AddressType addressType4\r\n    ) internal virtual {\r\n        assumeAddressIsNot(addr, addressType1);\r\n        assumeAddressIsNot(addr, addressType2);\r\n        assumeAddressIsNot(addr, addressType3);\r\n        assumeAddressIsNot(addr, addressType4);\r\n    }\r\n\r\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\r\n    // `addr` and checking the `success` return value.\r\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\r\n    // implemented by `addr`, which should be taken into account when this function is used.\r\n    function _isPayable(address addr) private returns (bool) {\r\n        require(\r\n            addr.balance < UINT256_MAX,\r\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\r\n        );\r\n        uint256 origBalanceTest = address(this).balance;\r\n        uint256 origBalanceAddr = address(addr).balance;\r\n\r\n        vm.deal(address(this), 1);\r\n        (bool success,) = payable(addr).call{value: 1}(\"\");\r\n\r\n        // reset balances\r\n        vm.deal(address(this), origBalanceTest);\r\n        vm.deal(addr, origBalanceAddr);\r\n\r\n        return success;\r\n    }\r\n\r\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\r\n    // implemented by `addr`, which should be taken into account when this function is used. See the\r\n    // `_isPayable` method for more information.\r\n    function assumePayable(address addr) internal virtual {\r\n        vm.assume(_isPayable(addr));\r\n    }\r\n\r\n    function assumeNotPayable(address addr) internal virtual {\r\n        vm.assume(!_isPayable(addr));\r\n    }\r\n\r\n    function assumeNotZeroAddress(address addr) internal pure virtual {\r\n        vm.assume(addr != address(0));\r\n    }\r\n\r\n    function assumeNotPrecompile(address addr) internal pure virtual {\r\n        assumeNotPrecompile(addr, _pureChainId());\r\n    }\r\n\r\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\r\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\r\n        // address), but the same rationale for excluding them applies so we include those too.\r\n\r\n        // These should be present on all EVM-compatible chains.\r\n        vm.assume(addr < address(0x1) || addr > address(0x9));\r\n\r\n        // forgefmt: disable-start\r\n        if (chainId == 10 || chainId == 420) {\r\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\r\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\r\n        } else if (chainId == 42161 || chainId == 421613) {\r\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\r\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\r\n        } else if (chainId == 43114 || chainId == 43113) {\r\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\r\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\r\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\r\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\r\n        }\r\n        // forgefmt: disable-end\r\n    }\r\n\r\n    function assumeNotForgeAddress(address addr) internal pure virtual {\r\n        // vm, console, and Create2Deployer addresses\r\n        vm.assume(\r\n            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67\r\n                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C\r\n        );\r\n    }\r\n\r\n    function readEIP1559ScriptArtifact(string memory path)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (EIP1559ScriptArtifact memory)\r\n    {\r\n        string memory data = vm.readFile(path);\r\n        bytes memory parsedData = vm.parseJson(data);\r\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\r\n        EIP1559ScriptArtifact memory artifact;\r\n        artifact.libraries = rawArtifact.libraries;\r\n        artifact.path = rawArtifact.path;\r\n        artifact.timestamp = rawArtifact.timestamp;\r\n        artifact.pending = rawArtifact.pending;\r\n        artifact.txReturns = rawArtifact.txReturns;\r\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\r\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\r\n        return artifact;\r\n    }\r\n\r\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\r\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\r\n        for (uint256 i; i < rawTxs.length; i++) {\r\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\r\n        }\r\n        return txs;\r\n    }\r\n\r\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\r\n        Tx1559 memory transaction;\r\n        transaction.arguments = rawTx.arguments;\r\n        transaction.contractName = rawTx.contractName;\r\n        transaction.functionSig = rawTx.functionSig;\r\n        transaction.hash = rawTx.hash;\r\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\r\n        transaction.opcode = rawTx.opcode;\r\n        return transaction;\r\n    }\r\n\r\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\r\n        internal\r\n        pure\r\n        virtual\r\n        returns (Tx1559Detail memory)\r\n    {\r\n        Tx1559Detail memory txDetail;\r\n        txDetail.data = rawDetail.data;\r\n        txDetail.from = rawDetail.from;\r\n        txDetail.to = rawDetail.to;\r\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\r\n        txDetail.txType = _bytesToUint(rawDetail.txType);\r\n        txDetail.value = _bytesToUint(rawDetail.value);\r\n        txDetail.gas = _bytesToUint(rawDetail.gas);\r\n        txDetail.accessList = rawDetail.accessList;\r\n        return txDetail;\r\n    }\r\n\r\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\r\n        string memory deployData = vm.readFile(path);\r\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\r\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\r\n        return rawToConvertedEIPTx1559s(rawTxs);\r\n    }\r\n\r\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\r\n        string memory deployData = vm.readFile(path);\r\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\r\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\r\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\r\n        return rawToConvertedEIPTx1559(rawTx);\r\n    }\r\n\r\n    // Analogous to readTransactions, but for receipts.\r\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\r\n        string memory deployData = vm.readFile(path);\r\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\r\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\r\n        return rawToConvertedReceipts(rawReceipts);\r\n    }\r\n\r\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\r\n        string memory deployData = vm.readFile(path);\r\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\r\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\r\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\r\n        return rawToConvertedReceipt(rawReceipt);\r\n    }\r\n\r\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\r\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\r\n        for (uint256 i; i < rawReceipts.length; i++) {\r\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\r\n        }\r\n        return receipts;\r\n    }\r\n\r\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\r\n        Receipt memory receipt;\r\n        receipt.blockHash = rawReceipt.blockHash;\r\n        receipt.to = rawReceipt.to;\r\n        receipt.from = rawReceipt.from;\r\n        receipt.contractAddress = rawReceipt.contractAddress;\r\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\r\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\r\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\r\n        receipt.status = _bytesToUint(rawReceipt.status);\r\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\r\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\r\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\r\n        receipt.logsBloom = rawReceipt.logsBloom;\r\n        receipt.transactionHash = rawReceipt.transactionHash;\r\n        return receipt;\r\n    }\r\n\r\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\r\n        internal\r\n        pure\r\n        virtual\r\n        returns (ReceiptLog[] memory)\r\n    {\r\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\r\n        for (uint256 i; i < rawLogs.length; i++) {\r\n            logs[i].logAddress = rawLogs[i].logAddress;\r\n            logs[i].blockHash = rawLogs[i].blockHash;\r\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\r\n            logs[i].data = rawLogs[i].data;\r\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\r\n            logs[i].topics = rawLogs[i].topics;\r\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\r\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\r\n            logs[i].removed = rawLogs[i].removed;\r\n        }\r\n        return logs;\r\n    }\r\n\r\n    // Deploy a contract by fetching the contract bytecode from\r\n    // the artifacts directory\r\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\r\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\r\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\r\n        }\r\n\r\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\r\n    }\r\n\r\n    function deployCode(string memory what) internal virtual returns (address addr) {\r\n        bytes memory bytecode = vm.getCode(what);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\r\n        }\r\n\r\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\r\n    }\r\n\r\n    /// @dev deploy contract with value on construction\r\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\r\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\r\n        }\r\n\r\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\r\n    }\r\n\r\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\r\n        bytes memory bytecode = vm.getCode(what);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\r\n        }\r\n\r\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\r\n    }\r\n\r\n    // creates a labeled address and the corresponding private key\r\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\r\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\r\n        addr = vm.addr(privateKey);\r\n        vm.label(addr, name);\r\n    }\r\n\r\n    // creates a labeled address\r\n    function makeAddr(string memory name) internal virtual returns (address addr) {\r\n        (addr,) = makeAddrAndKey(name);\r\n    }\r\n\r\n    // Destroys an account immediately, sending the balance to beneficiary.\r\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\r\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\r\n    // only after tx ends, this will run immediately.\r\n    function destroyAccount(address who, address beneficiary) internal virtual {\r\n        uint256 currBalance = who.balance;\r\n        vm.etch(who, abi.encode());\r\n        vm.deal(who, 0);\r\n        vm.resetNonce(who);\r\n\r\n        uint256 beneficiaryBalance = beneficiary.balance;\r\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\r\n    }\r\n\r\n    // creates a struct containing both a labeled address and the corresponding private key\r\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\r\n        (account.addr, account.key) = makeAddrAndKey(name);\r\n    }\r\n\r\n    function deriveRememberKey(string memory mnemonic, uint32 index)\r\n        internal\r\n        virtual\r\n        returns (address who, uint256 privateKey)\r\n    {\r\n        privateKey = vm.deriveKey(mnemonic, index);\r\n        who = vm.rememberKey(privateKey);\r\n    }\r\n\r\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\r\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\r\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\r\n    }\r\n\r\n    function isFork() internal view virtual returns (bool status) {\r\n        try vm.activeFork() {\r\n            status = true;\r\n        } catch (bytes memory) {}\r\n    }\r\n\r\n    modifier skipWhenForking() {\r\n        if (!isFork()) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier skipWhenNotForking() {\r\n        if (isFork()) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier noGasMetering() {\r\n        vm.pauseGasMetering();\r\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\r\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\r\n        // it back on until we exit the top level function that used the modifier\r\n        //\r\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\r\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\r\n        // so we only turn metering back on at the end of the funcA\r\n        bool gasStartedOff = gasMeteringOff;\r\n        gasMeteringOff = true;\r\n\r\n        _;\r\n\r\n        // if gas metering was on when this modifier was called, turn it back on at the end\r\n        if (!gasStartedOff) {\r\n            gasMeteringOff = false;\r\n            vm.resumeGasMetering();\r\n        }\r\n    }\r\n\r\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\r\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\r\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\r\n    // Checker changed `chainid` from pure to view in 0.8.0.\r\n    function _viewChainId() private view returns (uint256 chainId) {\r\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n\r\n        address(this); // Silence warnings in older Solc versions.\r\n    }\r\n\r\n    function _pureChainId() private pure returns (uint256 chainId) {\r\n        function() internal view returns (uint256) fnIn = _viewChainId;\r\n        function() internal pure returns (uint256) pureChainId;\r\n        assembly {\r\n            pureChainId := fnIn\r\n        }\r\n        chainId = pureChainId();\r\n    }\r\n}\r\n\r\n// Wrappers around cheatcodes to avoid footguns\r\nabstract contract StdCheats is StdCheatsSafe {\r\n    using stdStorage for StdStorage;\r\n\r\n    StdStorage private stdstore;\r\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\r\n\r\n    // Skip forward or rewind time by the specified number of seconds\r\n    function skip(uint256 time) internal virtual {\r\n        vm.warp(block.timestamp + time);\r\n    }\r\n\r\n    function rewind(uint256 time) internal virtual {\r\n        vm.warp(block.timestamp - time);\r\n    }\r\n\r\n    // Setup a prank from an address that has some ether\r\n    function hoax(address msgSender) internal virtual {\r\n        vm.deal(msgSender, 1 << 128);\r\n        vm.prank(msgSender);\r\n    }\r\n\r\n    function hoax(address msgSender, uint256 give) internal virtual {\r\n        vm.deal(msgSender, give);\r\n        vm.prank(msgSender);\r\n    }\r\n\r\n    function hoax(address msgSender, address origin) internal virtual {\r\n        vm.deal(msgSender, 1 << 128);\r\n        vm.prank(msgSender, origin);\r\n    }\r\n\r\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\r\n        vm.deal(msgSender, give);\r\n        vm.prank(msgSender, origin);\r\n    }\r\n\r\n    // Start perpetual prank from an address that has some ether\r\n    function startHoax(address msgSender) internal virtual {\r\n        vm.deal(msgSender, 1 << 128);\r\n        vm.startPrank(msgSender);\r\n    }\r\n\r\n    function startHoax(address msgSender, uint256 give) internal virtual {\r\n        vm.deal(msgSender, give);\r\n        vm.startPrank(msgSender);\r\n    }\r\n\r\n    // Start perpetual prank from an address that has some ether\r\n    // tx.origin is set to the origin parameter\r\n    function startHoax(address msgSender, address origin) internal virtual {\r\n        vm.deal(msgSender, 1 << 128);\r\n        vm.startPrank(msgSender, origin);\r\n    }\r\n\r\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\r\n        vm.deal(msgSender, give);\r\n        vm.startPrank(msgSender, origin);\r\n    }\r\n\r\n    function changePrank(address msgSender) internal virtual {\r\n        console2_log_StdCheats(\"changePrank is deprecated. Please use vm.startPrank instead.\");\r\n        vm.stopPrank();\r\n        vm.startPrank(msgSender);\r\n    }\r\n\r\n    function changePrank(address msgSender, address txOrigin) internal virtual {\r\n        vm.stopPrank();\r\n        vm.startPrank(msgSender, txOrigin);\r\n    }\r\n\r\n    // The same as Vm's `deal`\r\n    // Use the alternative signature for ERC20 tokens\r\n    function deal(address to, uint256 give) internal virtual {\r\n        vm.deal(to, give);\r\n    }\r\n\r\n    // Set the balance of an account for any ERC20 token\r\n    // Use the alternative signature to update `totalSupply`\r\n    function deal(address token, address to, uint256 give) internal virtual {\r\n        deal(token, to, give, false);\r\n    }\r\n\r\n    // Set the balance of an account for any ERC1155 token\r\n    // Use the alternative signature to update `totalSupply`\r\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\r\n        dealERC1155(token, to, id, give, false);\r\n    }\r\n\r\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\r\n        // get current balance\r\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\r\n        uint256 prevBal = abi.decode(balData, (uint256));\r\n\r\n        // update balance\r\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\r\n\r\n        // update total supply\r\n        if (adjust) {\r\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\r\n            uint256 totSup = abi.decode(totSupData, (uint256));\r\n            if (give < prevBal) {\r\n                totSup -= (prevBal - give);\r\n            } else {\r\n                totSup += (give - prevBal);\r\n            }\r\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\r\n        }\r\n    }\r\n\r\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\r\n        // get current balance\r\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\r\n        uint256 prevBal = abi.decode(balData, (uint256));\r\n\r\n        // update balance\r\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\r\n\r\n        // update total supply\r\n        if (adjust) {\r\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\r\n            require(\r\n                totSupData.length != 0,\r\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\r\n            );\r\n            uint256 totSup = abi.decode(totSupData, (uint256));\r\n            if (give < prevBal) {\r\n                totSup -= (prevBal - give);\r\n            } else {\r\n                totSup += (give - prevBal);\r\n            }\r\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\r\n        }\r\n    }\r\n\r\n    function dealERC721(address token, address to, uint256 id) internal virtual {\r\n        // check if token id is already minted and the actual owner.\r\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\r\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\r\n\r\n        // get owner current balance\r\n        (, bytes memory fromBalData) =\r\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\r\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\r\n\r\n        // get new user current balance\r\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\r\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\r\n\r\n        // update balances\r\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\r\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\r\n\r\n        // update owner\r\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\r\n    }\r\n\r\n    function deployCodeTo(string memory what, address where) internal virtual {\r\n        deployCodeTo(what, \"\", 0, where);\r\n    }\r\n\r\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\r\n        deployCodeTo(what, args, 0, where);\r\n    }\r\n\r\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\r\n        bytes memory creationCode = vm.getCode(what);\r\n        vm.etch(where, abi.encodePacked(creationCode, args));\r\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\"\");\r\n        require(success, \"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\r\n        vm.etch(where, runtimeBytecode);\r\n    }\r\n\r\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\r\n    function console2_log_StdCheats(string memory p0) private view {\r\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\r\n        status;\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdError.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nlibrary stdError {\r\n    bytes public constant assertionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x01);\r\n    bytes public constant arithmeticError = abi.encodeWithSignature(\"Panic(uint256)\", 0x11);\r\n    bytes public constant divisionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x12);\r\n    bytes public constant enumConversionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x21);\r\n    bytes public constant encodeStorageError = abi.encodeWithSignature(\"Panic(uint256)\", 0x22);\r\n    bytes public constant popError = abi.encodeWithSignature(\"Panic(uint256)\", 0x31);\r\n    bytes public constant indexOOBError = abi.encodeWithSignature(\"Panic(uint256)\", 0x32);\r\n    bytes public constant memOverflowError = abi.encodeWithSignature(\"Panic(uint256)\", 0x41);\r\n    bytes public constant zeroVarError = abi.encodeWithSignature(\"Panic(uint256)\", 0x51);\r\n}\r\n"
      },
      "lib/forge-std/src/StdInvariant.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract StdInvariant {\r\n    struct FuzzSelector {\r\n        address addr;\r\n        bytes4[] selectors;\r\n    }\r\n\r\n    struct FuzzInterface {\r\n        address addr;\r\n        string[] artifacts;\r\n    }\r\n\r\n    address[] private _excludedContracts;\r\n    address[] private _excludedSenders;\r\n    address[] private _targetedContracts;\r\n    address[] private _targetedSenders;\r\n\r\n    string[] private _excludedArtifacts;\r\n    string[] private _targetedArtifacts;\r\n\r\n    FuzzSelector[] private _targetedArtifactSelectors;\r\n    FuzzSelector[] private _targetedSelectors;\r\n\r\n    FuzzInterface[] private _targetedInterfaces;\r\n\r\n    // Functions for users:\r\n    // These are intended to be called in tests.\r\n\r\n    function excludeContract(address newExcludedContract_) internal {\r\n        _excludedContracts.push(newExcludedContract_);\r\n    }\r\n\r\n    function excludeSender(address newExcludedSender_) internal {\r\n        _excludedSenders.push(newExcludedSender_);\r\n    }\r\n\r\n    function excludeArtifact(string memory newExcludedArtifact_) internal {\r\n        _excludedArtifacts.push(newExcludedArtifact_);\r\n    }\r\n\r\n    function targetArtifact(string memory newTargetedArtifact_) internal {\r\n        _targetedArtifacts.push(newTargetedArtifact_);\r\n    }\r\n\r\n    function targetArtifactSelector(FuzzSelector memory newTargetedArtifactSelector_) internal {\r\n        _targetedArtifactSelectors.push(newTargetedArtifactSelector_);\r\n    }\r\n\r\n    function targetContract(address newTargetedContract_) internal {\r\n        _targetedContracts.push(newTargetedContract_);\r\n    }\r\n\r\n    function targetSelector(FuzzSelector memory newTargetedSelector_) internal {\r\n        _targetedSelectors.push(newTargetedSelector_);\r\n    }\r\n\r\n    function targetSender(address newTargetedSender_) internal {\r\n        _targetedSenders.push(newTargetedSender_);\r\n    }\r\n\r\n    function targetInterface(FuzzInterface memory newTargetedInterface_) internal {\r\n        _targetedInterfaces.push(newTargetedInterface_);\r\n    }\r\n\r\n    // Functions for forge:\r\n    // These are called by forge to run invariant tests and don't need to be called in tests.\r\n\r\n    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\r\n        excludedArtifacts_ = _excludedArtifacts;\r\n    }\r\n\r\n    function excludeContracts() public view returns (address[] memory excludedContracts_) {\r\n        excludedContracts_ = _excludedContracts;\r\n    }\r\n\r\n    function excludeSenders() public view returns (address[] memory excludedSenders_) {\r\n        excludedSenders_ = _excludedSenders;\r\n    }\r\n\r\n    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\r\n        targetedArtifacts_ = _targetedArtifacts;\r\n    }\r\n\r\n    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\r\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\r\n    }\r\n\r\n    function targetContracts() public view returns (address[] memory targetedContracts_) {\r\n        targetedContracts_ = _targetedContracts;\r\n    }\r\n\r\n    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\r\n        targetedSelectors_ = _targetedSelectors;\r\n    }\r\n\r\n    function targetSenders() public view returns (address[] memory targetedSenders_) {\r\n        targetedSenders_ = _targetedSenders;\r\n    }\r\n\r\n    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\r\n        targetedInterfaces_ = _targetedInterfaces;\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdJson.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\n// Helpers for parsing and writing JSON files\r\n// To parse:\r\n// ```\r\n// using stdJson for string;\r\n// string memory json = vm.readFile(\"some_peth\");\r\n// json.parseUint(\"<json_path>\");\r\n// ```\r\n// To write:\r\n// ```\r\n// using stdJson for string;\r\n// string memory json = \"deploymentArtifact\";\r\n// Contract contract = new Contract();\r\n// json.serialize(\"contractAddress\", address(contract));\r\n// json = json.serialize(\"deploymentTimes\", uint(1));\r\n// // store the stringified JSON to the 'json' variable we have been using as a key\r\n// // as we won't need it any longer\r\n// string memory json2 = \"finalArtifact\";\r\n// string memory final = json2.serialize(\"depArtifact\", json);\r\n// final.write(\"<some_path>\");\r\n// ```\r\n\r\nlibrary stdJson {\r\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\r\n        return vm.parseJson(json, key);\r\n    }\r\n\r\n    function readUint(string memory json, string memory key) internal pure returns (uint256) {\r\n        return vm.parseJsonUint(json, key);\r\n    }\r\n\r\n    function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {\r\n        return vm.parseJsonUintArray(json, key);\r\n    }\r\n\r\n    function readInt(string memory json, string memory key) internal pure returns (int256) {\r\n        return vm.parseJsonInt(json, key);\r\n    }\r\n\r\n    function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {\r\n        return vm.parseJsonIntArray(json, key);\r\n    }\r\n\r\n    function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {\r\n        return vm.parseJsonBytes32(json, key);\r\n    }\r\n\r\n    function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {\r\n        return vm.parseJsonBytes32Array(json, key);\r\n    }\r\n\r\n    function readString(string memory json, string memory key) internal pure returns (string memory) {\r\n        return vm.parseJsonString(json, key);\r\n    }\r\n\r\n    function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {\r\n        return vm.parseJsonStringArray(json, key);\r\n    }\r\n\r\n    function readAddress(string memory json, string memory key) internal pure returns (address) {\r\n        return vm.parseJsonAddress(json, key);\r\n    }\r\n\r\n    function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {\r\n        return vm.parseJsonAddressArray(json, key);\r\n    }\r\n\r\n    function readBool(string memory json, string memory key) internal pure returns (bool) {\r\n        return vm.parseJsonBool(json, key);\r\n    }\r\n\r\n    function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {\r\n        return vm.parseJsonBoolArray(json, key);\r\n    }\r\n\r\n    function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {\r\n        return vm.parseJsonBytes(json, key);\r\n    }\r\n\r\n    function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {\r\n        return vm.parseJsonBytesArray(json, key);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\r\n        return vm.serializeJson(jsonKey, rootObject);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\r\n        return vm.serializeBool(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeBool(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\r\n        return vm.serializeUint(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeUint(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\r\n        return vm.serializeInt(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeInt(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\r\n        return vm.serializeAddress(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeAddress(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\r\n        return vm.serializeBytes32(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeBytes32(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\r\n        return vm.serializeBytes(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeBytes(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, string memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeString(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeString(jsonKey, key, value);\r\n    }\r\n\r\n    function write(string memory jsonKey, string memory path) internal {\r\n        vm.writeJson(jsonKey, path);\r\n    }\r\n\r\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\r\n        vm.writeJson(jsonKey, path, valueKey);\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nlibrary stdMath {\r\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n\r\n    function abs(int256 a) internal pure returns (uint256) {\r\n        // Required or it will fail when `a = type(int256).min`\r\n        if (a == INT256_MIN) {\r\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n        }\r\n\r\n        return uint256(a > 0 ? a : -a);\r\n    }\r\n\r\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a - b : b - a;\r\n    }\r\n\r\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\r\n        // a and b are of the same sign\r\n        // this works thanks to two's complement, the left-most bit is the sign bit\r\n        if ((a ^ b) > -1) {\r\n            return delta(abs(a), abs(b));\r\n        }\r\n\r\n        // a and b are of opposite signs\r\n        return abs(a) + abs(b);\r\n    }\r\n\r\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 absDelta = delta(a, b);\r\n\r\n        return absDelta * 1e18 / b;\r\n    }\r\n\r\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\r\n        uint256 absDelta = delta(a, b);\r\n        uint256 absB = abs(b);\r\n\r\n        return absDelta * 1e18 / absB;\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nimport {Vm} from \"./Vm.sol\";\r\n\r\nstruct StdStorage {\r\n    mapping(address => mapping(bytes4 => mapping(bytes32 => uint256))) slots;\r\n    mapping(address => mapping(bytes4 => mapping(bytes32 => bool))) finds;\r\n    bytes32[] _keys;\r\n    bytes4 _sig;\r\n    uint256 _depth;\r\n    address _target;\r\n    bytes32 _set;\r\n}\r\n\r\nlibrary stdStorageSafe {\r\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\r\n    event WARNING_UninitedSlot(address who, uint256 slot);\r\n\r\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\r\n        return bytes4(keccak256(bytes(sigStr)));\r\n    }\r\n\r\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\r\n    // slot complexity:\r\n    //  if flat, will be bytes32(uint256(uint));\r\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\r\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\r\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\r\n    function find(StdStorage storage self) internal returns (uint256) {\r\n        address who = self._target;\r\n        bytes4 fsig = self._sig;\r\n        uint256 field_depth = self._depth;\r\n        bytes32[] memory ins = self._keys;\r\n\r\n        // calldata to test against\r\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\r\n            return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\r\n        }\r\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\r\n        vm.record();\r\n        bytes32 fdat;\r\n        {\r\n            (, bytes memory rdat) = who.staticcall(cald);\r\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\r\n        }\r\n\r\n        (bytes32[] memory reads,) = vm.accesses(address(who));\r\n        if (reads.length == 1) {\r\n            bytes32 curr = vm.load(who, reads[0]);\r\n            if (curr == bytes32(0)) {\r\n                emit WARNING_UninitedSlot(who, uint256(reads[0]));\r\n            }\r\n            if (fdat != curr) {\r\n                require(\r\n                    false,\r\n                    \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\r\n                );\r\n            }\r\n            emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[0]));\r\n            self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[0]);\r\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\r\n        } else if (reads.length > 1) {\r\n            for (uint256 i = 0; i < reads.length; i++) {\r\n                bytes32 prev = vm.load(who, reads[i]);\r\n                if (prev == bytes32(0)) {\r\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\r\n                }\r\n                if (prev != fdat) {\r\n                    continue;\r\n                }\r\n                bytes32 new_val = ~prev;\r\n                // store\r\n                vm.store(who, reads[i], new_val);\r\n                bool success;\r\n                {\r\n                    bytes memory rdat;\r\n                    (success, rdat) = who.staticcall(cald);\r\n                    fdat = bytesToBytes32(rdat, 32 * field_depth);\r\n                }\r\n\r\n                if (success && fdat == new_val) {\r\n                    // we found which of the slots is the actual one\r\n                    emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));\r\n                    self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);\r\n                    self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\r\n                    vm.store(who, reads[i], prev);\r\n                    break;\r\n                }\r\n                vm.store(who, reads[i], prev);\r\n            }\r\n        } else {\r\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\r\n        }\r\n\r\n        require(\r\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))],\r\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\r\n        );\r\n\r\n        delete self._target;\r\n        delete self._sig;\r\n        delete self._keys;\r\n        delete self._depth;\r\n\r\n        return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\r\n    }\r\n\r\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\r\n        self._target = _target;\r\n        return self;\r\n    }\r\n\r\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\r\n        self._sig = _sig;\r\n        return self;\r\n    }\r\n\r\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\r\n        self._sig = sigs(_sig);\r\n        return self;\r\n    }\r\n\r\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\r\n        self._keys.push(bytes32(uint256(uint160(who))));\r\n        return self;\r\n    }\r\n\r\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\r\n        self._keys.push(bytes32(amt));\r\n        return self;\r\n    }\r\n\r\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\r\n        self._keys.push(key);\r\n        return self;\r\n    }\r\n\r\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\r\n        self._depth = _depth;\r\n        return self;\r\n    }\r\n\r\n    function read(StdStorage storage self) private returns (bytes memory) {\r\n        address t = self._target;\r\n        uint256 s = find(self);\r\n        return abi.encode(vm.load(t, bytes32(s)));\r\n    }\r\n\r\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\r\n        return abi.decode(read(self), (bytes32));\r\n    }\r\n\r\n    function read_bool(StdStorage storage self) internal returns (bool) {\r\n        int256 v = read_int(self);\r\n        if (v == 0) return false;\r\n        if (v == 1) return true;\r\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\r\n    }\r\n\r\n    function read_address(StdStorage storage self) internal returns (address) {\r\n        return abi.decode(read(self), (address));\r\n    }\r\n\r\n    function read_uint(StdStorage storage self) internal returns (uint256) {\r\n        return abi.decode(read(self), (uint256));\r\n    }\r\n\r\n    function read_int(StdStorage storage self) internal returns (int256) {\r\n        return abi.decode(read(self), (int256));\r\n    }\r\n\r\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\r\n        address who = self._target;\r\n        uint256 field_depth = self._depth;\r\n        vm.startMappingRecording();\r\n        uint256 child = find(self) - field_depth;\r\n        (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\r\n        if (!found) {\r\n            revert(\r\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\r\n            );\r\n        }\r\n        return (uint256(parent_slot), key);\r\n    }\r\n\r\n    function root(StdStorage storage self) internal returns (uint256) {\r\n        address who = self._target;\r\n        uint256 field_depth = self._depth;\r\n        vm.startMappingRecording();\r\n        uint256 child = find(self) - field_depth;\r\n        bool found;\r\n        bytes32 root_slot;\r\n        bytes32 parent_slot;\r\n        (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\r\n        if (!found) {\r\n            revert(\r\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\r\n            );\r\n        }\r\n        while (found) {\r\n            root_slot = parent_slot;\r\n            (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));\r\n        }\r\n        return uint256(root_slot);\r\n    }\r\n\r\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\r\n        bytes32 out;\r\n\r\n        uint256 max = b.length > 32 ? 32 : b.length;\r\n        for (uint256 i = 0; i < max; i++) {\r\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\r\n        bytes memory result = new bytes(b.length * 32);\r\n        for (uint256 i = 0; i < b.length; i++) {\r\n            bytes32 k = b[i];\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                mstore(add(result, add(32, mul(32, i))), k)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary stdStorage {\r\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\r\n        return stdStorageSafe.sigs(sigStr);\r\n    }\r\n\r\n    function find(StdStorage storage self) internal returns (uint256) {\r\n        return stdStorageSafe.find(self);\r\n    }\r\n\r\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.target(self, _target);\r\n    }\r\n\r\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.sig(self, _sig);\r\n    }\r\n\r\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.sig(self, _sig);\r\n    }\r\n\r\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.with_key(self, who);\r\n    }\r\n\r\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.with_key(self, amt);\r\n    }\r\n\r\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.with_key(self, key);\r\n    }\r\n\r\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.depth(self, _depth);\r\n    }\r\n\r\n    function checked_write(StdStorage storage self, address who) internal {\r\n        checked_write(self, bytes32(uint256(uint160(who))));\r\n    }\r\n\r\n    function checked_write(StdStorage storage self, uint256 amt) internal {\r\n        checked_write(self, bytes32(amt));\r\n    }\r\n\r\n    function checked_write_int(StdStorage storage self, int256 val) internal {\r\n        checked_write(self, bytes32(uint256(val)));\r\n    }\r\n\r\n    function checked_write(StdStorage storage self, bool write) internal {\r\n        bytes32 t;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            t := write\r\n        }\r\n        checked_write(self, t);\r\n    }\r\n\r\n    function checked_write(StdStorage storage self, bytes32 set) internal {\r\n        address who = self._target;\r\n        bytes4 fsig = self._sig;\r\n        uint256 field_depth = self._depth;\r\n        bytes32[] memory ins = self._keys;\r\n\r\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\r\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\r\n            find(self);\r\n        }\r\n        bytes32 slot = bytes32(self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]);\r\n\r\n        bytes32 fdat;\r\n        {\r\n            (, bytes memory rdat) = who.staticcall(cald);\r\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\r\n        }\r\n        bytes32 curr = vm.load(who, slot);\r\n\r\n        if (fdat != curr) {\r\n            require(\r\n                false,\r\n                \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\r\n            );\r\n        }\r\n        vm.store(who, slot, set);\r\n        delete self._target;\r\n        delete self._sig;\r\n        delete self._keys;\r\n        delete self._depth;\r\n    }\r\n\r\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\r\n        return stdStorageSafe.read_bytes32(self);\r\n    }\r\n\r\n    function read_bool(StdStorage storage self) internal returns (bool) {\r\n        return stdStorageSafe.read_bool(self);\r\n    }\r\n\r\n    function read_address(StdStorage storage self) internal returns (address) {\r\n        return stdStorageSafe.read_address(self);\r\n    }\r\n\r\n    function read_uint(StdStorage storage self) internal returns (uint256) {\r\n        return stdStorageSafe.read_uint(self);\r\n    }\r\n\r\n    function read_int(StdStorage storage self) internal returns (int256) {\r\n        return stdStorageSafe.read_int(self);\r\n    }\r\n\r\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\r\n        return stdStorageSafe.parent(self);\r\n    }\r\n\r\n    function root(StdStorage storage self) internal returns (uint256) {\r\n        return stdStorageSafe.root(self);\r\n    }\r\n\r\n    // Private function so needs to be copied over\r\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\r\n        bytes32 out;\r\n\r\n        uint256 max = b.length > 32 ? 32 : b.length;\r\n        for (uint256 i = 0; i < max; i++) {\r\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    // Private function so needs to be copied over\r\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\r\n        bytes memory result = new bytes(b.length * 32);\r\n        for (uint256 i = 0; i < b.length; i++) {\r\n            bytes32 k = b[i];\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                mstore(add(result, add(32, mul(32, i))), k)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdStyle.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\nlibrary StdStyle {\r\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    string constant RED = \"\\u001b[91m\";\r\n    string constant GREEN = \"\\u001b[92m\";\r\n    string constant YELLOW = \"\\u001b[93m\";\r\n    string constant BLUE = \"\\u001b[94m\";\r\n    string constant MAGENTA = \"\\u001b[95m\";\r\n    string constant CYAN = \"\\u001b[96m\";\r\n    string constant BOLD = \"\\u001b[1m\";\r\n    string constant DIM = \"\\u001b[2m\";\r\n    string constant ITALIC = \"\\u001b[3m\";\r\n    string constant UNDERLINE = \"\\u001b[4m\";\r\n    string constant INVERSE = \"\\u001b[7m\";\r\n    string constant RESET = \"\\u001b[0m\";\r\n\r\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\r\n        return string(abi.encodePacked(style, self, RESET));\r\n    }\r\n\r\n    function red(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(RED, self);\r\n    }\r\n\r\n    function red(uint256 self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function red(int256 self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function red(address self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function red(bool self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function redBytes(bytes memory self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function green(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(GREEN, self);\r\n    }\r\n\r\n    function green(uint256 self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function green(int256 self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function green(address self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function green(bool self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function yellow(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(YELLOW, self);\r\n    }\r\n\r\n    function yellow(uint256 self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellow(int256 self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellow(address self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellow(bool self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function blue(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(BLUE, self);\r\n    }\r\n\r\n    function blue(uint256 self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blue(int256 self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blue(address self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blue(bool self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function magenta(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(MAGENTA, self);\r\n    }\r\n\r\n    function magenta(uint256 self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magenta(int256 self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magenta(address self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magenta(bool self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function cyan(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(CYAN, self);\r\n    }\r\n\r\n    function cyan(uint256 self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyan(int256 self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyan(address self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyan(bool self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function bold(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(BOLD, self);\r\n    }\r\n\r\n    function bold(uint256 self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function bold(int256 self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function bold(address self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function bold(bool self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function dim(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(DIM, self);\r\n    }\r\n\r\n    function dim(uint256 self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dim(int256 self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dim(address self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dim(bool self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function italic(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(ITALIC, self);\r\n    }\r\n\r\n    function italic(uint256 self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italic(int256 self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italic(address self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italic(bool self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function underline(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(UNDERLINE, self);\r\n    }\r\n\r\n    function underline(uint256 self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underline(int256 self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underline(address self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underline(bool self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function inverse(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(INVERSE, self);\r\n    }\r\n\r\n    function inverse(uint256 self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverse(int256 self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverse(address self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverse(bool self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdUtils.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\r\nimport {MockERC20} from \"./mocks/MockERC20.sol\";\r\nimport {MockERC721} from \"./mocks/MockERC721.sol\";\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\nabstract contract StdUtils {\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                     CONSTANTS\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\r\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\r\n    uint256 private constant INT256_MIN_ABS =\r\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n    uint256 private constant SECP256K1_ORDER =\r\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\r\n    uint256 private constant UINT256_MAX =\r\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\r\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\r\n\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                 INTERNAL FUNCTIONS\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\r\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\r\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\r\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\r\n        if (x >= min && x <= max) return x;\r\n\r\n        uint256 size = max - min + 1;\r\n\r\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\r\n        // This helps ensure coverage of the min/max values.\r\n        if (x <= 3 && size > x) return min + x;\r\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\r\n\r\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\r\n        if (x > max) {\r\n            uint256 diff = x - max;\r\n            uint256 rem = diff % size;\r\n            if (rem == 0) return max;\r\n            result = min + rem - 1;\r\n        } else if (x < min) {\r\n            uint256 diff = min - x;\r\n            uint256 rem = diff % size;\r\n            if (rem == 0) return min;\r\n            result = max - rem + 1;\r\n        }\r\n    }\r\n\r\n    function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\r\n        result = _bound(x, min, max);\r\n        console2_log_StdUtils(\"Bound Result\", result);\r\n    }\r\n\r\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\r\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\r\n\r\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\r\n        // int256 : -(2**255) ~ (2**255 - 1)\r\n        // uint256:     0     ~ (2**256 - 1)\r\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\r\n        //\r\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\r\n        // So, use `~uint256(x) + 1` instead.\r\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\r\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\r\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\r\n\r\n        uint256 y = _bound(_x, _min, _max);\r\n\r\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\r\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\r\n    }\r\n\r\n    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\r\n        result = _bound(x, min, max);\r\n        console2_log_StdUtils(\"Bound result\", vm.toString(result));\r\n    }\r\n\r\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\r\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\r\n    }\r\n\r\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\r\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\r\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\r\n    }\r\n\r\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\r\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\r\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\r\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\r\n        return vm.computeCreateAddress(deployer, nonce);\r\n    }\r\n\r\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\r\n        internal\r\n        pure\r\n        virtual\r\n        returns (address)\r\n    {\r\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\r\n        return vm.computeCreate2Address(salt, initcodeHash, deployer);\r\n    }\r\n\r\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\r\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\r\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\r\n        return vm.computeCreate2Address(salt, initCodeHash);\r\n    }\r\n\r\n    /// @dev returns an initialized mock ERC20 contract\r\n    function deployMockERC20(string memory name, string memory symbol, uint8 decimals)\r\n        internal\r\n        returns (MockERC20 mock)\r\n    {\r\n        mock = new MockERC20();\r\n        mock.initialize(name, symbol, decimals);\r\n    }\r\n\r\n    /// @dev returns an initialized mock ERC721 contract\r\n    function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {\r\n        mock = new MockERC721();\r\n        mock.initialize(name, symbol);\r\n    }\r\n\r\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\r\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\r\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\r\n        return hashInitCode(creationCode, \"\");\r\n    }\r\n\r\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\r\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\r\n    /// @param args the ABI-encoded arguments to the constructor of C\r\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(creationCode, args));\r\n    }\r\n\r\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\r\n    function getTokenBalances(address token, address[] memory addresses)\r\n        internal\r\n        virtual\r\n        returns (uint256[] memory balances)\r\n    {\r\n        uint256 tokenCodeSize;\r\n        assembly {\r\n            tokenCodeSize := extcodesize(token)\r\n        }\r\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\r\n\r\n        // ABI encode the aggregate call to Multicall3.\r\n        uint256 length = addresses.length;\r\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\r\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\r\n        }\r\n\r\n        // Make the aggregate call.\r\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\r\n\r\n        // ABI decode the return data and return the balances.\r\n        balances = new uint256[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            balances[i] = abi.decode(returnData[i], (uint256));\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                 PRIVATE FUNCTIONS\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\r\n        return address(uint160(uint256(bytesValue)));\r\n    }\r\n\r\n    // This section is used to prevent the compilation of console, which shortens the compilation time when console is\r\n    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\r\n    // any breaking changes to function signatures.\r\n    function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\r\n        internal\r\n        pure\r\n        returns (function(bytes memory) internal pure fnOut)\r\n    {\r\n        assembly {\r\n            fnOut := fnIn\r\n        }\r\n    }\r\n\r\n    function _sendLogPayload(bytes memory payload) internal pure {\r\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\r\n    }\r\n\r\n    function _sendLogPayloadView(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE2_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n        }\r\n    }\r\n\r\n    function console2_log_StdUtils(string memory p0) private pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\r\n    }\r\n\r\n    function console2_log_StdUtils(string memory p0, string memory p1) private pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/Test.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// 💬 ABOUT\r\n// Forge Std's default Test.\r\n\r\n// 🧩 MODULES\r\nimport {console} from \"./console.sol\";\r\nimport {console2} from \"./console2.sol\";\r\nimport {safeconsole} from \"./safeconsole.sol\";\r\nimport {StdAssertions} from \"./StdAssertions.sol\";\r\nimport {StdChains} from \"./StdChains.sol\";\r\nimport {StdCheats} from \"./StdCheats.sol\";\r\nimport {stdError} from \"./StdError.sol\";\r\nimport {StdInvariant} from \"./StdInvariant.sol\";\r\nimport {stdJson} from \"./StdJson.sol\";\r\nimport {stdMath} from \"./StdMath.sol\";\r\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\r\nimport {StdStyle} from \"./StdStyle.sol\";\r\nimport {StdUtils} from \"./StdUtils.sol\";\r\nimport {Vm} from \"./Vm.sol\";\r\n\r\n// 📦 BOILERPLATE\r\nimport {TestBase} from \"./Base.sol\";\r\nimport {DSTest} from \"ds-test/test.sol\";\r\n\r\n// ⭐️ TEST\r\nabstract contract Test is TestBase, DSTest, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {\r\n// Note: IS_TEST() must return true.\r\n// Note: Must have failure system, https://github.com/dapphub/ds-test/blob/cd98eff28324bfac652e63a239a60632a761790b/src/test.sol#L39-L76.\r\n}\r\n"
      },
      "lib/forge-std/src/Vm.sol": {
        "content": "// Automatically @generated by scripts/vm.py. Do not modify manually.\r\n\r\n// SPDX-License-Identifier: MIT OR Apache-2.0\r\npragma solidity >=0.6.2 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\r\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\r\n/// these cheats in scripts.\r\ninterface VmSafe {\r\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\r\n    enum CallerMode {\r\n        // No caller modification is currently active.\r\n        None,\r\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\r\n        Broadcast,\r\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\r\n        RecurrentBroadcast,\r\n        // A one time prank triggered by a `vm.prank()` call is currently active.\r\n        Prank,\r\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\r\n        RecurrentPrank\r\n    }\r\n\r\n    /// The kind of account access that occurred.\r\n    enum AccountAccessKind {\r\n        // The account was called.\r\n        Call,\r\n        // The account was called via delegatecall.\r\n        DelegateCall,\r\n        // The account was called via callcode.\r\n        CallCode,\r\n        // The account was called via staticcall.\r\n        StaticCall,\r\n        // The account was created.\r\n        Create,\r\n        // The account was selfdestructed.\r\n        SelfDestruct,\r\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\r\n        Resume,\r\n        // The account's balance was read.\r\n        Balance,\r\n        // The account's codesize was read.\r\n        Extcodesize,\r\n        // The account's codehash was read.\r\n        Extcodehash,\r\n        // The account's code was copied.\r\n        Extcodecopy\r\n    }\r\n\r\n    /// An Ethereum log. Returned by `getRecordedLogs`.\r\n    struct Log {\r\n        // The topics of the log, including the signature, if any.\r\n        bytes32[] topics;\r\n        // The raw data of the log.\r\n        bytes data;\r\n        // The address of the log's emitter.\r\n        address emitter;\r\n    }\r\n\r\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\r\n    struct Rpc {\r\n        // The alias of the RPC URL.\r\n        string key;\r\n        // The RPC URL.\r\n        string url;\r\n    }\r\n\r\n    /// An RPC log object. Returned by `eth_getLogs`.\r\n    struct EthGetLogs {\r\n        // The address of the log's emitter.\r\n        address emitter;\r\n        // The topics of the log, including the signature, if any.\r\n        bytes32[] topics;\r\n        // The raw data of the log.\r\n        bytes data;\r\n        // The block hash.\r\n        bytes32 blockHash;\r\n        // The block number.\r\n        uint64 blockNumber;\r\n        // The transaction hash.\r\n        bytes32 transactionHash;\r\n        // The transaction index in the block.\r\n        uint64 transactionIndex;\r\n        // The log index.\r\n        uint256 logIndex;\r\n        // Whether the log was removed.\r\n        bool removed;\r\n    }\r\n\r\n    /// A single entry in a directory listing. Returned by `readDir`.\r\n    struct DirEntry {\r\n        // The error message, if any.\r\n        string errorMessage;\r\n        // The path of the entry.\r\n        string path;\r\n        // The depth of the entry.\r\n        uint64 depth;\r\n        // Whether the entry is a directory.\r\n        bool isDir;\r\n        // Whether the entry is a symlink.\r\n        bool isSymlink;\r\n    }\r\n\r\n    /// Metadata information about a file.\r\n    /// This structure is returned from the `fsMetadata` function and represents known\r\n    /// metadata about a file such as its permissions, size, modification\r\n    /// times, etc.\r\n    struct FsMetadata {\r\n        // True if this metadata is for a directory.\r\n        bool isDir;\r\n        // True if this metadata is for a symlink.\r\n        bool isSymlink;\r\n        // The size of the file, in bytes, this metadata is for.\r\n        uint256 length;\r\n        // True if this metadata is for a readonly (unwritable) file.\r\n        bool readOnly;\r\n        // The last modification time listed in this metadata.\r\n        uint256 modified;\r\n        // The last access time of this metadata.\r\n        uint256 accessed;\r\n        // The creation time listed in this metadata.\r\n        uint256 created;\r\n    }\r\n\r\n    /// A wallet with a public and private key.\r\n    struct Wallet {\r\n        // The wallet's address.\r\n        address addr;\r\n        // The wallet's public key `X`.\r\n        uint256 publicKeyX;\r\n        // The wallet's public key `Y`.\r\n        uint256 publicKeyY;\r\n        // The wallet's private key.\r\n        uint256 privateKey;\r\n    }\r\n\r\n    /// The result of a `tryFfi` call.\r\n    struct FfiResult {\r\n        // The exit code of the call.\r\n        int32 exitCode;\r\n        // The optionally hex-decoded `stdout` data.\r\n        bytes stdout;\r\n        // The `stderr` data.\r\n        bytes stderr;\r\n    }\r\n\r\n    /// Information on the chain and fork.\r\n    struct ChainInfo {\r\n        // The fork identifier. Set to zero if no fork is active.\r\n        uint256 forkId;\r\n        // The chain ID of the current fork.\r\n        uint256 chainId;\r\n    }\r\n\r\n    /// The result of a `stopAndReturnStateDiff` call.\r\n    struct AccountAccess {\r\n        // The chain and fork the access occurred.\r\n        ChainInfo chainInfo;\r\n        // The kind of account access that determines what the account is.\r\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\r\n        // If kind is Create, then the account is the newly created account.\r\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\r\n        // If kind is a Resume, then account represents a account context that has resumed.\r\n        AccountAccessKind kind;\r\n        // The account that was accessed.\r\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\r\n        address account;\r\n        // What accessed the account.\r\n        address accessor;\r\n        // If the account was initialized or empty prior to the access.\r\n        // An account is considered initialized if it has code, a\r\n        // non-zero nonce, or a non-zero balance.\r\n        bool initialized;\r\n        // The previous balance of the accessed account.\r\n        uint256 oldBalance;\r\n        // The potential new balance of the accessed account.\r\n        // That is, all balance changes are recorded here, even if reverts occurred.\r\n        uint256 newBalance;\r\n        // Code of the account deployed by CREATE.\r\n        bytes deployedCode;\r\n        // Value passed along with the account access\r\n        uint256 value;\r\n        // Input data provided to the CREATE or CALL\r\n        bytes data;\r\n        // If this access reverted in either the current or parent context.\r\n        bool reverted;\r\n        // An ordered list of storage accesses made during an account access operation.\r\n        StorageAccess[] storageAccesses;\r\n    }\r\n\r\n    /// The storage accessed during an `AccountAccess`.\r\n    struct StorageAccess {\r\n        // The account whose storage was accessed.\r\n        address account;\r\n        // The slot that was accessed.\r\n        bytes32 slot;\r\n        // If the access was a write.\r\n        bool isWrite;\r\n        // The previous value of the slot.\r\n        bytes32 previousValue;\r\n        // The new value of the slot.\r\n        bytes32 newValue;\r\n        // If the access was reverted.\r\n        bool reverted;\r\n    }\r\n\r\n    // ======== Environment ========\r\n\r\n    /// Gets the environment variable `name` and parses it as `address`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envAddress(string calldata name) external view returns (address value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `bool`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envBool(string calldata name) external view returns (bool value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `bytes32`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envBytes32(string calldata name) external view returns (bytes32 value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `bytes`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envBytes(string calldata name) external view returns (bytes memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `int256`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envInt(string calldata name) external view returns (int256 value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `bool`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, bool defaultValue) external returns (bool value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `uint256`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, uint256 defaultValue) external returns (uint256 value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\r\n        external\r\n        returns (address[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\r\n        external\r\n        returns (bytes32[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\r\n        external\r\n        returns (string[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\r\n        external\r\n        returns (bytes[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `int256`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, int256 defaultValue) external returns (int256 value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `address`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, address defaultValue) external returns (address value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `bytes32`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, bytes32 defaultValue) external returns (bytes32 value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `string`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, string calldata defaultValue) external returns (string memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `bytes`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, bytes calldata defaultValue) external returns (bytes memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\r\n        external\r\n        returns (bool[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\r\n        external\r\n        returns (uint256[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\r\n    /// Reverts if the variable could not be parsed.\r\n    /// Returns `defaultValue` if the variable was not found.\r\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\r\n        external\r\n        returns (int256[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `string`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envString(string calldata name) external view returns (string memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\r\n\r\n    /// Gets the environment variable `name` and parses it as `uint256`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envUint(string calldata name) external view returns (uint256 value);\r\n\r\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\r\n    /// Reverts if the variable was not found or could not be parsed.\r\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\r\n\r\n    /// Sets environment variables.\r\n    function setEnv(string calldata name, string calldata value) external;\r\n\r\n    // ======== EVM ========\r\n\r\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\r\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\r\n\r\n    /// Gets the address for a given private key.\r\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\r\n\r\n    /// Gets all the logs according to specified filter.\r\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\r\n        external\r\n        returns (EthGetLogs[] memory logs);\r\n\r\n    /// Gets the current `block.number`.\r\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\r\n    /// and as a result will get optimized out by the compiler.\r\n    /// See https://github.com/foundry-rs/foundry/issues/6180\r\n    function getBlockNumber() external view returns (uint256 height);\r\n\r\n    /// Gets the current `block.timestamp`.\r\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\r\n    /// and as a result will get optimized out by the compiler.\r\n    /// See https://github.com/foundry-rs/foundry/issues/6180\r\n    function getBlockTimestamp() external view returns (uint256 timestamp);\r\n\r\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\r\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\r\n        external\r\n        returns (bool found, bytes32 key, bytes32 parent);\r\n\r\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\r\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\r\n\r\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\r\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\r\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\r\n\r\n    /// Gets the nonce of an account.\r\n    function getNonce(address account) external view returns (uint64 nonce);\r\n\r\n    /// Gets all the recorded logs.\r\n    function getRecordedLogs() external returns (Log[] memory logs);\r\n\r\n    /// Loads a storage slot from an address.\r\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\r\n\r\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\r\n    function pauseGasMetering() external;\r\n\r\n    /// Records all storage reads and writes.\r\n    function record() external;\r\n\r\n    /// Record all the transaction logs.\r\n    function recordLogs() external;\r\n\r\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\r\n    function resumeGasMetering() external;\r\n\r\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\r\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\r\n\r\n    /// Signs data.\r\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\r\n\r\n    /// Starts recording all map SSTOREs for later retrieval.\r\n    function startMappingRecording() external;\r\n\r\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\r\n    /// along with the context of the calls\r\n    function startStateDiffRecording() external;\r\n\r\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\r\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\r\n\r\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\r\n    function stopMappingRecording() external;\r\n\r\n    // ======== Filesystem ========\r\n\r\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\r\n    /// `path` is relative to the project root.\r\n    function closeFile(string calldata path) external;\r\n\r\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\r\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\r\n    /// Both `from` and `to` are relative to the project root.\r\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\r\n\r\n    /// Creates a new, empty directory at the provided path.\r\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    /// - User lacks permissions to modify `path`.\r\n    /// - A parent of the given path doesn't exist and `recursive` is false.\r\n    /// - `path` already exists and `recursive` is false.\r\n    /// `path` is relative to the project root.\r\n    function createDir(string calldata path, bool recursive) external;\r\n\r\n    /// Returns true if the given path points to an existing entity, else returns false.\r\n    function exists(string calldata path) external returns (bool result);\r\n\r\n    /// Performs a foreign function call via the terminal.\r\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\r\n\r\n    /// Given a path, query the file system to get information about a file, directory, etc.\r\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\r\n\r\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file.\r\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\r\n\r\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file.\r\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\r\n\r\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\r\n    function isDir(string calldata path) external returns (bool result);\r\n\r\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\r\n    function isFile(string calldata path) external returns (bool result);\r\n\r\n    /// Get the path of the current project root.\r\n    function projectRoot() external view returns (string memory path);\r\n\r\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\r\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\r\n    /// Follows symbolic links if `followLinks` is true.\r\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\r\n\r\n    /// See `readDir(string)`.\r\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\r\n\r\n    /// See `readDir(string)`.\r\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\r\n        external\r\n        view\r\n        returns (DirEntry[] memory entries);\r\n\r\n    /// Reads the entire content of file to string. `path` is relative to the project root.\r\n    function readFile(string calldata path) external view returns (string memory data);\r\n\r\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\r\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\r\n\r\n    /// Reads next line of file to string.\r\n    function readLine(string calldata path) external view returns (string memory line);\r\n\r\n    /// Reads a symbolic link, returning the path that the link points to.\r\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    /// - `path` is not a symbolic link.\r\n    /// - `path` does not exist.\r\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\r\n\r\n    /// Removes a directory at the provided path.\r\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    /// - `path` doesn't exist.\r\n    /// - `path` isn't a directory.\r\n    /// - User lacks permissions to modify `path`.\r\n    /// - The directory is not empty and `recursive` is false.\r\n    /// `path` is relative to the project root.\r\n    function removeDir(string calldata path, bool recursive) external;\r\n\r\n    /// Removes a file from the filesystem.\r\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    /// - `path` points to a directory.\r\n    /// - The file doesn't exist.\r\n    /// - The user lacks permissions to remove the file.\r\n    /// `path` is relative to the project root.\r\n    function removeFile(string calldata path) external;\r\n\r\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\r\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\r\n\r\n    /// Returns the time since unix epoch in milliseconds.\r\n    function unixTime() external returns (uint256 milliseconds);\r\n\r\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\r\n    /// `path` is relative to the project root.\r\n    function writeFile(string calldata path, string calldata data) external;\r\n\r\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\r\n    /// `path` is relative to the project root.\r\n    function writeFileBinary(string calldata path, bytes calldata data) external;\r\n\r\n    /// Writes line to file, creating a file if it does not exist.\r\n    /// `path` is relative to the project root.\r\n    function writeLine(string calldata path, string calldata data) external;\r\n\r\n    // ======== JSON ========\r\n\r\n    /// Checks if `key` exists in a JSON object.\r\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\r\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\r\n    function parseJsonAddressArray(string calldata json, string calldata key)\r\n        external\r\n        pure\r\n        returns (address[] memory);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\r\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\r\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\r\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\r\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\r\n    function parseJsonBytes32Array(string calldata json, string calldata key)\r\n        external\r\n        pure\r\n        returns (bytes32[] memory);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\r\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\r\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\r\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\r\n\r\n    /// Returns an array of all the keys in a JSON object.\r\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\r\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\r\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\r\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\r\n\r\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\r\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\r\n\r\n    /// ABI-encodes a JSON object.\r\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\r\n\r\n    /// ABI-encodes a JSON object at `key`.\r\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\r\n    /// Returns the stringified version of the specific JSON file up to that moment.\r\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// See `serializeJson`.\r\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\r\n    function writeJson(string calldata json, string calldata path) external;\r\n\r\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\r\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\r\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\r\n\r\n    // ======== Scripting ========\r\n\r\n    /// Using the address that calls the test contract, has the next call (at this call depth only)\r\n    /// create a transaction that can later be signed and sent onchain.\r\n    function broadcast() external;\r\n\r\n    /// Has the next call (at this call depth only) create a transaction with the address provided\r\n    /// as the sender that can later be signed and sent onchain.\r\n    function broadcast(address signer) external;\r\n\r\n    /// Has the next call (at this call depth only) create a transaction with the private key\r\n    /// provided as the sender that can later be signed and sent onchain.\r\n    function broadcast(uint256 privateKey) external;\r\n\r\n    /// Using the address that calls the test contract, has all subsequent calls\r\n    /// (at this call depth only) create transactions that can later be signed and sent onchain.\r\n    function startBroadcast() external;\r\n\r\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\r\n    /// provided that can later be signed and sent onchain.\r\n    function startBroadcast(address signer) external;\r\n\r\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\r\n    /// provided that can later be signed and sent onchain.\r\n    function startBroadcast(uint256 privateKey) external;\r\n\r\n    /// Stops collecting onchain transactions.\r\n    function stopBroadcast() external;\r\n\r\n    // ======== String ========\r\n\r\n    /// Parses the given `string` into an `address`.\r\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\r\n\r\n    /// Parses the given `string` into a `bool`.\r\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\r\n\r\n    /// Parses the given `string` into `bytes`.\r\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\r\n\r\n    /// Parses the given `string` into a `bytes32`.\r\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\r\n\r\n    /// Parses the given `string` into a `int256`.\r\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\r\n\r\n    /// Parses the given `string` into a `uint256`.\r\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\r\n\r\n    /// Converts the given value to a `string`.\r\n    function toString(address value) external pure returns (string memory stringifiedValue);\r\n\r\n    /// Converts the given value to a `string`.\r\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\r\n\r\n    /// Converts the given value to a `string`.\r\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\r\n\r\n    /// Converts the given value to a `string`.\r\n    function toString(bool value) external pure returns (string memory stringifiedValue);\r\n\r\n    /// Converts the given value to a `string`.\r\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\r\n\r\n    /// Converts the given value to a `string`.\r\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\r\n\r\n    // ======== Testing ========\r\n\r\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\r\n    function assume(bool condition) external pure;\r\n\r\n    /// Writes a breakpoint to jump to in the debugger.\r\n    function breakpoint(string calldata char) external;\r\n\r\n    /// Writes a conditional breakpoint to jump to in the debugger.\r\n    function breakpoint(string calldata char, bool value) external;\r\n\r\n    /// Returns the RPC url for the given alias.\r\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\r\n\r\n    /// Returns all rpc urls and their aliases as structs.\r\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\r\n\r\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\r\n    function rpcUrls() external view returns (string[2][] memory urls);\r\n\r\n    /// Suspends execution of the main thread for `duration` milliseconds.\r\n    function sleep(uint256 duration) external;\r\n\r\n    // ======== Utilities ========\r\n\r\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\r\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\r\n        external\r\n        pure\r\n        returns (address);\r\n\r\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\r\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\r\n\r\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\r\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\r\n\r\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\r\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\r\n\r\n    /// Generates a wallet from the private key and returns the wallet.\r\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\r\n\r\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\r\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\r\n\r\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\r\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\r\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\r\n\r\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\r\n    /// at `{derivationPath}{index}`.\r\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\r\n        external\r\n        pure\r\n        returns (uint256 privateKey);\r\n\r\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\r\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\r\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\r\n        external\r\n        pure\r\n        returns (uint256 privateKey);\r\n\r\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\r\n    /// at `{derivationPath}{index}`.\r\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\r\n        external\r\n        pure\r\n        returns (uint256 privateKey);\r\n\r\n    /// Gets the label for the specified address.\r\n    function getLabel(address account) external returns (string memory currentLabel);\r\n\r\n    /// Get a `Wallet`'s nonce.\r\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\r\n\r\n    /// Labels an address in call traces.\r\n    function label(address account, string calldata newLabel) external;\r\n\r\n    /// Adds a private key to the local forge wallet and returns the address.\r\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\r\n\r\n    /// Signs data with a `Wallet`.\r\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\r\n}\r\n\r\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\r\n/// in tests, but it is not recommended to use these cheats in scripts.\r\ninterface Vm is VmSafe {\r\n    // ======== EVM ========\r\n\r\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\r\n    function activeFork() external view returns (uint256 forkId);\r\n\r\n    /// In forking mode, explicitly grant the given address cheatcode access.\r\n    function allowCheatcodes(address account) external;\r\n\r\n    /// Sets `block.chainid`.\r\n    function chainId(uint256 newChainId) external;\r\n\r\n    /// Clears all mocked calls.\r\n    function clearMockedCalls() external;\r\n\r\n    /// Sets `block.coinbase`.\r\n    function coinbase(address newCoinbase) external;\r\n\r\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\r\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\r\n\r\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\r\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\r\n\r\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\r\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\r\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\r\n\r\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\r\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\r\n\r\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\r\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\r\n\r\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\r\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\r\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\r\n\r\n    /// Sets an address' balance.\r\n    function deal(address account, uint256 newBalance) external;\r\n\r\n    /// Removes the snapshot with the given ID created by `snapshot`.\r\n    /// Takes the snapshot ID to delete.\r\n    /// Returns `true` if the snapshot was successfully deleted.\r\n    /// Returns `false` if the snapshot does not exist.\r\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\r\n\r\n    /// Removes _all_ snapshots previously created by `snapshot`.\r\n    function deleteSnapshots() external;\r\n\r\n    /// Sets `block.difficulty`.\r\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\r\n    /// Reverts if used on unsupported EVM versions.\r\n    function difficulty(uint256 newDifficulty) external;\r\n\r\n    /// Sets an address' code.\r\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\r\n\r\n    /// Sets `block.basefee`.\r\n    function fee(uint256 newBasefee) external;\r\n\r\n    /// Returns true if the account is marked as persistent.\r\n    function isPersistent(address account) external view returns (bool persistent);\r\n\r\n    /// Load a genesis JSON file's `allocs` into the in-memory revm state.\r\n    function loadAllocs(string calldata pathToAllocsJson) external;\r\n\r\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\r\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\r\n    function makePersistent(address account) external;\r\n\r\n    /// See `makePersistent(address)`.\r\n    function makePersistent(address account0, address account1) external;\r\n\r\n    /// See `makePersistent(address)`.\r\n    function makePersistent(address account0, address account1, address account2) external;\r\n\r\n    /// See `makePersistent(address)`.\r\n    function makePersistent(address[] calldata accounts) external;\r\n\r\n    /// Reverts a call to an address with specified revert data.\r\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\r\n\r\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\r\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\r\n        external;\r\n\r\n    /// Mocks a call to an address, returning specified data.\r\n    /// Calldata can either be strict or a partial match, e.g. if you only\r\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\r\n    /// function will be mocked.\r\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\r\n\r\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\r\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\r\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\r\n\r\n    /// Sets the *next* call's `msg.sender` to be the input address.\r\n    function prank(address msgSender) external;\r\n\r\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\r\n    function prank(address msgSender, address txOrigin) external;\r\n\r\n    /// Sets `block.prevrandao`.\r\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\r\n    /// If used on unsupported EVM versions it will revert.\r\n    function prevrandao(bytes32 newPrevrandao) external;\r\n\r\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\r\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\r\n\r\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\r\n    function resetNonce(address account) external;\r\n\r\n    /// Revert the state of the EVM to a previous snapshot\r\n    /// Takes the snapshot ID to revert to.\r\n    /// Returns `true` if the snapshot was successfully reverted.\r\n    /// Returns `false` if the snapshot does not exist.\r\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`.\r\n    function revertTo(uint256 snapshotId) external returns (bool success);\r\n\r\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\r\n    /// Takes the snapshot ID to revert to.\r\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\r\n    /// Returns `false` if the snapshot does not exist.\r\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\r\n\r\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\r\n    function revokePersistent(address account) external;\r\n\r\n    /// See `revokePersistent(address)`.\r\n    function revokePersistent(address[] calldata accounts) external;\r\n\r\n    /// Sets `block.height`.\r\n    function roll(uint256 newHeight) external;\r\n\r\n    /// Updates the currently active fork to given block number\r\n    /// This is similar to `roll` but for the currently active fork.\r\n    function rollFork(uint256 blockNumber) external;\r\n\r\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\r\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\r\n    function rollFork(bytes32 txHash) external;\r\n\r\n    /// Updates the given fork to given block number.\r\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\r\n\r\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\r\n    function rollFork(uint256 forkId, bytes32 txHash) external;\r\n\r\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\r\n    function selectFork(uint256 forkId) external;\r\n\r\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\r\n    function setNonce(address account, uint64 newNonce) external;\r\n\r\n    /// Sets the nonce of an account to an arbitrary value.\r\n    function setNonceUnsafe(address account, uint64 newNonce) external;\r\n\r\n    /// Snapshot the current state of the evm.\r\n    /// Returns the ID of the snapshot that was created.\r\n    /// To revert a snapshot use `revertTo`.\r\n    function snapshot() external returns (uint256 snapshotId);\r\n\r\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\r\n    function startPrank(address msgSender) external;\r\n\r\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\r\n    function startPrank(address msgSender, address txOrigin) external;\r\n\r\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\r\n    function stopPrank() external;\r\n\r\n    /// Stores a value to an address' storage slot.\r\n    function store(address target, bytes32 slot, bytes32 value) external;\r\n\r\n    /// Fetches the given transaction from the active fork and executes it on the current state.\r\n    function transact(bytes32 txHash) external;\r\n\r\n    /// Fetches the given transaction from the given fork and executes it on the current state.\r\n    function transact(uint256 forkId, bytes32 txHash) external;\r\n\r\n    /// Sets `tx.gasprice`.\r\n    function txGasPrice(uint256 newGasPrice) external;\r\n\r\n    /// Sets `block.timestamp`.\r\n    function warp(uint256 newTimestamp) external;\r\n\r\n    // ======== Testing ========\r\n\r\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\r\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\r\n\r\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\r\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\r\n        external;\r\n\r\n    /// Expects a call to an address with the specified calldata.\r\n    /// Calldata can either be a strict or a partial match.\r\n    function expectCall(address callee, bytes calldata data) external;\r\n\r\n    /// Expects given number of calls to an address with the specified calldata.\r\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\r\n\r\n    /// Expects a call to an address with the specified `msg.value` and calldata.\r\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\r\n\r\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\r\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\r\n\r\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\r\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\r\n\r\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\r\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\r\n\r\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\r\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\r\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\r\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\r\n\r\n    /// Same as the previous method, but also checks supplied address against emitting contract.\r\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\r\n        external;\r\n\r\n    /// Prepare an expected log with all topic and data checks enabled.\r\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\r\n    /// logs were emitted in the expected order with the expected topics and data.\r\n    function expectEmit() external;\r\n\r\n    /// Same as the previous method, but also checks supplied address against emitting contract.\r\n    function expectEmit(address emitter) external;\r\n\r\n    /// Expects an error on next call with any revert data.\r\n    function expectRevert() external;\r\n\r\n    /// Expects an error on next call that starts with the revert data.\r\n    function expectRevert(bytes4 revertData) external;\r\n\r\n    /// Expects an error on next call that exactly matches the revert data.\r\n    function expectRevert(bytes calldata revertData) external;\r\n\r\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\r\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\r\n    function expectSafeMemory(uint64 min, uint64 max) external;\r\n\r\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\r\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\r\n    /// to the set.\r\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\r\n\r\n    /// Marks a test as skipped. Must be called at the top of the test.\r\n    function skip(bool skipTest) external;\r\n}\r\n"
      },
      "lib/forge-std/src/console.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n    function _sendLogPayload(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n        }\r\n    }\r\n\r\n    function log() internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n    }\r\n\r\n    function logUint(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n}"
      },
      "lib/forge-std/src/console2.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\r\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\r\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\r\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\r\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\r\nlibrary console2 {\r\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n    function _castLogPayloadViewToPure(\r\n        function(bytes memory) internal view fnIn\r\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\r\n        assembly {\r\n            fnOut := fnIn\r\n        }\r\n    }\r\n\r\n    function _sendLogPayload(bytes memory payload) internal pure {\r\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\r\n    }\r\n\r\n    function _sendLogPayloadView(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n        }\r\n    }\r\n\r\n    function log() internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\r\n    }\r\n\r\n    function logUint(uint256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n    }\r\n\r\n    function log(int256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, int256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n}"
      },
      "lib/forge-std/src/interfaces/IMulticall3.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IMulticall3 {\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Call3 {\r\n        address target;\r\n        bool allowFailure;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Call3Value {\r\n        address target;\r\n        bool allowFailure;\r\n        uint256 value;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        bytes returnData;\r\n    }\r\n\r\n    function aggregate(Call[] calldata calls)\r\n        external\r\n        payable\r\n        returns (uint256 blockNumber, bytes[] memory returnData);\r\n\r\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\r\n\r\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\r\n\r\n    function blockAndAggregate(Call[] calldata calls)\r\n        external\r\n        payable\r\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\r\n\r\n    function getBasefee() external view returns (uint256 basefee);\r\n\r\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\r\n\r\n    function getBlockNumber() external view returns (uint256 blockNumber);\r\n\r\n    function getChainId() external view returns (uint256 chainid);\r\n\r\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\r\n\r\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\r\n\r\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\r\n\r\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\r\n\r\n    function getEthBalance(address addr) external view returns (uint256 balance);\r\n\r\n    function getLastBlockHash() external view returns (bytes32 blockHash);\r\n\r\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\r\n        external\r\n        payable\r\n        returns (Result[] memory returnData);\r\n\r\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\r\n        external\r\n        payable\r\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\r\n}\r\n"
      },
      "lib/forge-std/src/mocks/MockERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\r\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\r\ncontract MockERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 internal INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               INITIALIZE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @dev A bool to track whether the contract has been initialized.\r\n    bool private initialized;\r\n\r\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\r\n    /// syntaxes, we add an initialization function that can be called only once.\r\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals) public {\r\n        require(!initialized, \"ALREADY_INITIALIZED\");\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = _pureChainId();\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n\r\n        initialized = true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] = _sub(balanceOf[msg.sender], amount);\r\n        balanceOf[to] = _add(balanceOf[to], amount);\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != ~uint256(0)) allowance[from][msg.sender] = _sub(allowed, amount);\r\n\r\n        balanceOf[from] = _sub(balanceOf[from], amount);\r\n        balanceOf[to] = _add(balanceOf[to], amount);\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\r\n        public\r\n        virtual\r\n    {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        address recoveredAddress = ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(\r\n                        abi.encode(\r\n                            keccak256(\r\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n                            ),\r\n                            owner,\r\n                            spender,\r\n                            value,\r\n                            nonces[owner]++,\r\n                            deadline\r\n                        )\r\n                    )\r\n                )\r\n            ),\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n        allowance[recoveredAddress][spender] = value;\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name)),\r\n                keccak256(\"1\"),\r\n                _pureChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply = _add(totalSupply, amount);\r\n        balanceOf[to] = _add(balanceOf[to], amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] = _sub(balanceOf[from], amount);\r\n        totalSupply = _sub(totalSupply, amount);\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL SAFE MATH LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ERC20: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"ERC20: subtraction underflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                                HELPERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\r\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\r\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\r\n    // Checker changed `chainid` from pure to view in 0.8.0.\r\n    function _viewChainId() private view returns (uint256 chainId) {\r\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n\r\n        address(this); // Silence warnings in older Solc versions.\r\n    }\r\n\r\n    function _pureChainId() private pure returns (uint256 chainId) {\r\n        function() internal view returns (uint256) fnIn = _viewChainId;\r\n        function() internal pure returns (uint256) pureChainId;\r\n        assembly {\r\n            pureChainId := fnIn\r\n        }\r\n        chainId = pureChainId();\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/mocks/MockERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\n/// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.\r\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol\r\ncontract MockERC721 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                         METADATA STORAGE/LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    function tokenURI(uint256 id) public view virtual returns (string memory) {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                      ERC721 BALANCE/OWNER STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(uint256 => address) internal _ownerOf;\r\n\r\n    mapping(address => uint256) internal _balanceOf;\r\n\r\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\r\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        require(owner != address(0), \"ZERO_ADDRESS\");\r\n\r\n        return _balanceOf[owner];\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                         ERC721 APPROVAL STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               INITIALIZE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @dev A bool to track whether the contract has been initialized.\r\n    bool private initialized;\r\n\r\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\r\n    /// syntaxes, we add an initialization function that can be called only once.\r\n    function initialize(string memory _name, string memory _symbol) public {\r\n        require(!initialized, \"ALREADY_INITIALIZED\");\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        initialized = true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 id) public virtual {\r\n        address owner = _ownerOf[id];\r\n\r\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\r\n\r\n        getApproved[id] = spender;\r\n\r\n        emit Approval(owner, spender, id);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 id) public virtual {\r\n        require(from == _ownerOf[id], \"WRONG_FROM\");\r\n\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(\r\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id], \"NOT_AUTHORIZED\"\r\n        );\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        _balanceOf[from]--;\r\n\r\n        _balanceOf[to]++;\r\n\r\n        _ownerOf[id] = to;\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            !_isContract(to)\r\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\")\r\n                    == IERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            !_isContract(to)\r\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\r\n                    == IERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC165 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\r\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\r\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\r\n            || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 id) internal virtual {\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\r\n\r\n        // Counter overflow is incredibly unrealistic.\r\n\r\n        _balanceOf[to]++;\r\n\r\n        _ownerOf[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function _burn(uint256 id) internal virtual {\r\n        address owner = _ownerOf[id];\r\n\r\n        require(owner != address(0), \"NOT_MINTED\");\r\n\r\n        _balanceOf[owner]--;\r\n\r\n        delete _ownerOf[id];\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(owner, address(0), id);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL SAFE MINT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _safeMint(address to, uint256 id) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            !_isContract(to)\r\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\")\r\n                    == IERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            !_isContract(to)\r\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data)\r\n                    == IERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                                HELPERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _isContract(address _addr) private view returns (bool) {\r\n        uint256 codeLength;\r\n\r\n        // Assembly required for versions < 0.8.0 to check extcodesize.\r\n        assembly {\r\n            codeLength := extcodesize(_addr)\r\n        }\r\n\r\n        return codeLength > 0;\r\n    }\r\n}\r\n\r\ninterface IERC721TokenReceiver {\r\n    function onERC721Received(address, address, uint256, bytes calldata) external returns (bytes4);\r\n}\r\n"
      },
      "lib/forge-std/src/safeconsole.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\n/// @author philogy <https://github.com/philogy>\r\n/// @dev Code generated automatically by script.\r\nlibrary safeconsole {\r\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\r\n\r\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\r\n    // for the view-to-pure log trick.\r\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\r\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\r\n        function(uint256, uint256) internal pure pureSendLogPayload;\r\n        assembly {\r\n            pureSendLogPayload := fnIn\r\n        }\r\n        pureSendLogPayload(offset, size);\r\n    }\r\n\r\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\r\n        assembly {\r\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\r\n        }\r\n    }\r\n\r\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\r\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\r\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\r\n        assembly {\r\n            pureMemcopy := fnIn\r\n        }\r\n        pureMemcopy(fromOffset, toOffset, length);\r\n    }\r\n\r\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\r\n        assembly {\r\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\r\n        }\r\n    }\r\n\r\n    function logMemory(uint256 offset, uint256 length) internal pure {\r\n        if (offset >= 0x60) {\r\n            // Sufficient memory before slice to prepare call header.\r\n            bytes32 m0;\r\n            bytes32 m1;\r\n            bytes32 m2;\r\n            assembly {\r\n                m0 := mload(sub(offset, 0x60))\r\n                m1 := mload(sub(offset, 0x40))\r\n                m2 := mload(sub(offset, 0x20))\r\n                // Selector of `logBytes(bytes)`.\r\n                mstore(sub(offset, 0x60), 0xe17bf956)\r\n                mstore(sub(offset, 0x40), 0x20)\r\n                mstore(sub(offset, 0x20), length)\r\n            }\r\n            _sendLogPayload(offset - 0x44, length + 0x44);\r\n            assembly {\r\n                mstore(sub(offset, 0x60), m0)\r\n                mstore(sub(offset, 0x40), m1)\r\n                mstore(sub(offset, 0x20), m2)\r\n            }\r\n        } else {\r\n            // Insufficient space, so copy slice forward, add header and reverse.\r\n            bytes32 m0;\r\n            bytes32 m1;\r\n            bytes32 m2;\r\n            uint256 endOffset = offset + length;\r\n            assembly {\r\n                m0 := mload(add(endOffset, 0x00))\r\n                m1 := mload(add(endOffset, 0x20))\r\n                m2 := mload(add(endOffset, 0x40))\r\n            }\r\n            _memcopy(offset, offset + 0x60, length);\r\n            assembly {\r\n                // Selector of `logBytes(bytes)`.\r\n                mstore(add(offset, 0x00), 0xe17bf956)\r\n                mstore(add(offset, 0x20), 0x20)\r\n                mstore(add(offset, 0x40), length)\r\n            }\r\n            _sendLogPayload(offset + 0x1c, length + 0x44);\r\n            _memcopy(offset + 0x60, offset, length);\r\n            assembly {\r\n                mstore(add(endOffset, 0x00), m0)\r\n                mstore(add(endOffset, 0x20), m1)\r\n                mstore(add(endOffset, 0x40), m2)\r\n            }\r\n        }\r\n    }\r\n\r\n    function log(address p0) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            // Selector of `log(address)`.\r\n            mstore(0x00, 0x2c2ecbc2)\r\n            mstore(0x20, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x24);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n        }\r\n    }\r\n\r\n    function log(bool p0) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            // Selector of `log(bool)`.\r\n            mstore(0x00, 0x32458eed)\r\n            mstore(0x20, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x24);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            // Selector of `log(uint256)`.\r\n            mstore(0x00, 0xf82c50f1)\r\n            mstore(0x20, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x24);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(string)`.\r\n            mstore(0x00, 0x41304fac)\r\n            mstore(0x20, 0x20)\r\n            writeString(0x40, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(address,address)`.\r\n            mstore(0x00, 0xdaf0d4aa)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(address,bool)`.\r\n            mstore(0x00, 0x75b605d3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(address,uint256)`.\r\n            mstore(0x00, 0x8309e8a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,string)`.\r\n            mstore(0x00, 0x759f86bb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x40)\r\n            writeString(0x60, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(bool,address)`.\r\n            mstore(0x00, 0x853c4849)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(bool,bool)`.\r\n            mstore(0x00, 0x2a110e83)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(bool,uint256)`.\r\n            mstore(0x00, 0x399174d3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,string)`.\r\n            mstore(0x00, 0x8feac525)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x40)\r\n            writeString(0x60, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(uint256,address)`.\r\n            mstore(0x00, 0x69276c86)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(uint256,bool)`.\r\n            mstore(0x00, 0x1c9d7eb3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(uint256,uint256)`.\r\n            mstore(0x00, 0xf666715a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,string)`.\r\n            mstore(0x00, 0x643fd0df)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x40)\r\n            writeString(0x60, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(string,address)`.\r\n            mstore(0x00, 0x319af333)\r\n            mstore(0x20, 0x40)\r\n            mstore(0x40, p1)\r\n            writeString(0x60, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(string,bool)`.\r\n            mstore(0x00, 0xc3b55635)\r\n            mstore(0x20, 0x40)\r\n            mstore(0x40, p1)\r\n            writeString(0x60, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(string,uint256)`.\r\n            mstore(0x00, 0xb60e72cc)\r\n            mstore(0x20, 0x40)\r\n            mstore(0x40, p1)\r\n            writeString(0x60, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,string)`.\r\n            mstore(0x00, 0x4b5c4277)\r\n            mstore(0x20, 0x40)\r\n            mstore(0x40, 0x80)\r\n            writeString(0x60, p0)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,address,address)`.\r\n            mstore(0x00, 0x018c84c2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,address,bool)`.\r\n            mstore(0x00, 0xf2a66286)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,address,uint256)`.\r\n            mstore(0x00, 0x17fe6185)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,address,string)`.\r\n            mstore(0x00, 0x007150be)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,bool,address)`.\r\n            mstore(0x00, 0xf11699ed)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,bool,bool)`.\r\n            mstore(0x00, 0xeb830c92)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,bool,uint256)`.\r\n            mstore(0x00, 0x9c4f99fb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,bool,string)`.\r\n            mstore(0x00, 0x212255cc)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,uint256,address)`.\r\n            mstore(0x00, 0x7bc0d848)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,uint256,bool)`.\r\n            mstore(0x00, 0x678209a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,uint256,uint256)`.\r\n            mstore(0x00, 0xb69bcaf6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,uint256,string)`.\r\n            mstore(0x00, 0xa1f2e8aa)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,string,address)`.\r\n            mstore(0x00, 0xf08744e8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,string,bool)`.\r\n            mstore(0x00, 0xcf020fb1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,string,uint256)`.\r\n            mstore(0x00, 0x67dd6ff1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(address,string,string)`.\r\n            mstore(0x00, 0xfb772265)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p1)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,address,address)`.\r\n            mstore(0x00, 0xd2763667)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,address,bool)`.\r\n            mstore(0x00, 0x18c9c746)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,address,uint256)`.\r\n            mstore(0x00, 0x5f7b9afb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,address,string)`.\r\n            mstore(0x00, 0xde9a9270)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,bool,address)`.\r\n            mstore(0x00, 0x1078f68d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,bool,bool)`.\r\n            mstore(0x00, 0x50709698)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,bool,uint256)`.\r\n            mstore(0x00, 0x12f21602)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,bool,string)`.\r\n            mstore(0x00, 0x2555fa46)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,uint256,address)`.\r\n            mstore(0x00, 0x088ef9d2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,uint256,bool)`.\r\n            mstore(0x00, 0xe8defba9)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,uint256,uint256)`.\r\n            mstore(0x00, 0x37103367)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,uint256,string)`.\r\n            mstore(0x00, 0xc3fc3970)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,string,address)`.\r\n            mstore(0x00, 0x9591b953)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,string,bool)`.\r\n            mstore(0x00, 0xdbb4c247)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,string,uint256)`.\r\n            mstore(0x00, 0x1093ee11)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(bool,string,string)`.\r\n            mstore(0x00, 0xb076847f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p1)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,address,address)`.\r\n            mstore(0x00, 0xbcfd9be0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,address,bool)`.\r\n            mstore(0x00, 0x9b6ec042)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,address,uint256)`.\r\n            mstore(0x00, 0x5a9b5ed5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,address,string)`.\r\n            mstore(0x00, 0x63cb41f9)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,bool,address)`.\r\n            mstore(0x00, 0x35085f7b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,bool,bool)`.\r\n            mstore(0x00, 0x20718650)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,bool,uint256)`.\r\n            mstore(0x00, 0x20098014)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,bool,string)`.\r\n            mstore(0x00, 0x85775021)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,uint256,address)`.\r\n            mstore(0x00, 0x5c96b331)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,uint256,bool)`.\r\n            mstore(0x00, 0x4766da72)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,uint256,uint256)`.\r\n            mstore(0x00, 0xd1ed7a3c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,uint256,string)`.\r\n            mstore(0x00, 0x71d04af2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,string,address)`.\r\n            mstore(0x00, 0x7afac959)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,string,bool)`.\r\n            mstore(0x00, 0x4ceda75a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,string,uint256)`.\r\n            mstore(0x00, 0x37aa7d4c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(uint256,string,string)`.\r\n            mstore(0x00, 0xb115611f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p1)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,address,address)`.\r\n            mstore(0x00, 0xfcec75e0)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,address,bool)`.\r\n            mstore(0x00, 0xc91d5ed4)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,address,uint256)`.\r\n            mstore(0x00, 0x0d26b925)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,address,string)`.\r\n            mstore(0x00, 0xe0e9ad4f)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,bool,address)`.\r\n            mstore(0x00, 0x932bbb38)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,bool,bool)`.\r\n            mstore(0x00, 0x850b7ad6)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,bool,uint256)`.\r\n            mstore(0x00, 0xc95958d6)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,bool,string)`.\r\n            mstore(0x00, 0xe298f47d)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,uint256,address)`.\r\n            mstore(0x00, 0x1c7ec448)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,uint256,bool)`.\r\n            mstore(0x00, 0xca7733b1)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,uint256,uint256)`.\r\n            mstore(0x00, 0xca47c4eb)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,uint256,string)`.\r\n            mstore(0x00, 0x5970e089)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,string,address)`.\r\n            mstore(0x00, 0x95ed0195)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, 0xa0)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,string,bool)`.\r\n            mstore(0x00, 0xb0e0f9b5)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, 0xa0)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,string,uint256)`.\r\n            mstore(0x00, 0x5821efa1)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, 0xa0)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            // Selector of `log(string,string,string)`.\r\n            mstore(0x00, 0x2ced7cef)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, 0xa0)\r\n            mstore(0x60, 0xe0)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p1)\r\n            writeString(0x100, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x124);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,address,address)`.\r\n            mstore(0x00, 0x665bf134)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,address,bool)`.\r\n            mstore(0x00, 0x0e378994)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,address,uint256)`.\r\n            mstore(0x00, 0x94250d77)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,address,string)`.\r\n            mstore(0x00, 0xf808da20)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,bool,address)`.\r\n            mstore(0x00, 0x9f1bc36e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,bool,bool)`.\r\n            mstore(0x00, 0x2cd4134a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,bool,uint256)`.\r\n            mstore(0x00, 0x3971e78c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,bool,string)`.\r\n            mstore(0x00, 0xaa6540c8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,uint256,address)`.\r\n            mstore(0x00, 0x8da6def5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,uint256,bool)`.\r\n            mstore(0x00, 0x9b4254e2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,uint256,uint256)`.\r\n            mstore(0x00, 0xbe553481)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,uint256,string)`.\r\n            mstore(0x00, 0xfdb4f990)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,string,address)`.\r\n            mstore(0x00, 0x8f736d16)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,string,bool)`.\r\n            mstore(0x00, 0x6f1a594e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,string,uint256)`.\r\n            mstore(0x00, 0xef1cefe7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,address,string,string)`.\r\n            mstore(0x00, 0x21bdaf25)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,address,address)`.\r\n            mstore(0x00, 0x660375dd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,address,bool)`.\r\n            mstore(0x00, 0xa6f50b0f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,address,uint256)`.\r\n            mstore(0x00, 0xa75c59de)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,address,string)`.\r\n            mstore(0x00, 0x2dd778e6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,bool,address)`.\r\n            mstore(0x00, 0xcf394485)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,bool,bool)`.\r\n            mstore(0x00, 0xcac43479)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,bool,uint256)`.\r\n            mstore(0x00, 0x8c4e5de6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,bool,string)`.\r\n            mstore(0x00, 0xdfc4a2e8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,uint256,address)`.\r\n            mstore(0x00, 0xccf790a1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,uint256,bool)`.\r\n            mstore(0x00, 0xc4643e20)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,uint256,uint256)`.\r\n            mstore(0x00, 0x386ff5f4)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,uint256,string)`.\r\n            mstore(0x00, 0x0aa6cfad)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,string,address)`.\r\n            mstore(0x00, 0x19fd4956)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,string,bool)`.\r\n            mstore(0x00, 0x50ad461d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,string,uint256)`.\r\n            mstore(0x00, 0x80e6a20b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,bool,string,string)`.\r\n            mstore(0x00, 0x475c5c33)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,address,address)`.\r\n            mstore(0x00, 0x478d1c62)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,address,bool)`.\r\n            mstore(0x00, 0xa1bcc9b3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,address,uint256)`.\r\n            mstore(0x00, 0x100f650e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,address,string)`.\r\n            mstore(0x00, 0x1da986ea)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,bool,address)`.\r\n            mstore(0x00, 0xa31bfdcc)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,bool,bool)`.\r\n            mstore(0x00, 0x3bf5e537)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,bool,uint256)`.\r\n            mstore(0x00, 0x22f6b999)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,bool,string)`.\r\n            mstore(0x00, 0xc5ad85f9)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,uint256,address)`.\r\n            mstore(0x00, 0x20e3984d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,uint256,bool)`.\r\n            mstore(0x00, 0x66f1bc67)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,uint256,uint256)`.\r\n            mstore(0x00, 0x34f0e636)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,uint256,string)`.\r\n            mstore(0x00, 0x4a28c017)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,string,address)`.\r\n            mstore(0x00, 0x5c430d47)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,string,bool)`.\r\n            mstore(0x00, 0xcf18105c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,string,uint256)`.\r\n            mstore(0x00, 0xbf01f891)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,uint256,string,string)`.\r\n            mstore(0x00, 0x88a8c406)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,address,address)`.\r\n            mstore(0x00, 0x0d36fa20)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,address,bool)`.\r\n            mstore(0x00, 0x0df12b76)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,address,uint256)`.\r\n            mstore(0x00, 0x457fe3cf)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,address,string)`.\r\n            mstore(0x00, 0xf7e36245)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,bool,address)`.\r\n            mstore(0x00, 0x205871c2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,bool,bool)`.\r\n            mstore(0x00, 0x5f1d5c9f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,bool,uint256)`.\r\n            mstore(0x00, 0x515e38b6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,bool,string)`.\r\n            mstore(0x00, 0xbc0b61fe)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,uint256,address)`.\r\n            mstore(0x00, 0x63183678)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,uint256,bool)`.\r\n            mstore(0x00, 0x0ef7e050)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,uint256,uint256)`.\r\n            mstore(0x00, 0x1dc8e1b8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,uint256,string)`.\r\n            mstore(0x00, 0x448830a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,string,address)`.\r\n            mstore(0x00, 0xa04e2f87)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,string,bool)`.\r\n            mstore(0x00, 0x35a5071f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,string,uint256)`.\r\n            mstore(0x00, 0x159f8927)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(address,string,string,string)`.\r\n            mstore(0x00, 0x5d02c50b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,address,address)`.\r\n            mstore(0x00, 0x1d14d001)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,address,bool)`.\r\n            mstore(0x00, 0x46600be0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,address,uint256)`.\r\n            mstore(0x00, 0x0c66d1be)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,address,string)`.\r\n            mstore(0x00, 0xd812a167)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,bool,address)`.\r\n            mstore(0x00, 0x1c41a336)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,bool,bool)`.\r\n            mstore(0x00, 0x6a9c478b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,bool,uint256)`.\r\n            mstore(0x00, 0x07831502)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,bool,string)`.\r\n            mstore(0x00, 0x4a66cb34)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,uint256,address)`.\r\n            mstore(0x00, 0x136b05dd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,uint256,bool)`.\r\n            mstore(0x00, 0xd6019f1c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,uint256,uint256)`.\r\n            mstore(0x00, 0x7bf181a1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,uint256,string)`.\r\n            mstore(0x00, 0x51f09ff8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,string,address)`.\r\n            mstore(0x00, 0x6f7c603e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,string,bool)`.\r\n            mstore(0x00, 0xe2bfd60b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,string,uint256)`.\r\n            mstore(0x00, 0xc21f64c7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,address,string,string)`.\r\n            mstore(0x00, 0xa73c1db6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,address,address)`.\r\n            mstore(0x00, 0xf4880ea4)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,address,bool)`.\r\n            mstore(0x00, 0xc0a302d8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,address,uint256)`.\r\n            mstore(0x00, 0x4c123d57)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,address,string)`.\r\n            mstore(0x00, 0xa0a47963)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,bool,address)`.\r\n            mstore(0x00, 0x8c329b1a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,bool,bool)`.\r\n            mstore(0x00, 0x3b2a5ce0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,bool,uint256)`.\r\n            mstore(0x00, 0x6d7045c1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,bool,string)`.\r\n            mstore(0x00, 0x2ae408d4)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,uint256,address)`.\r\n            mstore(0x00, 0x54a7a9a0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,uint256,bool)`.\r\n            mstore(0x00, 0x619e4d0e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,uint256,uint256)`.\r\n            mstore(0x00, 0x0bb00eab)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,uint256,string)`.\r\n            mstore(0x00, 0x7dd4d0e0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,string,address)`.\r\n            mstore(0x00, 0xf9ad2b89)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,string,bool)`.\r\n            mstore(0x00, 0xb857163a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,string,uint256)`.\r\n            mstore(0x00, 0xe3a9ca2f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,bool,string,string)`.\r\n            mstore(0x00, 0x6d1e8751)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,address,address)`.\r\n            mstore(0x00, 0x26f560a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,address,bool)`.\r\n            mstore(0x00, 0xb4c314ff)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,address,uint256)`.\r\n            mstore(0x00, 0x1537dc87)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,address,string)`.\r\n            mstore(0x00, 0x1bb3b09a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,bool,address)`.\r\n            mstore(0x00, 0x9acd3616)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,bool,bool)`.\r\n            mstore(0x00, 0xceb5f4d7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,bool,uint256)`.\r\n            mstore(0x00, 0x7f9bbca2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,bool,string)`.\r\n            mstore(0x00, 0x9143dbb1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,uint256,address)`.\r\n            mstore(0x00, 0x00dd87b9)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,uint256,bool)`.\r\n            mstore(0x00, 0xbe984353)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,uint256,uint256)`.\r\n            mstore(0x00, 0x374bb4b2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,uint256,string)`.\r\n            mstore(0x00, 0x8e69fb5d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,string,address)`.\r\n            mstore(0x00, 0xfedd1fff)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,string,bool)`.\r\n            mstore(0x00, 0xe5e70b2b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,string,uint256)`.\r\n            mstore(0x00, 0x6a1199e2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,uint256,string,string)`.\r\n            mstore(0x00, 0xf5bc2249)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,address,address)`.\r\n            mstore(0x00, 0x2b2b18dc)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,address,bool)`.\r\n            mstore(0x00, 0x6dd434ca)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,address,uint256)`.\r\n            mstore(0x00, 0xa5cada94)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,address,string)`.\r\n            mstore(0x00, 0x12d6c788)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,bool,address)`.\r\n            mstore(0x00, 0x538e06ab)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,bool,bool)`.\r\n            mstore(0x00, 0xdc5e935b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,bool,uint256)`.\r\n            mstore(0x00, 0x1606a393)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,bool,string)`.\r\n            mstore(0x00, 0x483d0416)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,uint256,address)`.\r\n            mstore(0x00, 0x1596a1ce)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,uint256,bool)`.\r\n            mstore(0x00, 0x6b0e5d53)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,uint256,uint256)`.\r\n            mstore(0x00, 0x28863fcb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,uint256,string)`.\r\n            mstore(0x00, 0x1ad96de6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,string,address)`.\r\n            mstore(0x00, 0x97d394d8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,string,bool)`.\r\n            mstore(0x00, 0x1e4b87e5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,string,uint256)`.\r\n            mstore(0x00, 0x7be0c3eb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(bool,string,string,string)`.\r\n            mstore(0x00, 0x1762e32a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,address,address)`.\r\n            mstore(0x00, 0x2488b414)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,address,bool)`.\r\n            mstore(0x00, 0x091ffaf5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,address,uint256)`.\r\n            mstore(0x00, 0x736efbb6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,address,string)`.\r\n            mstore(0x00, 0x031c6f73)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,bool,address)`.\r\n            mstore(0x00, 0xef72c513)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,bool,bool)`.\r\n            mstore(0x00, 0xe351140f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,bool,uint256)`.\r\n            mstore(0x00, 0x5abd992a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,bool,string)`.\r\n            mstore(0x00, 0x90fb06aa)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,uint256,address)`.\r\n            mstore(0x00, 0x15c127b5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,uint256,bool)`.\r\n            mstore(0x00, 0x5f743a7c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,uint256,uint256)`.\r\n            mstore(0x00, 0x0c9cd9c1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,uint256,string)`.\r\n            mstore(0x00, 0xddb06521)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,string,address)`.\r\n            mstore(0x00, 0x9cba8fff)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,string,bool)`.\r\n            mstore(0x00, 0xcc32ab07)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,string,uint256)`.\r\n            mstore(0x00, 0x46826b5d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,address,string,string)`.\r\n            mstore(0x00, 0x3e128ca3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,address,address)`.\r\n            mstore(0x00, 0xa1ef4cbb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,address,bool)`.\r\n            mstore(0x00, 0x454d54a5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,address,uint256)`.\r\n            mstore(0x00, 0x078287f5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,address,string)`.\r\n            mstore(0x00, 0xade052c7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,bool,address)`.\r\n            mstore(0x00, 0x69640b59)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,bool,bool)`.\r\n            mstore(0x00, 0xb6f577a1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,bool,uint256)`.\r\n            mstore(0x00, 0x7464ce23)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,bool,string)`.\r\n            mstore(0x00, 0xdddb9561)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,uint256,address)`.\r\n            mstore(0x00, 0x88cb6041)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,uint256,bool)`.\r\n            mstore(0x00, 0x91a02e2a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,uint256,uint256)`.\r\n            mstore(0x00, 0xc6acc7a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,uint256,string)`.\r\n            mstore(0x00, 0xde03e774)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,string,address)`.\r\n            mstore(0x00, 0xef529018)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,string,bool)`.\r\n            mstore(0x00, 0xeb928d7f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,string,uint256)`.\r\n            mstore(0x00, 0x2c1d0746)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,bool,string,string)`.\r\n            mstore(0x00, 0x68c8b8bd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,address,address)`.\r\n            mstore(0x00, 0x56a5d1b1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,address,bool)`.\r\n            mstore(0x00, 0x15cac476)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,address,uint256)`.\r\n            mstore(0x00, 0x88f6e4b2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,address,string)`.\r\n            mstore(0x00, 0x6cde40b8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,bool,address)`.\r\n            mstore(0x00, 0x9a816a83)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,bool,bool)`.\r\n            mstore(0x00, 0xab085ae6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,bool,uint256)`.\r\n            mstore(0x00, 0xeb7f6fd2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,bool,string)`.\r\n            mstore(0x00, 0xa5b4fc99)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,uint256,address)`.\r\n            mstore(0x00, 0xfa8185af)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,uint256,bool)`.\r\n            mstore(0x00, 0xc598d185)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\r\n            mstore(0x00, 0x193fb800)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,uint256,string)`.\r\n            mstore(0x00, 0x59cfcbe3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,string,address)`.\r\n            mstore(0x00, 0x42d21db7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,string,bool)`.\r\n            mstore(0x00, 0x7af6ab25)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,string,uint256)`.\r\n            mstore(0x00, 0x5da297eb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,uint256,string,string)`.\r\n            mstore(0x00, 0x27d8afd2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,address,address)`.\r\n            mstore(0x00, 0x6168ed61)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,address,bool)`.\r\n            mstore(0x00, 0x90c30a56)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,address,uint256)`.\r\n            mstore(0x00, 0xe8d3018d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,address,string)`.\r\n            mstore(0x00, 0x9c3adfa1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,bool,address)`.\r\n            mstore(0x00, 0xae2ec581)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,bool,bool)`.\r\n            mstore(0x00, 0xba535d9c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,bool,uint256)`.\r\n            mstore(0x00, 0xcf009880)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,bool,string)`.\r\n            mstore(0x00, 0xd2d423cd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,uint256,address)`.\r\n            mstore(0x00, 0x3b2279b4)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,uint256,bool)`.\r\n            mstore(0x00, 0x691a8f74)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,uint256,uint256)`.\r\n            mstore(0x00, 0x82c25b74)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,uint256,string)`.\r\n            mstore(0x00, 0xb7b914ca)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,string,address)`.\r\n            mstore(0x00, 0xd583c602)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,string,bool)`.\r\n            mstore(0x00, 0xb3a6b6bd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,string,uint256)`.\r\n            mstore(0x00, 0xb028c9bd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(uint256,string,string,string)`.\r\n            mstore(0x00, 0x21ad0683)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,address,address)`.\r\n            mstore(0x00, 0xed8f28f6)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,address,bool)`.\r\n            mstore(0x00, 0xb59dbd60)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,address,uint256)`.\r\n            mstore(0x00, 0x8ef3f399)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,address,string)`.\r\n            mstore(0x00, 0x800a1c67)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,bool,address)`.\r\n            mstore(0x00, 0x223603bd)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,bool,bool)`.\r\n            mstore(0x00, 0x79884c2b)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,bool,uint256)`.\r\n            mstore(0x00, 0x3e9f866a)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,bool,string)`.\r\n            mstore(0x00, 0x0454c079)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,uint256,address)`.\r\n            mstore(0x00, 0x63fb8bc5)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,uint256,bool)`.\r\n            mstore(0x00, 0xfc4845f0)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,uint256,uint256)`.\r\n            mstore(0x00, 0xf8f51b1e)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,uint256,string)`.\r\n            mstore(0x00, 0x5a477632)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,string,address)`.\r\n            mstore(0x00, 0xaabc9a31)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,string,bool)`.\r\n            mstore(0x00, 0x5f15d28c)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,string,uint256)`.\r\n            mstore(0x00, 0x91d1112e)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,address,string,string)`.\r\n            mstore(0x00, 0x245986f2)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,address,address)`.\r\n            mstore(0x00, 0x33e9dd1d)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,address,bool)`.\r\n            mstore(0x00, 0x958c28c6)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,address,uint256)`.\r\n            mstore(0x00, 0x5d08bb05)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,address,string)`.\r\n            mstore(0x00, 0x2d8e33a4)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,bool,address)`.\r\n            mstore(0x00, 0x7190a529)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,bool,bool)`.\r\n            mstore(0x00, 0x895af8c5)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,bool,uint256)`.\r\n            mstore(0x00, 0x8e3f78a9)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,bool,string)`.\r\n            mstore(0x00, 0x9d22d5dd)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,uint256,address)`.\r\n            mstore(0x00, 0x935e09bf)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,uint256,bool)`.\r\n            mstore(0x00, 0x8af7cf8a)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,uint256,uint256)`.\r\n            mstore(0x00, 0x64b5bb67)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,uint256,string)`.\r\n            mstore(0x00, 0x742d6ee7)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,string,address)`.\r\n            mstore(0x00, 0xe0625b29)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,string,bool)`.\r\n            mstore(0x00, 0x3f8a701d)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,string,uint256)`.\r\n            mstore(0x00, 0x24f91465)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,bool,string,string)`.\r\n            mstore(0x00, 0xa826caeb)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,address,address)`.\r\n            mstore(0x00, 0x5ea2b7ae)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,address,bool)`.\r\n            mstore(0x00, 0x82112a42)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,address,uint256)`.\r\n            mstore(0x00, 0x4f04fdc6)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,address,string)`.\r\n            mstore(0x00, 0x9ffb2f93)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,bool,address)`.\r\n            mstore(0x00, 0xe0e95b98)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,bool,bool)`.\r\n            mstore(0x00, 0x354c36d6)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,bool,uint256)`.\r\n            mstore(0x00, 0xe41b6f6f)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,bool,string)`.\r\n            mstore(0x00, 0xabf73a98)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,uint256,address)`.\r\n            mstore(0x00, 0xe21de278)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,uint256,bool)`.\r\n            mstore(0x00, 0x7626db92)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,uint256,uint256)`.\r\n            mstore(0x00, 0xa7a87853)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,uint256,string)`.\r\n            mstore(0x00, 0x854b3496)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,string,address)`.\r\n            mstore(0x00, 0x7c4632a4)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,string,bool)`.\r\n            mstore(0x00, 0x7d24491d)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,string,uint256)`.\r\n            mstore(0x00, 0xc67ea9d1)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,uint256,string,string)`.\r\n            mstore(0x00, 0x5ab84e1f)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,address,address)`.\r\n            mstore(0x00, 0x439c7bef)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,address,bool)`.\r\n            mstore(0x00, 0x5ccd4e37)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,address,uint256)`.\r\n            mstore(0x00, 0x7cc3c607)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,address,string)`.\r\n            mstore(0x00, 0xeb1bff80)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,bool,address)`.\r\n            mstore(0x00, 0xc371c7db)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,bool,bool)`.\r\n            mstore(0x00, 0x40785869)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,bool,uint256)`.\r\n            mstore(0x00, 0xd6aefad2)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,bool,string)`.\r\n            mstore(0x00, 0x5e84b0ea)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,uint256,address)`.\r\n            mstore(0x00, 0x1023f7b2)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,uint256,bool)`.\r\n            mstore(0x00, 0xc3a8a654)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,uint256,uint256)`.\r\n            mstore(0x00, 0xf45d7d2c)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,uint256,string)`.\r\n            mstore(0x00, 0x5d1a971a)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,string,address)`.\r\n            mstore(0x00, 0x6d572f44)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, 0x100)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,string,bool)`.\r\n            mstore(0x00, 0x2c1754ed)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, 0x100)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,string,uint256)`.\r\n            mstore(0x00, 0x8eafb02b)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, 0x100)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        bytes32 m11;\r\n        bytes32 m12;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            m11 := mload(0x160)\r\n            m12 := mload(0x180)\r\n            // Selector of `log(string,string,string,string)`.\r\n            mstore(0x00, 0xde68f20a)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, 0x100)\r\n            mstore(0x80, 0x140)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p2)\r\n            writeString(0x160, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x184);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n            mstore(0x160, m11)\r\n            mstore(0x180, m12)\r\n        }\r\n    }\r\n}\r\n"
      },
      "node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
      },
      "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.20;\n\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"./ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address implementation, bytes memory _data) payable {\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }\n}\n"
      },
      "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
      },
      "node_modules/@openzeppelin/contracts/proxy/Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n"
      },
      "node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
      },
      "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "testFoundry/Pizza.t.sol": {
        "content": "\r\n\r\nimport \"forge-std/Test.sol\";\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\n\r\nimport {Pizza} from \"../contracts/Pizza.sol\";\r\nimport {PizzaV2} from \"../contracts/PizzaV2.sol\";\r\n\r\ncontract PizzaTest is Test {\r\n\r\n    Pizza internal pizza;\r\n    PizzaV2 internal pizzaV2;\r\n    ERC1967Proxy internal proxy; // Declare the ERC1967Proxy variable\r\n\r\n    function setUp() public {\r\n        pizza = new Pizza();\r\n        pizza.initialize(7, address(this));\r\n        pizzaV2 = new PizzaV2();\r\n        pizzaV2.initialize(7, address(this));\r\n        proxy = new ERC1967Proxy(address(pizza), \"\"); // Initialize the proxy with the logic contract address and empty \r\n        pizza.eatSlice();\r\n\r\n    }\r\n\r\n    function testEat() public {\r\n        assertEq(pizza.slices(), 6);\r\n    }\r\n\r\n    function testUpgrade() public {\r\n        pizza.upgradeTo(address(pizzaV2));\r\n        pizza.eatSlice();\r\n        pizzaV2.refillSlice();\r\n       \r\n        assertEq(pizza.slices(), 5);\r\n    }\r\n\r\n    function testUpgradeFail() public {\r\n        pizza.upgradeTo(address(pizzaV2));\r\n        pizza.eatSlice();   \r\n        pizzaV2.refillSlice();\r\n        assertEq(pizza.slices(), 5);\r\n\r\n    }\r\n\r\n    // function testUpgrade2Fail() public {\r\n    //        vm.prank(address(0));\r\n    //        pizza.upgradeTo(address(pizzaV2));\r\n    //        vm.expectRevert(bytes(\"Ownable: caller is not the owner\"));\r\n        \r\n    //  }\r\n\r\n\r\n\r\n\r\n\r\n    // function testUpgradeFail() public {\r\n    //     vm.expectRevert(bytes(\"Ownable: caller is not the owner\"));\r\n    //     vm.prank(address(2));\r\n    //     pizza.upgradeTo(address(pizzaV2));\r\n    // }\r\n\r\n\r\n}"
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "eth-gas-reporter/=node_modules/eth-gas-reporter/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "outputSelection": {
        "contracts/Pizza.sol": {
          "*": []
        },
        "contracts/PizzaV2.sol": {
          "*": []
        },
        "lib/forge-std/lib/ds-test/src/test.sol": {
          "*": []
        },
        "lib/forge-std/src/Base.sol": {
          "*": []
        },
        "lib/forge-std/src/StdAssertions.sol": {
          "*": []
        },
        "lib/forge-std/src/StdChains.sol": {
          "*": []
        },
        "lib/forge-std/src/StdCheats.sol": {
          "*": []
        },
        "lib/forge-std/src/StdError.sol": {
          "*": []
        },
        "lib/forge-std/src/StdInvariant.sol": {
          "*": []
        },
        "lib/forge-std/src/StdJson.sol": {
          "*": []
        },
        "lib/forge-std/src/StdMath.sol": {
          "*": []
        },
        "lib/forge-std/src/StdStorage.sol": {
          "*": []
        },
        "lib/forge-std/src/StdStyle.sol": {
          "*": []
        },
        "lib/forge-std/src/StdUtils.sol": {
          "*": []
        },
        "lib/forge-std/src/Test.sol": {
          "*": []
        },
        "lib/forge-std/src/Vm.sol": {
          "*": []
        },
        "lib/forge-std/src/console.sol": {
          "*": []
        },
        "lib/forge-std/src/console2.sol": {
          "*": []
        },
        "lib/forge-std/src/interfaces/IMulticall3.sol": {
          "*": []
        },
        "lib/forge-std/src/mocks/MockERC20.sol": {
          "*": []
        },
        "lib/forge-std/src/mocks/MockERC721.sol": {
          "*": []
        },
        "lib/forge-std/src/safeconsole.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts/proxy/Proxy.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts/utils/Address.sol": {
          "*": []
        },
        "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
          "*": []
        },
        "testFoundry/Pizza.t.sol": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "storageLayout"
          ]
        }
      },
      "evmVersion": "london",
      "libraries": {}
    }
  },
  "id": "b0ebc9b0708ae8b96f05fdbe41d8aed2",
  "output": {
    "errors": [
      {
        "sourceLocation": {
          "file": "testFoundry/Pizza.t.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> testFoundry/Pizza.t.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "testFoundry/Pizza.t.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "3420",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"",
        "formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"\n--> testFoundry/Pizza.t.sol\n\n"
      }
    ],
    "sources": {
      "contracts/Pizza.sol": {
        "id": 0,
        "ast": {}
      },
      "contracts/PizzaV2.sol": {
        "id": 1,
        "ast": {}
      },
      "lib/forge-std/lib/ds-test/src/test.sol": {
        "id": 2,
        "ast": {}
      },
      "lib/forge-std/src/Base.sol": {
        "id": 3,
        "ast": {}
      },
      "lib/forge-std/src/StdAssertions.sol": {
        "id": 4,
        "ast": {}
      },
      "lib/forge-std/src/StdChains.sol": {
        "id": 5,
        "ast": {}
      },
      "lib/forge-std/src/StdCheats.sol": {
        "id": 6,
        "ast": {}
      },
      "lib/forge-std/src/StdError.sol": {
        "id": 7,
        "ast": {}
      },
      "lib/forge-std/src/StdInvariant.sol": {
        "id": 8,
        "ast": {}
      },
      "lib/forge-std/src/StdJson.sol": {
        "id": 9,
        "ast": {}
      },
      "lib/forge-std/src/StdMath.sol": {
        "id": 10,
        "ast": {}
      },
      "lib/forge-std/src/StdStorage.sol": {
        "id": 11,
        "ast": {}
      },
      "lib/forge-std/src/StdStyle.sol": {
        "id": 12,
        "ast": {}
      },
      "lib/forge-std/src/StdUtils.sol": {
        "id": 13,
        "ast": {}
      },
      "lib/forge-std/src/Test.sol": {
        "id": 14,
        "ast": {}
      },
      "lib/forge-std/src/Vm.sol": {
        "id": 15,
        "ast": {}
      },
      "lib/forge-std/src/console.sol": {
        "id": 16,
        "ast": {}
      },
      "lib/forge-std/src/console2.sol": {
        "id": 17,
        "ast": {}
      },
      "lib/forge-std/src/interfaces/IMulticall3.sol": {
        "id": 18,
        "ast": {}
      },
      "lib/forge-std/src/mocks/MockERC20.sol": {
        "id": 19,
        "ast": {}
      },
      "lib/forge-std/src/mocks/MockERC721.sol": {
        "id": 20,
        "ast": {}
      },
      "lib/forge-std/src/safeconsole.sol": {
        "id": 21,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
        "id": 22,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "id": 23,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
        "id": 24,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "id": 25,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
        "id": 26,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
        "id": 27,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
        "id": 28,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts/proxy/Proxy.sol": {
        "id": 29,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
        "id": 30,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "id": 31,
        "ast": {}
      },
      "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
        "id": 32,
        "ast": {}
      },
      "testFoundry/Pizza.t.sol": {
        "id": 33,
        "ast": {
          "absolutePath": "testFoundry/Pizza.t.sol",
          "id": 46522,
          "exportedSymbols": {
            "DSTest": [
              2381
            ],
            "ERC1967Proxy": [
              45664
            ],
            "ERC1967Utils": [
              45967
            ],
            "Pizza": [
              64
            ],
            "PizzaTest": [
              46521
            ],
            "PizzaV2": [
              89
            ],
            "Proxy": [
              46003
            ],
            "StdAssertions": [
              3874
            ],
            "StdChains": [
              4638
            ],
            "StdCheats": [
              7491
            ],
            "StdInvariant": [
              7816
            ],
            "StdStorage": [
              8582
            ],
            "StdStyle": [
              11432
            ],
            "StdUtils": [
              12218
            ],
            "Test": [
              12269
            ],
            "TestBase": [
              2447
            ],
            "Vm": [
              14410
            ],
            "console": [
              22474
            ],
            "console2": [
              30599
            ],
            "safeconsole": [
              44939
            ],
            "stdError": [
              7557
            ],
            "stdJson": [
              8408
            ],
            "stdMath": [
              8550
            ],
            "stdStorage": [
              10221
            ]
          },
          "nodeType": "SourceUnit",
          "src": "4:1630:33",
          "nodes": [
            {
              "id": 46378,
              "nodeType": "ImportDirective",
              "src": "4:28:33",
              "absolutePath": "lib/forge-std/src/Test.sol",
              "file": "forge-std/Test.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 46522,
              "sourceUnit": 12270,
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "id": 46379,
              "nodeType": "ImportDirective",
              "src": "34:64:33",
              "absolutePath": "node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol",
              "file": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 46522,
              "sourceUnit": 45665,
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "id": 46381,
              "nodeType": "ImportDirective",
              "src": "102:45:33",
              "absolutePath": "contracts/Pizza.sol",
              "file": "../contracts/Pizza.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 46522,
              "sourceUnit": 65,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 46380,
                    "name": "Pizza",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 64,
                    "src": "110:5:33",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 46383,
              "nodeType": "ImportDirective",
              "src": "149:49:33",
              "absolutePath": "contracts/PizzaV2.sol",
              "file": "../contracts/PizzaV2.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 46522,
              "sourceUnit": 90,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 46382,
                    "name": "PizzaV2",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 89,
                    "src": "157:7:33",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 46521,
              "nodeType": "ContractDefinition",
              "src": "202:1432:33",
              "nodes": [
                {
                  "id": 46388,
                  "nodeType": "VariableDeclaration",
                  "src": "238:20:33",
                  "constant": false,
                  "mutability": "mutable",
                  "name": "pizza",
                  "nameLocation": "253:5:33",
                  "scope": 46521,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Pizza_$64",
                    "typeString": "contract Pizza"
                  },
                  "typeName": {
                    "id": 46387,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 46386,
                      "name": "Pizza",
                      "nameLocations": [
                        "238:5:33"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 64,
                      "src": "238:5:33"
                    },
                    "referencedDeclaration": 64,
                    "src": "238:5:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Pizza_$64",
                      "typeString": "contract Pizza"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 46391,
                  "nodeType": "VariableDeclaration",
                  "src": "265:24:33",
                  "constant": false,
                  "mutability": "mutable",
                  "name": "pizzaV2",
                  "nameLocation": "282:7:33",
                  "scope": 46521,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_PizzaV2_$89",
                    "typeString": "contract PizzaV2"
                  },
                  "typeName": {
                    "id": 46390,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 46389,
                      "name": "PizzaV2",
                      "nameLocations": [
                        "265:7:33"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 89,
                      "src": "265:7:33"
                    },
                    "referencedDeclaration": 89,
                    "src": "265:7:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_PizzaV2_$89",
                      "typeString": "contract PizzaV2"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 46394,
                  "nodeType": "VariableDeclaration",
                  "src": "296:27:33",
                  "constant": false,
                  "mutability": "mutable",
                  "name": "proxy",
                  "nameLocation": "318:5:33",
                  "scope": 46521,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC1967Proxy_$45664",
                    "typeString": "contract ERC1967Proxy"
                  },
                  "typeName": {
                    "id": 46393,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 46392,
                      "name": "ERC1967Proxy",
                      "nameLocations": [
                        "296:12:33"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45664,
                      "src": "296:12:33"
                    },
                    "referencedDeclaration": 45664,
                    "src": "296:12:33",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC1967Proxy_$45664",
                      "typeString": "contract ERC1967Proxy"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 46449,
                  "nodeType": "FunctionDefinition",
                  "src": "369:339:33",
                  "body": {
                    "id": 46448,
                    "nodeType": "Block",
                    "src": "393:315:33",
                    "statements": [
                      {
                        "expression": {
                          "id": 46402,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 46397,
                            "name": "pizza",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46388,
                            "src": "404:5:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Pizza_$64",
                              "typeString": "contract Pizza"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 46400,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "412:9:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Pizza_$64_$",
                                "typeString": "function () returns (contract Pizza)"
                              },
                              "typeName": {
                                "id": 46399,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 46398,
                                  "name": "Pizza",
                                  "nameLocations": [
                                    "416:5:33"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 64,
                                  "src": "416:5:33"
                                },
                                "referencedDeclaration": 64,
                                "src": "416:5:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Pizza_$64",
                                  "typeString": "contract Pizza"
                                }
                              }
                            },
                            "id": 46401,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "412:11:33",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Pizza_$64",
                              "typeString": "contract Pizza"
                            }
                          },
                          "src": "404:19:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Pizza_$64",
                            "typeString": "contract Pizza"
                          }
                        },
                        "id": 46403,
                        "nodeType": "ExpressionStatement",
                        "src": "404:19:33"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "37",
                              "id": 46407,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "451:1:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_7_by_1",
                                "typeString": "int_const 7"
                              },
                              "value": "7"
                            },
                            {
                              "arguments": [
                                {
                                  "id": 46410,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "462:4:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_PizzaTest_$46521",
                                    "typeString": "contract PizzaTest"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_PizzaTest_$46521",
                                    "typeString": "contract PizzaTest"
                                  }
                                ],
                                "id": 46409,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "454:7:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 46408,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "454:7:33",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 46411,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "454:13:33",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_7_by_1",
                                "typeString": "int_const 7"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 46404,
                              "name": "pizza",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46388,
                              "src": "434:5:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Pizza_$64",
                                "typeString": "contract Pizza"
                              }
                            },
                            "id": 46406,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "440:10:33",
                            "memberName": "initialize",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 31,
                            "src": "434:16:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (uint256,address) external"
                            }
                          },
                          "id": 46412,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "434:34:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46413,
                        "nodeType": "ExpressionStatement",
                        "src": "434:34:33"
                      },
                      {
                        "expression": {
                          "id": 46419,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 46414,
                            "name": "pizzaV2",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46391,
                            "src": "479:7:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_PizzaV2_$89",
                              "typeString": "contract PizzaV2"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 46417,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "489:11:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_PizzaV2_$89_$",
                                "typeString": "function () returns (contract PizzaV2)"
                              },
                              "typeName": {
                                "id": 46416,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 46415,
                                  "name": "PizzaV2",
                                  "nameLocations": [
                                    "493:7:33"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 89,
                                  "src": "493:7:33"
                                },
                                "referencedDeclaration": 89,
                                "src": "493:7:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_PizzaV2_$89",
                                  "typeString": "contract PizzaV2"
                                }
                              }
                            },
                            "id": 46418,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "489:13:33",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_PizzaV2_$89",
                              "typeString": "contract PizzaV2"
                            }
                          },
                          "src": "479:23:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_PizzaV2_$89",
                            "typeString": "contract PizzaV2"
                          }
                        },
                        "id": 46420,
                        "nodeType": "ExpressionStatement",
                        "src": "479:23:33"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "37",
                              "id": 46424,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "532:1:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_7_by_1",
                                "typeString": "int_const 7"
                              },
                              "value": "7"
                            },
                            {
                              "arguments": [
                                {
                                  "id": 46427,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "543:4:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_PizzaTest_$46521",
                                    "typeString": "contract PizzaTest"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_PizzaTest_$46521",
                                    "typeString": "contract PizzaTest"
                                  }
                                ],
                                "id": 46426,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "535:7:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 46425,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "535:7:33",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 46428,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "535:13:33",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_7_by_1",
                                "typeString": "int_const 7"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 46421,
                              "name": "pizzaV2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46391,
                              "src": "513:7:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_PizzaV2_$89",
                                "typeString": "contract PizzaV2"
                              }
                            },
                            "id": 46423,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "521:10:33",
                            "memberName": "initialize",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 31,
                            "src": "513:18:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (uint256,address) external"
                            }
                          },
                          "id": 46429,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "513:36:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46430,
                        "nodeType": "ExpressionStatement",
                        "src": "513:36:33"
                      },
                      {
                        "expression": {
                          "id": 46441,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 46431,
                            "name": "proxy",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46394,
                            "src": "560:5:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC1967Proxy_$45664",
                              "typeString": "contract ERC1967Proxy"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 46437,
                                    "name": "pizza",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 46388,
                                    "src": "593:5:33",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Pizza_$64",
                                      "typeString": "contract Pizza"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Pizza_$64",
                                      "typeString": "contract Pizza"
                                    }
                                  ],
                                  "id": 46436,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "585:7:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 46435,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "585:7:33",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 46438,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "585:14:33",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "hexValue": "",
                                "id": 46439,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "601:2:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                },
                                "value": ""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "id": 46434,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "568:16:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_payable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_ERC1967Proxy_$45664_$",
                                "typeString": "function (address,bytes memory) payable returns (contract ERC1967Proxy)"
                              },
                              "typeName": {
                                "id": 46433,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 46432,
                                  "name": "ERC1967Proxy",
                                  "nameLocations": [
                                    "572:12:33"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 45664,
                                  "src": "572:12:33"
                                },
                                "referencedDeclaration": 45664,
                                "src": "572:12:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ERC1967Proxy_$45664",
                                  "typeString": "contract ERC1967Proxy"
                                }
                              }
                            },
                            "id": 46440,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "568:36:33",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC1967Proxy_$45664",
                              "typeString": "contract ERC1967Proxy"
                            }
                          },
                          "src": "560:44:33",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC1967Proxy_$45664",
                            "typeString": "contract ERC1967Proxy"
                          }
                        },
                        "id": 46442,
                        "nodeType": "ExpressionStatement",
                        "src": "560:44:33"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 46443,
                              "name": "pizza",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46388,
                              "src": "682:5:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Pizza_$64",
                                "typeString": "contract Pizza"
                              }
                            },
                            "id": 46445,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "688:8:33",
                            "memberName": "eatSlice",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 63,
                            "src": "682:14:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                              "typeString": "function () external"
                            }
                          },
                          "id": 46446,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "682:16:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46447,
                        "nodeType": "ExpressionStatement",
                        "src": "682:16:33"
                      }
                    ]
                  },
                  "functionSelector": "0a9254e4",
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setUp",
                  "nameLocation": "378:5:33",
                  "parameters": {
                    "id": 46395,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "383:2:33"
                  },
                  "returnParameters": {
                    "id": 46396,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "393:0:33"
                  },
                  "scope": 46521,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "id": 46460,
                  "nodeType": "FunctionDefinition",
                  "src": "716:72:33",
                  "body": {
                    "id": 46459,
                    "nodeType": "Block",
                    "src": "742:46:33",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 46453,
                                  "name": "pizza",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 46388,
                                  "src": "762:5:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Pizza_$64",
                                    "typeString": "contract Pizza"
                                  }
                                },
                                "id": 46454,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "768:6:33",
                                "memberName": "slices",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 12,
                                "src": "762:12:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view external returns (uint256)"
                                }
                              },
                              "id": 46455,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "762:14:33",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "36",
                              "id": 46456,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "778:1:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              }
                            ],
                            "id": 46452,
                            "name": "assertEq",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              2575,
                              2600,
                              2613,
                              2629,
                              2671,
                              2713,
                              2755,
                              2792,
                              2829,
                              2866,
                              410,
                              435,
                              465,
                              490,
                              549,
                              574,
                              604,
                              629,
                              2102,
                              2137
                            ],
                            "referencedDeclaration": 604,
                            "src": "753:8:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 46457,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "753:27:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46458,
                        "nodeType": "ExpressionStatement",
                        "src": "753:27:33"
                      }
                    ]
                  },
                  "functionSelector": "4f759d40",
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "testEat",
                  "nameLocation": "725:7:33",
                  "parameters": {
                    "id": 46450,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "732:2:33"
                  },
                  "returnParameters": {
                    "id": 46451,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "742:0:33"
                  },
                  "scope": 46521,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "id": 46490,
                  "nodeType": "FunctionDefinition",
                  "src": "796:188:33",
                  "body": {
                    "id": 46489,
                    "nodeType": "Block",
                    "src": "826:158:33",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 46468,
                                  "name": "pizzaV2",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 46391,
                                  "src": "861:7:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_PizzaV2_$89",
                                    "typeString": "contract PizzaV2"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_PizzaV2_$89",
                                    "typeString": "contract PizzaV2"
                                  }
                                ],
                                "id": 46467,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "853:7:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 46466,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "853:7:33",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 46469,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "853:16:33",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 46463,
                              "name": "pizza",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46388,
                              "src": "837:5:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Pizza_$64",
                                "typeString": "contract Pizza"
                              }
                            },
                            "id": 46465,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "843:9:33",
                            "memberName": "upgradeTo",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 47,
                            "src": "837:15:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address) external"
                            }
                          },
                          "id": 46470,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "837:33:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46471,
                        "nodeType": "ExpressionStatement",
                        "src": "837:33:33"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 46472,
                              "name": "pizza",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46388,
                              "src": "881:5:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Pizza_$64",
                                "typeString": "contract Pizza"
                              }
                            },
                            "id": 46474,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "887:8:33",
                            "memberName": "eatSlice",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 63,
                            "src": "881:14:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                              "typeString": "function () external"
                            }
                          },
                          "id": 46475,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "881:16:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46476,
                        "nodeType": "ExpressionStatement",
                        "src": "881:16:33"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 46477,
                              "name": "pizzaV2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46391,
                              "src": "908:7:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_PizzaV2_$89",
                                "typeString": "contract PizzaV2"
                              }
                            },
                            "id": 46479,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "916:11:33",
                            "memberName": "refillSlice",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 79,
                            "src": "908:19:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                              "typeString": "function () external"
                            }
                          },
                          "id": 46480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "908:21:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46481,
                        "nodeType": "ExpressionStatement",
                        "src": "908:21:33"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 46483,
                                  "name": "pizza",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 46388,
                                  "src": "958:5:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Pizza_$64",
                                    "typeString": "contract Pizza"
                                  }
                                },
                                "id": 46484,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "964:6:33",
                                "memberName": "slices",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 12,
                                "src": "958:12:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view external returns (uint256)"
                                }
                              },
                              "id": 46485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "958:14:33",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "35",
                              "id": 46486,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "974:1:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_5_by_1",
                                "typeString": "int_const 5"
                              },
                              "value": "5"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_5_by_1",
                                "typeString": "int_const 5"
                              }
                            ],
                            "id": 46482,
                            "name": "assertEq",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              2575,
                              2600,
                              2613,
                              2629,
                              2671,
                              2713,
                              2755,
                              2792,
                              2829,
                              2866,
                              410,
                              435,
                              465,
                              490,
                              549,
                              574,
                              604,
                              629,
                              2102,
                              2137
                            ],
                            "referencedDeclaration": 604,
                            "src": "949:8:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 46487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "949:27:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46488,
                        "nodeType": "ExpressionStatement",
                        "src": "949:27:33"
                      }
                    ]
                  },
                  "functionSelector": "9d6aed0b",
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "testUpgrade",
                  "nameLocation": "805:11:33",
                  "parameters": {
                    "id": 46461,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "816:2:33"
                  },
                  "returnParameters": {
                    "id": 46462,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "826:0:33"
                  },
                  "scope": 46521,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "id": 46520,
                  "nodeType": "FunctionDefinition",
                  "src": "992:188:33",
                  "body": {
                    "id": 46519,
                    "nodeType": "Block",
                    "src": "1026:154:33",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 46498,
                                  "name": "pizzaV2",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 46391,
                                  "src": "1061:7:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_PizzaV2_$89",
                                    "typeString": "contract PizzaV2"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_PizzaV2_$89",
                                    "typeString": "contract PizzaV2"
                                  }
                                ],
                                "id": 46497,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1053:7:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 46496,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1053:7:33",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 46499,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1053:16:33",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 46493,
                              "name": "pizza",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46388,
                              "src": "1037:5:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Pizza_$64",
                                "typeString": "contract Pizza"
                              }
                            },
                            "id": 46495,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1043:9:33",
                            "memberName": "upgradeTo",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 47,
                            "src": "1037:15:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address) external"
                            }
                          },
                          "id": 46500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1037:33:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46501,
                        "nodeType": "ExpressionStatement",
                        "src": "1037:33:33"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 46502,
                              "name": "pizza",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46388,
                              "src": "1081:5:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Pizza_$64",
                                "typeString": "contract Pizza"
                              }
                            },
                            "id": 46504,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1087:8:33",
                            "memberName": "eatSlice",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 63,
                            "src": "1081:14:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                              "typeString": "function () external"
                            }
                          },
                          "id": 46505,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1081:16:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46506,
                        "nodeType": "ExpressionStatement",
                        "src": "1081:16:33"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 46507,
                              "name": "pizzaV2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46391,
                              "src": "1111:7:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_PizzaV2_$89",
                                "typeString": "contract PizzaV2"
                              }
                            },
                            "id": 46509,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1119:11:33",
                            "memberName": "refillSlice",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 79,
                            "src": "1111:19:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                              "typeString": "function () external"
                            }
                          },
                          "id": 46510,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1111:21:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46511,
                        "nodeType": "ExpressionStatement",
                        "src": "1111:21:33"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 46513,
                                  "name": "pizza",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 46388,
                                  "src": "1152:5:33",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Pizza_$64",
                                    "typeString": "contract Pizza"
                                  }
                                },
                                "id": 46514,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1158:6:33",
                                "memberName": "slices",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 12,
                                "src": "1152:12:33",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view external returns (uint256)"
                                }
                              },
                              "id": 46515,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1152:14:33",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "35",
                              "id": 46516,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1168:1:33",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_5_by_1",
                                "typeString": "int_const 5"
                              },
                              "value": "5"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_5_by_1",
                                "typeString": "int_const 5"
                              }
                            ],
                            "id": 46512,
                            "name": "assertEq",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              2575,
                              2600,
                              2613,
                              2629,
                              2671,
                              2713,
                              2755,
                              2792,
                              2829,
                              2866,
                              410,
                              435,
                              465,
                              490,
                              549,
                              574,
                              604,
                              629,
                              2102,
                              2137
                            ],
                            "referencedDeclaration": 604,
                            "src": "1143:8:33",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 46517,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1143:27:33",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 46518,
                        "nodeType": "ExpressionStatement",
                        "src": "1143:27:33"
                      }
                    ]
                  },
                  "functionSelector": "2761a0c8",
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "testUpgradeFail",
                  "nameLocation": "1001:15:33",
                  "parameters": {
                    "id": 46491,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1016:2:33"
                  },
                  "returnParameters": {
                    "id": 46492,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1026:0:33"
                  },
                  "scope": 46521,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 46384,
                    "name": "Test",
                    "nameLocations": [
                      "224:4:33"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 12269,
                    "src": "224:4:33"
                  },
                  "id": 46385,
                  "nodeType": "InheritanceSpecifier",
                  "src": "224:4:33"
                }
              ],
              "canonicalName": "PizzaTest",
              "contractDependencies": [
                64,
                89,
                45664
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "linearizedBaseContracts": [
                46521,
                12269,
                12218,
                7816,
                7491,
                6698,
                4638,
                3874,
                2381,
                2447,
                2444
              ],
              "name": "PizzaTest",
              "nameLocation": "211:9:33",
              "scope": 46522,
              "usedErrors": [],
              "usedEvents": [
                95,
                99,
                103,
                107,
                111,
                115,
                119,
                123,
                129,
                135,
                143,
                151,
                157,
                163,
                169,
                175,
                2469,
                2474,
                2479,
                2486,
                2493,
                2500
              ]
            }
          ]
        }
      }
    },
    "contracts": {
      "testFoundry/Pizza.t.sol": {
        "PizzaTest": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "name": "log",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "log_address",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "val",
                  "type": "uint256[]"
                }
              ],
              "name": "log_array",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "int256[]",
                  "name": "val",
                  "type": "int256[]"
                }
              ],
              "name": "log_array",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address[]",
                  "name": "val",
                  "type": "address[]"
                }
              ],
              "name": "log_array",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "name": "log_bytes",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "name": "log_bytes32",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "int256",
                  "name": "",
                  "type": "int256"
                }
              ],
              "name": "log_int",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "val",
                  "type": "address"
                }
              ],
              "name": "log_named_address",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "val",
                  "type": "uint256[]"
                }
              ],
              "name": "log_named_array",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "int256[]",
                  "name": "val",
                  "type": "int256[]"
                }
              ],
              "name": "log_named_array",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "address[]",
                  "name": "val",
                  "type": "address[]"
                }
              ],
              "name": "log_named_array",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "val",
                  "type": "bytes"
                }
              ],
              "name": "log_named_bytes",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "val",
                  "type": "bytes32"
                }
              ],
              "name": "log_named_bytes32",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "int256",
                  "name": "val",
                  "type": "int256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                }
              ],
              "name": "log_named_decimal_int",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "val",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                }
              ],
              "name": "log_named_decimal_uint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "int256",
                  "name": "val",
                  "type": "int256"
                }
              ],
              "name": "log_named_int",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "val",
                  "type": "string"
                }
              ],
              "name": "log_named_string",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "key",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "val",
                  "type": "uint256"
                }
              ],
              "name": "log_named_uint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "name": "log_string",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "log_uint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "name": "logs",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "IS_TEST",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "excludeArtifacts",
              "outputs": [
                {
                  "internalType": "string[]",
                  "name": "excludedArtifacts_",
                  "type": "string[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "excludeContracts",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "excludedContracts_",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "excludeSenders",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "excludedSenders_",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "failed",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "setUp",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "targetArtifactSelectors",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "selectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "internalType": "struct StdInvariant.FuzzSelector[]",
                  "name": "targetedArtifactSelectors_",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "targetArtifacts",
              "outputs": [
                {
                  "internalType": "string[]",
                  "name": "targetedArtifacts_",
                  "type": "string[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "targetContracts",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "targetedContracts_",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "targetInterfaces",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "string[]",
                      "name": "artifacts",
                      "type": "string[]"
                    }
                  ],
                  "internalType": "struct StdInvariant.FuzzInterface[]",
                  "name": "targetedInterfaces_",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "targetSelectors",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4[]",
                      "name": "selectors",
                      "type": "bytes4[]"
                    }
                  ],
                  "internalType": "struct StdInvariant.FuzzSelector[]",
                  "name": "targetedSelectors_",
                  "type": "tuple[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "targetSenders",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "targetedSenders_",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "testEat",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "testUpgrade",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "testUpgradeFail",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testEat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testUpgradeFail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"testFoundry/Pizza.t.sol\":\"PizzaTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/Pizza.sol\":{\"keccak256\":\"0x0d4ecb21ef0b7be5b422dcfc943922ceb80a70612f1fce5789d1f4c2fc7c2806\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://321d54ef138672d9e39bc39438951aa77af58d68b19dd9fac7a14965aa45cb45\",\"dweb:/ipfs/QmPkTZnyUMYpvhfJVpSZERYwHdLvAhyeayFZoRP2TGFGhq\"]},\"contracts/PizzaV2.sol\":{\"keccak256\":\"0xc2d8721cfd2159dd8f7bc4e6a48b45e54528ce8d9f930a3e3aae56cbcc9de0c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d33b202f993117265f6a5b18d50eb04efe294b36805a93617770ee3540b9e707\",\"dweb:/ipfs/QmbCwb4UurQ8bcEEfC2v3vt2NTT14MxwLrcgyCqpDfJ2sj\"]},\"lib/forge-std/lib/ds-test/src/test.sol\":{\"keccak256\":\"0xff80f41dd0d31e4bbda7ffba2f1f80d28493a6af85c13e4d700c09a6a5f9c9b4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5853c4b5e16a81e400c9ed44de8aaaf480b0266da017c55f6f6901808cf23cce\",\"dweb:/ipfs/QmXx6ybo4apj3GPLhA9Q4wDU9FQ3YzMYytjbgqFQVrxqem\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x658ad7c2171d17c092c21f7834536c6da1309e9e0e64de2ff6b4afbad6ccd261\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ed5efd8b2c1567bdb73550566b9c5b833e000682bd71d59f80b844edab18379\",\"dweb:/ipfs/QmepP8nqGWqZ8338GbzFTGPJgFuZ2e6EeSoCBf85uaQ4fn\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0xe485eccdb0534dde34b7b8061e4e817c977803eafb0203013f9931452fd04471\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d3b82b6afe6bc54d6e4a41c022adcd6614abffa82db36e8f41611fbe637d7d\",\"dweb:/ipfs/Qmd9zdvci5pof4Aoo9YnV2DprTV1dWRgm2BY16wmsBdGGR\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x0fbdbaf561ffeaf70308f9a493acc86f54aae0578376cbe3a1d2e4481ad23f0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f6e5ba6a8a95d391eb6ba9ba5f055f1961a8d031257b4b3fad72e74bc6028d3\",\"dweb:/ipfs/QmQ8WDUBtGM332wAXMt3Acc8c4ojksqqQ2iAkE9PgarGb7\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0x7893f3bde65ba1d00f78704b16b560a14193bc70476f4d5d165f27512896bc5b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://58823fca486c54f7af8ec764ed4d6da081e9546576ae32049baccd9cc8cd52ef\",\"dweb:/ipfs/Qme3YFQvBYv8NbuTmqEGFHhtqVPjEWRADSrGKeaGzzhRM3\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xce23c8ef835f3e9163487858105ebef195f9d42de5ae79e56417cfe66914c701\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e6c82a6bf10b9c9d92a0dbba09a88adab28ffe7c3a23bd83eb13ceff1358681b\",\"dweb:/ipfs/QmQR6HQ7QGGeH8TPXrFz9vSb7wvoCnwmuBJ4vGpCmLmPb6\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0xaffbb74d0276b7eea8d5a6de6f003d3dc151c5520bf2094e48b5098b60935f52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e84280959bc8677be79bb09c401341eee8f4f5932de549f423474b65dbed7c8a\",\"dweb:/ipfs/QmU4LJnAcrDX69fCgmwEpFP1CsEjNR6LS8EFVHy4axkH6e\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0xa915d14227430c3a1ed8e80bdd5ceb5a1fff791a4454565f5122d9685914cffb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db8ae45845bfb42d0ddb2ffd7233b803c02f4d0eef3140211eb06266fd59645f\",\"dweb:/ipfs/QmW7oRpvPsCW2BU8HFZXPJAQwEWZszjeEmD1y7sdFPoCfw\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0x2937c68a288dbb54c9bb4209119817ea197ffbed21167c493f14dcbbc327c399\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a222d841d2d7e9bb92cf1fb0018a2b8f56d7829a7cab0dba8aa1ca6e7ef693a8\",\"dweb:/ipfs/QmUvKzRrjPthS5m4rKrs7zGq38xgjWRrQpKMLQJrHkAgX6\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xee79340b675b42ba1192a7698aceaf775518099bd9d89c88eb5a890e8c3bef04\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3f2f034f1f0e6c2b7cef172d457872e060a1309a4b69630d9c30caaa12f83c1c\",\"dweb:/ipfs/QmPAaZeAKCn4JLafoxVL4TBYzcrADAVC8dmjT1WPpZ4f4D\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0xe3e5d092bfcad345b1c25ea431473039295fbd9efde2b702881f1f4edc2c1417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://89b16a8e997a1bed9ffb113924222d521542b1bc13b475763d8a8b890a27cd8a\",\"dweb:/ipfs/QmXeeuDTgjBYWgun7EiQgUJZF9JVKdARNM8qobLHdG9r4Q\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x540fc377956da55b8040a8b61df2af559ea12eab0d609e68628fe43927ac0efe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://197062dbe6ddd6d38b96a668e1a635c509493b74502548f0b44a10b7e9194358\",\"dweb:/ipfs/QmVW7jG1T58W2Y9idzLFSqtkRp2dZCNViFkTujWiFomafZ\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x071599d8ff5638e3ba28ef07c9d6a943fb9528f580d4b5054791c9d908d09f1a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://851f906606b73d69f541184800b2cd948f0486ec6c93c80ab0ad9af281c7b61f\",\"dweb:/ipfs/QmXcxVSbbfXf4Z34WDDFc73ErmC7LFR16W7SH6F8ERJYD9\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x92d5d1287b0f94a46931a24a864acf09389a83c1eaff50cfd638a652920effac\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://4014550b4faf3d6b342673a02aed6298842d7af07a5d4f6941ecc29b20f0f0d7\",\"dweb:/ipfs/QmP5p18bwRag5ELQrmoRUw3coJYxczqoMuKiJKHXRLewS8\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xbbdc11ec3a00e6b8c6c76e7f0ea46581239faee116324de4184dd0af011dd837\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10581f46c044a7561d25d8ea203f4e89e13a807b40bf9d87520f69407447de42\",\"dweb:/ipfs/QmSFVUzcDB9QtNyjJ5fLzi3kqKhtEbDD7TZMgbzJ9wiC63\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x194c2bb6bb02214ca445209140821fdad6f82fc1672ec900a31e4f7547ee34fb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2bde7d0db7b21399717c6969027759ec7dfa3563c543a577dfd6b140803325e4\",\"dweb:/ipfs/QmV5CKK1yECaPAeA7edxuftEwUXGLxVR4vSeBZRcWQkbkE\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x1313e079d13b9f3a47177eff1d226c41b0b51c0802c248d47d038eb65a084307\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b51e2203055cda450dc04ce55644f209f67e208fc143a1f118cff66de010f20\",\"dweb:/ipfs/QmVtQjmG6YnHaDt81TvJM74TvzEh3SULR3HyzxVQFM59xZ\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0x3b123e4c98a660bd6f3c45f38a5dd49af3d63d3bb8d74632b5f3f9a436600632\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9453004b7069dfcbbccc6ae32d94c900a0e1efe9fd8dc657e38480ea7483a09c\",\"dweb:/ipfs/QmaJsKTHJz5Yt72YqTB28zB1Bo5ffpUuuhd7DCs25yodpa\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0x03129910eb628d555f3c71cc9beffcb53a261f6338921dd562cf5d42fde1651c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea5f5cb5f3278bb677c57a39c040ea99d62be831b9e00aa1886c63e835dafabc\",\"dweb:/ipfs/Qma7Kq9ikbhuNbZYer8D9Q5ywNbKaB7JzapQLcp6vx4QiF\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0x60cc2f1eb24e38fc92e067c622d6eeebfea4173c9e6517f16d440fbc8f0257fb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7b73fff39ec51e2f181962e5ea1306d8a2e953c0a9116849d086b5432227ca1\",\"dweb:/ipfs/QmRrScdwdioNyyG7pPwsiQE1k5iJvuhYgt4MLY6xGu8uKh\"]},\"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6683e6ade6985d394d32baaef5eea0d8b9ff0b3eca86ae413d6cdde114a9930\",\"dweb:/ipfs/QmdBE8T1BTddZxpdECMsb3KiCFyjNWmxcCddYrWFTXmWPj\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef381843676aec64421200ee85eaa0b1356a35f28b9fc67e746a6bbb832077d9\",\"dweb:/ipfs/QmY8aorMYA2TeTCnu6ejDjzb4rW4t7TCtW4GZ6LoxTFm7v\"]},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"keccak256\":\"0xbfb6695731de677140fbf76c772ab08c4233a122fb51ac28ac120fc49bbbc4ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68f8fded7cc318efa15874b7c6a983fe17a4a955d72d240353a9a4ca1e1b824c\",\"dweb:/ipfs/QmdcmBL9Qo4Tk3Dby4wFYabGyot9JNeLPxpSXZUgUm92BV\"]},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://547d21aa17f4f3f1a1a7edf7167beff8dd9496a0348d5588f15cc8a4b29d052a\",\"dweb:/ipfs/QmT16JtRQSWNpLo9W23jr6CzaMuTAcQcjJJcdRd8HLJ6cE\"]},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac\",\"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e\"]},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa\",\"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"testFoundry/Pizza.t.sol\":{\"keccak256\":\"0xe3e16b98e978d532e7151848158d4cae60fcfa6dc76ff27dd07b5bc45a2c094d\",\"urls\":[\"bzz-raw://356a137aea0dc50bcbd24b8c2b63893c472c7ad588a96a6f061e819df72dc0e9\",\"dweb:/ipfs/QmUa6BvSjyEfr1erxXMvdtZZSvxLxQwttVXdxhxwGzB9fr\"]}},\"version\":1}",
          "userdoc": {},
          "devdoc": {},
          "storageLayout": {
            "storage": [
              {
                "astId": 2443,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "stdstore",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(StdStorage)8582_storage"
              },
              {
                "astId": 178,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "IS_TEST",
                "offset": 0,
                "slot": "7",
                "type": "t_bool"
              },
              {
                "astId": 180,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_failed",
                "offset": 1,
                "slot": "7",
                "type": "t_bool"
              },
              {
                "astId": 3898,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "stdChainsInitialized",
                "offset": 2,
                "slot": "7",
                "type": "t_bool"
              },
              {
                "astId": 3919,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "chains",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_string_memory_ptr,t_struct(Chain)3914_storage)"
              },
              {
                "astId": 3923,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "defaultRpcUrls",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
              },
              {
                "astId": 3927,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "idToAlias",
                "offset": 0,
                "slot": "10",
                "type": "t_mapping(t_uint256,t_string_storage)"
              },
              {
                "astId": 3930,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "fallbackToDefaultRpcUrls",
                "offset": 0,
                "slot": "11",
                "type": "t_bool"
              },
              {
                "astId": 4670,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "gasMeteringOff",
                "offset": 1,
                "slot": "11",
                "type": "t_bool"
              },
              {
                "astId": 6707,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "stdstore",
                "offset": 0,
                "slot": "12",
                "type": "t_struct(StdStorage)8582_storage"
              },
              {
                "astId": 7575,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_excludedContracts",
                "offset": 0,
                "slot": "19",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 7578,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_excludedSenders",
                "offset": 0,
                "slot": "20",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 7581,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_targetedContracts",
                "offset": 0,
                "slot": "21",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 7584,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_targetedSenders",
                "offset": 0,
                "slot": "22",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 7587,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_excludedArtifacts",
                "offset": 0,
                "slot": "23",
                "type": "t_array(t_string_storage)dyn_storage"
              },
              {
                "astId": 7590,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_targetedArtifacts",
                "offset": 0,
                "slot": "24",
                "type": "t_array(t_string_storage)dyn_storage"
              },
              {
                "astId": 7594,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_targetedArtifactSelectors",
                "offset": 0,
                "slot": "25",
                "type": "t_array(t_struct(FuzzSelector)7566_storage)dyn_storage"
              },
              {
                "astId": 7598,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_targetedSelectors",
                "offset": 0,
                "slot": "26",
                "type": "t_array(t_struct(FuzzSelector)7566_storage)dyn_storage"
              },
              {
                "astId": 7602,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "_targetedInterfaces",
                "offset": 0,
                "slot": "27",
                "type": "t_array(t_struct(FuzzInterface)7572_storage)dyn_storage"
              },
              {
                "astId": 46388,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "pizza",
                "offset": 0,
                "slot": "28",
                "type": "t_contract(Pizza)64"
              },
              {
                "astId": 46391,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "pizzaV2",
                "offset": 0,
                "slot": "29",
                "type": "t_contract(PizzaV2)89"
              },
              {
                "astId": 46394,
                "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                "label": "proxy",
                "offset": 0,
                "slot": "30",
                "type": "t_contract(ERC1967Proxy)45664"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_address)dyn_storage": {
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32",
                "base": "t_address"
              },
              "t_array(t_bytes32)dyn_storage": {
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32",
                "base": "t_bytes32"
              },
              "t_array(t_bytes4)dyn_storage": {
                "encoding": "dynamic_array",
                "label": "bytes4[]",
                "numberOfBytes": "32",
                "base": "t_bytes4"
              },
              "t_array(t_string_storage)dyn_storage": {
                "encoding": "dynamic_array",
                "label": "string[]",
                "numberOfBytes": "32",
                "base": "t_string_storage"
              },
              "t_array(t_struct(FuzzInterface)7572_storage)dyn_storage": {
                "encoding": "dynamic_array",
                "label": "struct StdInvariant.FuzzInterface[]",
                "numberOfBytes": "32",
                "base": "t_struct(FuzzInterface)7572_storage"
              },
              "t_array(t_struct(FuzzSelector)7566_storage)dyn_storage": {
                "encoding": "dynamic_array",
                "label": "struct StdInvariant.FuzzSelector[]",
                "numberOfBytes": "32",
                "base": "t_struct(FuzzSelector)7566_storage"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes4": {
                "encoding": "inplace",
                "label": "bytes4",
                "numberOfBytes": "4"
              },
              "t_contract(ERC1967Proxy)45664": {
                "encoding": "inplace",
                "label": "contract ERC1967Proxy",
                "numberOfBytes": "20"
              },
              "t_contract(Pizza)64": {
                "encoding": "inplace",
                "label": "contract Pizza",
                "numberOfBytes": "20"
              },
              "t_contract(PizzaV2)89": {
                "encoding": "inplace",
                "label": "contract PizzaV2",
                "numberOfBytes": "20"
              },
              "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))"
              },
              "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))"
              },
              "t_mapping(t_bytes32,t_bool)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
              },
              "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
              },
              "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
                "encoding": "mapping",
                "key": "t_bytes4",
                "label": "mapping(bytes4 => mapping(bytes32 => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes32,t_bool)"
              },
              "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
                "encoding": "mapping",
                "key": "t_bytes4",
                "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes32,t_uint256)"
              },
              "t_mapping(t_string_memory_ptr,t_string_storage)": {
                "encoding": "mapping",
                "key": "t_string_memory_ptr",
                "label": "mapping(string => string)",
                "numberOfBytes": "32",
                "value": "t_string_storage"
              },
              "t_mapping(t_string_memory_ptr,t_struct(Chain)3914_storage)": {
                "encoding": "mapping",
                "key": "t_string_memory_ptr",
                "label": "mapping(string => struct StdChains.Chain)",
                "numberOfBytes": "32",
                "value": "t_struct(Chain)3914_storage"
              },
              "t_mapping(t_uint256,t_string_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => string)",
                "numberOfBytes": "32",
                "value": "t_string_storage"
              },
              "t_string_memory_ptr": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_struct(Chain)3914_storage": {
                "encoding": "inplace",
                "label": "struct StdChains.Chain",
                "numberOfBytes": "128",
                "members": [
                  {
                    "astId": 3907,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "name",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 3909,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "chainId",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 3911,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "chainAlias",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 3913,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "rpcUrl",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_string_storage"
                  }
                ]
              },
              "t_struct(FuzzInterface)7572_storage": {
                "encoding": "inplace",
                "label": "struct StdInvariant.FuzzInterface",
                "numberOfBytes": "64",
                "members": [
                  {
                    "astId": 7568,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "addr",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_address"
                  },
                  {
                    "astId": 7571,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "artifacts",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_array(t_string_storage)dyn_storage"
                  }
                ]
              },
              "t_struct(FuzzSelector)7566_storage": {
                "encoding": "inplace",
                "label": "struct StdInvariant.FuzzSelector",
                "numberOfBytes": "64",
                "members": [
                  {
                    "astId": 7562,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "addr",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_address"
                  },
                  {
                    "astId": 7565,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "selectors",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_array(t_bytes4)dyn_storage"
                  }
                ]
              },
              "t_struct(StdStorage)8582_storage": {
                "encoding": "inplace",
                "label": "struct StdStorage",
                "numberOfBytes": "224",
                "members": [
                  {
                    "astId": 8562,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "slots",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))"
                  },
                  {
                    "astId": 8570,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "finds",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))"
                  },
                  {
                    "astId": 8573,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "_keys",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_array(t_bytes32)dyn_storage"
                  },
                  {
                    "astId": 8575,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "_sig",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_bytes4"
                  },
                  {
                    "astId": 8577,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "_depth",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 8579,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "_target",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_address"
                  },
                  {
                    "astId": 8581,
                    "contract": "testFoundry/Pizza.t.sol:PizzaTest",
                    "label": "_set",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_bytes32"
                  }
                ]
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "evm": {
            "bytecode": {
              "object": "608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50612eab8061003d6000396000f3fe60806040523480156200001157600080fd5b5060043610620001095760003560e01c806366d9a9a011620000a3578063b5508aa9116200006e578063b5508aa914620001b9578063ba414fa614620001c3578063e20c9f7114620001de578063fa7626d414620001e857600080fd5b806366d9a9a0146200017d57806385226c811462000196578063916a17c614620001af5780639d6aed0b146200013c57600080fd5b80632ade388011620000e45780632ade388014620001465780633e5e3c23146200015f5780633f7286f414620001695780634f759d40146200017357600080fd5b80630a9254e4146200010e5780631ed7831c146200011a5780632761a0c8146200013c575b600080fd5b62000118620001f6565b005b620001246200040a565b60405162000133919062001047565b60405180910390f35b620001186200046e565b620001506200062d565b604051620001339190620010bc565b620001246200077b565b62000124620007dd565b620001186200083f565b62000187620008ba565b6040516200013391906200119d565b620001a0620009a4565b60405162000133919062001254565b6200018762000a7e565b620001a062000b68565b620001cd62000c42565b604051901515815260200162000133565b6200012462000d79565b600754620001cd9060ff1681565b60405162000204906200101d565b604051809103906000f08015801562000221573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216918217905560405163da35a26f60e01b81526007600482015230602482015263da35a26f90604401600060405180830381600087803b1580156200027f57600080fd5b505af115801562000294573d6000803e3d6000fd5b50505050604051620002a6906200102b565b604051809103906000f080158015620002c3573d6000803e3d6000fd5b50601d80546001600160a01b0319166001600160a01b0392909216918217905560405163da35a26f60e01b81526007600482015230602482015263da35a26f90604401600060405180830381600087803b1580156200032157600080fd5b505af115801562000336573d6000803e3d6000fd5b5050601c546040516001600160a01b03909116925062000357915062001039565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562000393573d6000803e3d6000fd5b50601e80546001600160a01b0319166001600160a01b03928316179055601c5460408051630832958560e01b815290519190921691630832958591600480830192600092919082900301818387803b158015620003ef57600080fd5b505af115801562000404573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156200046457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000445575b5050505050905090565b601c54601d54604051631b2ce7f360e11b81526001600160a01b039182166004820152911690633659cfe690602401600060405180830381600087803b158015620004b857600080fd5b505af1158015620004cd573d6000803e3d6000fd5b50505050601c60009054906101000a90046001600160a01b03166001600160a01b031663083295856040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200052257600080fd5b505af115801562000537573d6000803e3d6000fd5b50505050601d60009054906101000a90046001600160a01b03166001600160a01b031663f63da92e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200058c57600080fd5b505af1158015620005a1573d6000803e3d6000fd5b505050506200062b601c60009054906101000a90046001600160a01b03166001600160a01b031663a63b6cde6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006239190620012c5565b600562000ddb565b565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156200077257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156200075a578382906000526020600020018054620006c690620012df565b80601f0160208091040260200160405190810160405280929190818152602001828054620006f490620012df565b8015620007455780601f10620007195761010080835404028352916020019162000745565b820191906000526020600020905b8154815290600101906020018083116200072757829003601f168201915b505050505081526020019060010190620006a4565b50505050815250508152602001906001019062000651565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801562000464576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000445575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801562000464576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000445575050505050905090565b601c546040805163531db66f60e11b815290516200062b926001600160a01b03169163a63b6cde9160048083019260209291908290030181865afa1580156200088c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008b29190620012c5565b600662000ddb565b60606019805480602002602001604051908101604052809291908181526020016000905b82821015620007725760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200098b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116200094c5790505b50505050508152505081526020019060010190620008de565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101562000772578382906000526020600020018054620009ea90620012df565b80601f016020809104026020016040519081016040528092919081815260200182805462000a1890620012df565b801562000a695780601f1062000a3d5761010080835404028352916020019162000a69565b820191906000526020600020905b81548152906001019060200180831162000a4b57829003601f168201915b505050505081526020019060010190620009c8565b6060601a805480602002602001604051908101604052809291908181526020016000905b82821015620007725760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562000b4f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162000b105790505b5050505050815250508152602001906001019062000aa2565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156200077257838290600052602060002001805462000bae90620012df565b80601f016020809104026020016040519081016040528092919081815260200182805462000bdc90620012df565b801562000c2d5780601f1062000c015761010080835404028352916020019162000c2d565b820191906000526020600020905b81548152906001019060200180831162000c0f57829003601f168201915b50505050508152602001906001019062000b8c565b600754600090610100900460ff161562000c655750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1562000d745760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909162000cf6917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016200131b565b60408051601f198184030181529082905262000d12916200134e565b6000604051808303816000865af19150503d806000811462000d51576040519150601f19603f3d011682016040523d82523d6000602084013e62000d56565b606091505b509150508080602001905181019062000d7091906200136c565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801562000464576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000445575050505050905090565b80821462000f06577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405162000e4e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a162000f0662000f0a565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156200100c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905262000fa792916020016200131b565b60408051601f198184030181529082905262000fc3916200134e565b6000604051808303816000865af19150503d806000811462001002576040519150601f19603f3d011682016040523d82523d6000602084013e62001007565b606091505b505050505b6007805461ff001916610100179055565b610b34806200139883390190565b610ba08062001ecc83390190565b61040a8062002a6c83390190565b6020808252825182820181905260009190848201906040850190845b818110156200108a5783516001600160a01b03168352928401929184019160010162001063565b50909695505050505050565b60005b83811015620010b357818101518382015260200162001099565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200119057603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156200117857898403605f190183528451805180865262001158818e88018f850162001096565b958c0195601f01601f1916949094018b019350918a01916001016200112e565b509197505050938601935090850190600101620010e3565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156200124557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156200122f5783516001600160e01b0319168252928b019260019290920191908b019062001203565b50978a01979550505091870191600101620011c5565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200119057878503603f1901845281518051808752620012a5818989018a850162001096565b601f01601f1916959095018601945092850192908501906001016200127b565b600060208284031215620012d857600080fd5b5051919050565b600181811c90821680620012f457607f821691505b6020821081036200131557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906200134081600485016020870162001096565b919091016004019392505050565b600082516200136281846020870162001096565b9190910192915050565b6000602082840312156200137f57600080fd5b815180151581146200139057600080fd5b939250505056fe60a06040523060805234801561001457600080fd5b50608051610af661003e600039600081816104030152818161042c01526105720152610af66000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461011b578063a63b6cde14610162578063ad3cb1cc14610178578063da35a26f146101b6578063f2fde38b146101d657600080fd5b806308329585146100965780633659cfe6146100ad5780634f1ef286146100cb57806352d1902d146100de578063715018a614610106575b600080fd5b3480156100a257600080fd5b506100ab6101f6565b005b3480156100b957600080fd5b506100ab6100c83660046108d4565b50565b6100ab6100d9366004610905565b610257565b3480156100ea57600080fd5b506100f3610276565b6040519081526020015b60405180910390f35b34801561011257600080fd5b506100ab610293565b34801561012757600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b0390911681526020016100fd565b34801561016e57600080fd5b506100f360005481565b34801561018457600080fd5b506101a9604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516100fd91906109eb565b3480156101c257600080fd5b506100ab6101d1366004610a1e565b6102a7565b3480156101e257600080fd5b506100ab6101f13660046108d4565b6103bd565b60016000541161023e5760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81cdb1a58d95cc81b19599d60921b60448201526064015b60405180910390fd5b60016000808282546102509190610a4a565b9091555050565b61025f6103f8565b6102688261049d565b61027282826104a5565b5050565b6000610280610567565b50600080516020610aa183398151915290565b61029b6105b0565b6102a5600061060b565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156102ed5750825b905060008267ffffffffffffffff16600114801561030a5750303b155b905081158015610318575080155b156103365760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561036057845460ff60401b1916600160401b1785555b600087905561036e8661067c565b83156103b457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6103c56105b0565b6001600160a01b0381166103ef57604051631e4fbdf760e01b815260006004820152602401610235565b6100c88161060b565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061047f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610473600080516020610aa1833981519152546001600160a01b031690565b6001600160a01b031614155b156102a55760405163703e46dd60e11b815260040160405180910390fd5b6100c86105b0565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156104ff575060408051601f3d908101601f191682019092526104fc91810190610a6b565b60015b61052757604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610235565b600080516020610aa1833981519152811461055857604051632a87526960e21b815260048101829052602401610235565b610562838361068d565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102a55760405163703e46dd60e11b815260040160405180910390fd5b336105e27f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102a55760405163118cdaa760e01b8152336004820152602401610235565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6106846106e3565b6100c88161072c565b61069682610734565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156106db576105628282610799565b610272610811565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166102a557604051631afcd79f60e31b815260040160405180910390fd5b6103c56106e3565b806001600160a01b03163b60000361076a57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610235565b600080516020610aa183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516107b69190610a84565b600060405180830381855af49150503d80600081146107f1576040519150601f19603f3d011682016040523d82523d6000602084013e6107f6565b606091505b5091509150610806858383610830565b925050505b92915050565b34156102a55760405163b398979f60e01b815260040160405180910390fd5b606082610845576108408261088f565b610888565b815115801561085c57506001600160a01b0384163b155b1561088557604051639996b31560e01b81526001600160a01b0385166004820152602401610235565b50805b9392505050565b80511561089f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146108cf57600080fd5b919050565b6000602082840312156108e657600080fd5b610888826108b8565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561091857600080fd5b610921836108b8565b9150602083013567ffffffffffffffff8082111561093e57600080fd5b818501915085601f83011261095257600080fd5b813581811115610964576109646108ef565b604051601f8201601f19908116603f0116810190838211818310171561098c5761098c6108ef565b816040528281528860208487010111156109a557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156109e25781810151838201526020016109ca565b50506000910152565b6020815260008251806020840152610a0a8160408501602087016109c7565b601f01601f19169190910160400192915050565b60008060408385031215610a3157600080fd5b82359150610a41602084016108b8565b90509250929050565b8181038181111561080b57634e487b7160e01b600052601160045260246000fd5b600060208284031215610a7d57600080fd5b5051919050565b60008251610a968184602087016109c7565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212202ae29bd15fb08e2dc26ce5590b0fe0fde1cdea4e41d1886e3788720a1b23c55664736f6c6343000814003360a06040523060805234801561001457600080fd5b50608051610b6261003e600039600081816104540152818161047d01526105c30152610b626000f3fe6080604052600436106100a75760003560e01c8063a63b6cde11610064578063a63b6cde14610178578063ad3cb1cc1461018e578063da35a26f146101cc578063f2fde38b146101ec578063f63da92e1461020c578063f64d99781461022157600080fd5b806308329585146100ac5780633659cfe6146100c35780634f1ef286146100e157806352d1902d146100f4578063715018a61461011c5780638da5cb5b14610131575b600080fd5b3480156100b857600080fd5b506100c1610235565b005b3480156100cf57600080fd5b506100c16100de366004610925565b50565b6100c16100ef366004610956565b610296565b34801561010057600080fd5b506101096102b5565b6040519081526020015b60405180910390f35b34801561012857600080fd5b506100c16102d2565b34801561013d57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b039091168152602001610113565b34801561018457600080fd5b5061010960005481565b34801561019a57600080fd5b506101bf604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101139190610a3c565b3480156101d857600080fd5b506100c16101e7366004610a6f565b6102e6565b3480156101f857600080fd5b506100c1610207366004610925565b6103fc565b34801561021857600080fd5b506100c1610437565b34801561022d57600080fd5b506002610109565b60016000541161027d5760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81cdb1a58d95cc81b19599d60921b60448201526064015b60405180910390fd5b600160008082825461028f9190610ab1565b9091555050565b61029e610449565b6102a7826104ee565b6102b182826104f6565b5050565b60006102bf6105b8565b50600080516020610b0d83398151915290565b6102da610601565b6102e4600061065c565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561032c5750825b905060008267ffffffffffffffff1660011480156103495750303b155b905081158015610357575080155b156103755760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561039f57845460ff60401b1916600160401b1785555b60008790556103ad866106cd565b83156103f357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610404610601565b6001600160a01b03811661042e57604051631e4fbdf760e01b815260006004820152602401610274565b6100de8161065c565b600160008082825461028f9190610ac4565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806104d057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104c4600080516020610b0d833981519152546001600160a01b031690565b6001600160a01b031614155b156102e45760405163703e46dd60e11b815260040160405180910390fd5b6100de610601565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610550575060408051601f3d908101601f1916820190925261054d91810190610ad7565b60015b61057857604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610274565b600080516020610b0d83398151915281146105a957604051632a87526960e21b815260048101829052602401610274565b6105b383836106de565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102e45760405163703e46dd60e11b815260040160405180910390fd5b336106337f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102e45760405163118cdaa760e01b8152336004820152602401610274565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6106d5610734565b6100de8161077d565b6106e782610785565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561072c576105b382826107ea565b6102b1610862565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166102e457604051631afcd79f60e31b815260040160405180910390fd5b610404610734565b806001600160a01b03163b6000036107bb57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610274565b600080516020610b0d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516108079190610af0565b600060405180830381855af49150503d8060008114610842576040519150601f19603f3d011682016040523d82523d6000602084013e610847565b606091505b5091509150610857858383610881565b925050505b92915050565b34156102e45760405163b398979f60e01b815260040160405180910390fd5b60608261089657610891826108e0565b6108d9565b81511580156108ad57506001600160a01b0384163b155b156108d657604051639996b31560e01b81526001600160a01b0385166004820152602401610274565b50805b9392505050565b8051156108f05780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461092057600080fd5b919050565b60006020828403121561093757600080fd5b6108d982610909565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561096957600080fd5b61097283610909565b9150602083013567ffffffffffffffff8082111561098f57600080fd5b818501915085601f8301126109a357600080fd5b8135818111156109b5576109b5610940565b604051601f8201601f19908116603f011681019083821181831017156109dd576109dd610940565b816040528281528860208487010111156109f657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015610a33578181015183820152602001610a1b565b50506000910152565b6020815260008251806020840152610a5b816040850160208701610a18565b601f01601f19169190910160400192915050565b60008060408385031215610a8257600080fd5b82359150610a9260208401610909565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561085c5761085c610a9b565b8082018082111561085c5761085c610a9b565b600060208284031215610ae957600080fd5b5051919050565b60008251610b02818460208701610a18565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f05f317defbf06949fa2a28d86264ff05e92c9f5f92f7d7f85283e05a8c6c61f64736f6c63430008140033608060405260405161040a38038061040a83398101604081905261002291610268565b61002c8282610033565b5050610352565b61003c82610092565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561008657610081828261010e565b505050565b61008e610185565b5050565b806001600160a01b03163b6000036100cd57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161012b9190610336565b600060405180830381855af49150503d8060008114610166576040519150601f19603f3d011682016040523d82523d6000602084013e61016b565b606091505b50909250905061017c8583836101a6565b95945050505050565b34156101a45760405163b398979f60e01b815260040160405180910390fd5b565b6060826101bb576101b682610205565b6101fe565b81511580156101d257506001600160a01b0384163b155b156101fb57604051639996b31560e01b81526001600160a01b03851660048201526024016100c4565b50805b9392505050565b8051156102155780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60005b8381101561025f578181015183820152602001610247565b50506000910152565b6000806040838503121561027b57600080fd5b82516001600160a01b038116811461029257600080fd5b60208401519092506001600160401b03808211156102af57600080fd5b818501915085601f8301126102c357600080fd5b8151818111156102d5576102d561022e565b604051601f8201601f19908116603f011681019083821181831017156102fd576102fd61022e565b8160405282815288602084870101111561031657600080fd5b610327836020830160208801610244565b80955050505050509250929050565b60008251610348818460208701610244565b9190910192915050565b60aa806103606000396000f3fe6080604052600a600c565b005b60186014601a565b6051565b565b6000604c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e808015606f573d6000f35b3d6000fdfea26469706673582212201cbf8bb7d78cbc6ddf7b4ac7072e0c59ccb55bfad849eb4670a27103451d39a864736f6c63430008140033a2646970667358221220e1e89939e522c983e6ee42208a9dd6c670a8c7f78fb0d648ced5f602ef2243ff64736f6c63430008140033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0xB DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EAB DUP1 PUSH2 0x3D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x109 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x66D9A9A0 GT PUSH3 0xA3 JUMPI DUP1 PUSH4 0xB5508AA9 GT PUSH3 0x6E JUMPI DUP1 PUSH4 0xB5508AA9 EQ PUSH3 0x1B9 JUMPI DUP1 PUSH4 0xBA414FA6 EQ PUSH3 0x1C3 JUMPI DUP1 PUSH4 0xE20C9F71 EQ PUSH3 0x1DE JUMPI DUP1 PUSH4 0xFA7626D4 EQ PUSH3 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x66D9A9A0 EQ PUSH3 0x17D JUMPI DUP1 PUSH4 0x85226C81 EQ PUSH3 0x196 JUMPI DUP1 PUSH4 0x916A17C6 EQ PUSH3 0x1AF JUMPI DUP1 PUSH4 0x9D6AED0B EQ PUSH3 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2ADE3880 GT PUSH3 0xE4 JUMPI DUP1 PUSH4 0x2ADE3880 EQ PUSH3 0x146 JUMPI DUP1 PUSH4 0x3E5E3C23 EQ PUSH3 0x15F JUMPI DUP1 PUSH4 0x3F7286F4 EQ PUSH3 0x169 JUMPI DUP1 PUSH4 0x4F759D40 EQ PUSH3 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9254E4 EQ PUSH3 0x10E JUMPI DUP1 PUSH4 0x1ED7831C EQ PUSH3 0x11A JUMPI DUP1 PUSH4 0x2761A0C8 EQ PUSH3 0x13C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x118 PUSH3 0x1F6 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x124 PUSH3 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x1047 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x118 PUSH3 0x46E JUMP JUMPDEST PUSH3 0x150 PUSH3 0x62D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x10BC JUMP JUMPDEST PUSH3 0x124 PUSH3 0x77B JUMP JUMPDEST PUSH3 0x124 PUSH3 0x7DD JUMP JUMPDEST PUSH3 0x118 PUSH3 0x83F JUMP JUMPDEST PUSH3 0x187 PUSH3 0x8BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x119D JUMP JUMPDEST PUSH3 0x1A0 PUSH3 0x9A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x1254 JUMP JUMPDEST PUSH3 0x187 PUSH3 0xA7E JUMP JUMPDEST PUSH3 0x1A0 PUSH3 0xB68 JUMP JUMPDEST PUSH3 0x1CD PUSH3 0xC42 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x133 JUMP JUMPDEST PUSH3 0x124 PUSH3 0xD79 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH3 0x1CD SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x204 SWAP1 PUSH3 0x101D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x221 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1C DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xDA35A26F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x7 PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH4 0xDA35A26F SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x294 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD PUSH3 0x2A6 SWAP1 PUSH3 0x102B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x2C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1D DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xDA35A26F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x7 PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH4 0xDA35A26F SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x336 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1C SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH3 0x357 SWAP2 POP PUSH3 0x1039 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x393 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1E DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1C SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x8329585 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x8329585 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x404 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x14 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x464 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x445 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1C SLOAD PUSH1 0x1D SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x3659CFE6 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x4CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1C PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8329585 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x537 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1D PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF63DA92E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x5A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH3 0x62B PUSH1 0x1C PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA63B6CDE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x5FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x623 SWAP2 SWAP1 PUSH3 0x12C5 JUMP JUMPDEST PUSH1 0x5 PUSH3 0xDDB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1B DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x2 DUP8 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP8 MUL DUP2 ADD DUP8 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP6 SWAP2 SWAP5 DUP7 DUP2 ADD SWAP5 SWAP2 SWAP3 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x75A JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH3 0x6C6 SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x6F4 SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 ISZERO PUSH3 0x745 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x719 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x745 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x727 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x6A4 JUMP JUMPDEST POP POP POP POP DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x651 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x16 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x464 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x445 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x15 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x464 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x445 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1C SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x531DB66F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH3 0x62B SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA63B6CDE SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x88C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x8B2 SWAP2 SWAP1 PUSH3 0x12C5 JUMP JUMPDEST PUSH1 0x6 PUSH3 0xDDB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x19 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP8 MUL DUP2 ADD DUP8 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 SWAP2 SWAP4 DUP6 DUP4 ADD SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH3 0x98B JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH3 0x94C JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x8DE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x18 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH3 0x9EA SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xA18 SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 ISZERO PUSH3 0xA69 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xA3D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xA69 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xA4B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x9C8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1A DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP8 MUL DUP2 ADD DUP8 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 SWAP2 SWAP4 DUP6 DUP4 ADD SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH3 0xB4F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH3 0xB10 JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xAA2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x17 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH3 0xBAE SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xBDC SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 ISZERO PUSH3 0xC2D JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xC01 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xC2D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xC0F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xB8C JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0xC65 JUMPI POP PUSH1 0x7 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D EXTCODESIZE ISZERO PUSH3 0xD74 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH6 0x19985A5B1959 PUSH1 0xD2 SHL DUP3 DUP5 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP1 SWAP4 MSTORE PUSH1 0x0 SWAP3 SWAP1 SWAP2 PUSH3 0xCF6 SWAP2 PUSH32 0x667F9D70CA411D70EAD50D8D5C22070DAFC36AD75F3DCF5E7237B22ADE9AECC4 SWAP2 PUSH1 0x80 ADD PUSH3 0x131B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0xD12 SWAP2 PUSH3 0x134E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0xD51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0xD56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH3 0xD70 SWAP2 SWAP1 PUSH3 0x136C JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x13 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x464 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x445 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 DUP3 EQ PUSH3 0xF06 JUMPI PUSH32 0x41304FACD9323D75B11BCDD609CB38EFFFFDB05710F7CAF0E9B16C6D9D709F50 PUSH1 0x40 MLOAD PUSH3 0xE4E SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4572726F723A2061203D3D2062206E6F7420736174697366696564205B75696E PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x745D PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD DUP2 DUP2 MSTORE PUSH1 0xA DUP2 DUP4 ADD MSTORE PUSH10 0x808080808081319599D PUSH1 0xB2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xB2DE2FBE801A0DF6C0CBDDFD448BA3C41D48A040CA35C56C8196EF0FCAE721A8 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD DUP2 DUP2 MSTORE PUSH1 0xA DUP2 DUP4 ADD MSTORE PUSH10 0x808080808149A59DA1D PUSH1 0xB2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xB2DE2FBE801A0DF6C0CBDDFD448BA3C41D48A040CA35C56C8196EF0FCAE721A8 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 PUSH3 0xF06 PUSH3 0xF0A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D EXTCODESIZE ISZERO PUSH3 0x100C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH6 0x19985A5B1959 PUSH1 0xD2 SHL SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH32 0x70CA10BBD0DBFD9020A9F4B13402C16CB120705E0D1C0AEAB10FA353AE586FC4 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0xFA7 SWAP3 SWAP2 PUSH1 0x20 ADD PUSH3 0x131B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0xFC3 SWAP2 PUSH3 0x134E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x1002 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1007 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xB34 DUP1 PUSH3 0x1398 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0xBA0 DUP1 PUSH3 0x1ECC DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x40A DUP1 PUSH3 0x2A6C DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x108A JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x1063 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x10B3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1099 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x1190 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE DUP7 ADD MLOAD PUSH1 0x40 DUP8 DUP8 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD SWAP1 DUP8 ADD DUP2 SWAP1 MSTORE SWAP1 DUP8 ADD SWAP1 PUSH1 0x60 PUSH1 0x5 DUP3 SWAP1 SHL DUP9 ADD DUP2 ADD SWAP2 SWAP1 DUP9 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1178 JUMPI DUP10 DUP5 SUB PUSH1 0x5F NOT ADD DUP4 MSTORE DUP5 MLOAD DUP1 MLOAD DUP1 DUP7 MSTORE PUSH3 0x1158 DUP2 DUP15 DUP9 ADD DUP16 DUP6 ADD PUSH3 0x1096 JUMP JUMPDEST SWAP6 DUP13 ADD SWAP6 PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP5 SWAP1 SWAP5 ADD DUP12 ADD SWAP4 POP SWAP2 DUP11 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x112E JUMP JUMPDEST POP SWAP2 SWAP8 POP POP POP SWAP4 DUP7 ADD SWAP4 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x10E3 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x1245 JUMPI DUP10 DUP5 SUB PUSH1 0x3F NOT ADD DUP7 MSTORE DUP3 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP9 ADD MLOAD DUP9 DUP6 ADD DUP9 SWAP1 MSTORE DUP1 MLOAD DUP9 DUP7 ADD DUP2 SWAP1 MSTORE SWAP1 DUP10 ADD SWAP1 DUP4 SWAP1 PUSH1 0x60 DUP8 ADD SWAP1 JUMPDEST DUP1 DUP4 LT ISZERO PUSH3 0x122F JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP3 MSTORE SWAP3 DUP12 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP12 ADD SWAP1 PUSH3 0x1203 JUMP JUMPDEST POP SWAP8 DUP11 ADD SWAP8 SWAP6 POP POP POP SWAP2 DUP8 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x11C5 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x1190 JUMPI DUP8 DUP6 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE PUSH3 0x12A5 DUP2 DUP10 DUP10 ADD DUP11 DUP6 ADD PUSH3 0x1096 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x127B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x12D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x12F4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1315 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH3 0x1340 DUP2 PUSH1 0x4 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x1096 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x1362 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x1096 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x137F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x1390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0xAF6 PUSH2 0x3E PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x403 ADD MSTORE DUP2 DUP2 PUSH2 0x42C ADD MSTORE PUSH2 0x572 ADD MSTORE PUSH2 0xAF6 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0xA63B6CDE EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xDA35A26F EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8329585 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x106 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x1F6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xC8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xAB PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x905 JUMP JUMPDEST PUSH2 0x257 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x112 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x293 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFD SWAP2 SWAP1 PUSH2 0x9EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA1E JUMP JUMPDEST PUSH2 0x2A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D4 JUMP JUMPDEST PUSH2 0x3BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SLOAD GT PUSH2 0x23E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B9BC81CDB1A58D95CC81B19599D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP3 DUP3 SLOAD PUSH2 0x250 SWAP2 SWAP1 PUSH2 0xA4A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH2 0x25F PUSH2 0x3F8 JUMP JUMPDEST PUSH2 0x268 DUP3 PUSH2 0x49D JUMP JUMPDEST PUSH2 0x272 DUP3 DUP3 PUSH2 0x4A5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x280 PUSH2 0x567 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x2A5 PUSH1 0x0 PUSH2 0x60B JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x2ED JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x30A JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x318 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x336 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x360 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x0 DUP8 SWAP1 SSTORE PUSH2 0x36E DUP7 PUSH2 0x67C JUMP JUMPDEST DUP4 ISZERO PUSH2 0x3B4 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3C5 PUSH2 0x5B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3EF JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0x60B JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x47F JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x473 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC8 PUSH2 0x5B0 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4FF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4FC SWAP2 DUP2 ADD SWAP1 PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x527 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH2 0x562 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH2 0x5E2 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x684 PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0x72C JUMP JUMPDEST PUSH2 0x696 DUP3 PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x6DB JUMPI PUSH2 0x562 DUP3 DUP3 PUSH2 0x799 JUMP JUMPDEST PUSH2 0x272 PUSH2 0x811 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C5 PUSH2 0x6E3 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x76A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x7B6 SWAP2 SWAP1 PUSH2 0xA84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x806 DUP6 DUP4 DUP4 PUSH2 0x830 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x845 JUMPI PUSH2 0x840 DUP3 PUSH2 0x88F JUMP JUMPDEST PUSH2 0x888 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x85C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x885 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST POP DUP1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x89F JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x888 DUP3 PUSH2 0x8B8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x921 DUP4 PUSH2 0x8B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x93E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x964 JUMPI PUSH2 0x964 PUSH2 0x8EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x98C JUMPI PUSH2 0x98C PUSH2 0x8EF JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x9A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9E2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9CA JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA0A DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x9C7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xA41 PUSH1 0x20 DUP5 ADD PUSH2 0x8B8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x80B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA96 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x9C7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA26469706673582212202A 0xE2 SWAP12 0xD1 PUSH0 0xB0 DUP15 0x2D 0xC2 PUSH13 0xE5590B0FE0FDE1CDEA4E41D188 PUSH15 0x3788720A1B23C55664736F6C634300 ADDMOD EQ STOP CALLER PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0xB62 PUSH2 0x3E PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x454 ADD MSTORE DUP2 DUP2 PUSH2 0x47D ADD MSTORE PUSH2 0x5C3 ADD MSTORE PUSH2 0xB62 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA63B6CDE GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xA63B6CDE EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0xDA35A26F EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0xF63DA92E EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0xF64D9978 EQ PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8329585 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x131 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x235 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0xDE CALLDATASIZE PUSH1 0x4 PUSH2 0x925 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC1 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x956 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x109 PUSH2 0x2B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x2D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x113 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x109 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BF PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x113 SWAP2 SWAP1 PUSH2 0xA3C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x2E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x925 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x437 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 PUSH2 0x109 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SLOAD GT PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B9BC81CDB1A58D95CC81B19599D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP3 DUP3 SLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH2 0x29E PUSH2 0x449 JUMP JUMPDEST PUSH2 0x2A7 DUP3 PUSH2 0x4EE JUMP JUMPDEST PUSH2 0x2B1 DUP3 DUP3 PUSH2 0x4F6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BF PUSH2 0x5B8 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x601 JUMP JUMPDEST PUSH2 0x2E4 PUSH1 0x0 PUSH2 0x65C JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x32C JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x349 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x357 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x375 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x39F JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x0 DUP8 SWAP1 SSTORE PUSH2 0x3AD DUP7 PUSH2 0x6CD JUMP JUMPDEST DUP4 ISZERO PUSH2 0x3F3 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x404 PUSH2 0x601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x42E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH2 0xDE DUP2 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP3 DUP3 SLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0xAC4 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x4D0 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4C4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDE PUSH2 0x601 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x550 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x54D SWAP2 DUP2 ADD SWAP1 PUSH2 0xAD7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x578 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x5A9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH2 0x5B3 DUP4 DUP4 PUSH2 0x6DE JUMP JUMPDEST POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH2 0x633 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x6D5 PUSH2 0x734 JUMP JUMPDEST PUSH2 0xDE DUP2 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x6E7 DUP3 PUSH2 0x785 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x72C JUMPI PUSH2 0x5B3 DUP3 DUP3 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x2B1 PUSH2 0x862 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x404 PUSH2 0x734 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x7BB JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x807 SWAP2 SWAP1 PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x847 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x857 DUP6 DUP4 DUP4 PUSH2 0x881 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x896 JUMPI PUSH2 0x891 DUP3 PUSH2 0x8E0 JUMP JUMPDEST PUSH2 0x8D9 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x8AD JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST POP DUP1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x8F0 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x937 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8D9 DUP3 PUSH2 0x909 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x972 DUP4 PUSH2 0x909 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x98F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9B5 JUMPI PUSH2 0x9B5 PUSH2 0x940 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x9DD JUMPI PUSH2 0x9DD PUSH2 0x940 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x9F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA33 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA1B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA5B DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xA92 PUSH1 0x20 DUP5 ADD PUSH2 0x909 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x85C JUMPI PUSH2 0x85C PUSH2 0xA9B JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x85C JUMPI PUSH2 0x85C PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xB02 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA18 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220F0 PUSH0 BALANCE PUSH30 0xEFBF06949FA2A28D86264FF05E92C9F5F92F7D7F85283E05A8C6C61F6473 PUSH16 0x6C634300081400336080604052604051 PUSH2 0x40A CODESIZE SUB DUP1 PUSH2 0x40A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0x268 JUMP JUMPDEST PUSH2 0x2C DUP3 DUP3 PUSH2 0x33 JUMP JUMPDEST POP POP PUSH2 0x352 JUMP JUMPDEST PUSH2 0x3C DUP3 PUSH2 0x92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x86 JUMPI PUSH2 0x81 DUP3 DUP3 PUSH2 0x10E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x8E PUSH2 0x185 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0xCD JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x12B SWAP2 SWAP1 PUSH2 0x336 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x166 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x17C DUP6 DUP4 DUP4 PUSH2 0x1A6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x1BB JUMPI PUSH2 0x1B6 DUP3 PUSH2 0x205 JUMP JUMPDEST PUSH2 0x1FE JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x1D2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x1FB JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xC4 JUMP JUMPDEST POP DUP1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x215 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2D5 JUMPI PUSH2 0x2D5 PUSH2 0x22E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2FD JUMPI PUSH2 0x2FD PUSH2 0x22E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x327 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x244 JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x348 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x244 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xAA DUP1 PUSH2 0x360 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0xC JUMP JUMPDEST STOP JUMPDEST PUSH1 0x18 PUSH1 0x14 PUSH1 0x1A JUMP JUMPDEST PUSH1 0x51 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4C PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH1 0x6F JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR 0xBF DUP12 0xB7 0xD7 DUP13 0xBC PUSH14 0xDF7B4AC7072E0C59CCB55BFAD849 0xEB CHAINID PUSH17 0xA27103451D39A864736F6C634300081400 CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xE8 SWAP10 CODECOPY 0xE5 0x22 0xC9 DUP4 0xE6 0xEE TIMESTAMP KECCAK256 DUP11 SWAP14 0xD6 0xC6 PUSH17 0xA8C7F78FB0D648CED5F602EF2243FF6473 PUSH16 0x6C634300081400330000000000000000 ",
              "sourceMap": "202:1432:33:-:0;;;1609:26:2;;;1631:4;-1:-1:-1;;1609:26:2;;;;;;;;3191:44:5;;;;;;;;;;;202:1432:33;;;;;;;;;;;;;;;;",
              "linkReferences": {}
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@IS_TEST_178": {
                  "entryPoint": null,
                  "id": 178,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@assertEq_604": {
                  "entryPoint": 3547,
                  "id": 604,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@excludeArtifacts_7724": {
                  "entryPoint": 2920,
                  "id": 7724,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@excludeContracts_7735": {
                  "entryPoint": 3449,
                  "id": 7735,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@excludeSenders_7746": {
                  "entryPoint": 1034,
                  "id": 7746,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@fail_306": {
                  "entryPoint": 3850,
                  "id": 306,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@failed_262": {
                  "entryPoint": 3138,
                  "id": 262,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@hasHEVMContext_321": {
                  "entryPoint": null,
                  "id": 321,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@setUp_46449": {
                  "entryPoint": 502,
                  "id": 46449,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@targetArtifactSelectors_7769": {
                  "entryPoint": 2234,
                  "id": 7769,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@targetArtifacts_7757": {
                  "entryPoint": 2468,
                  "id": 7757,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@targetContracts_7780": {
                  "entryPoint": 2013,
                  "id": 7780,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@targetInterfaces_7815": {
                  "entryPoint": 1581,
                  "id": 7815,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@targetSelectors_7792": {
                  "entryPoint": 2686,
                  "id": 7792,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@targetSenders_7803": {
                  "entryPoint": 1915,
                  "id": 7803,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@testEat_46460": {
                  "entryPoint": 2111,
                  "id": 46460,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@testUpgradeFail_46520": {
                  "entryPoint": 1134,
                  "id": 46520,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@testUpgrade_46490": {
                  "entryPoint": null,
                  "id": 46490,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_bool_fromMemory": {
                  "entryPoint": 4972,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256_fromMemory": {
                  "entryPoint": 4805,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes4_t_bytes_memory_ptr__to_t_bytes4_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 4891,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 4942,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_bytes32_t_bytes32__to_t_address_t_bytes32_t_bytes32__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_bytes_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 4167,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 4692,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_struct$_FuzzInterface_$7572_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FuzzInterface_$7572_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 4284,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_struct$_FuzzSelector_$7566_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FuzzSelector_$7566_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 4509,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_rational_7_by_1_t_address__to_t_uint256_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_3bb05d3ba160a011999668447ff4a7cdd52bf87aeb1d7b9b284ef23b37a2b183__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_bbf7c57905778f125dacfa4fd24c0b99a73d897099071adb94dd57d06b52ce31_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_f594094f8f37a3e37fa75233058696f0caafa00827fc96f5c5afe6f0e2570053_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 4246,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_byte_array_length": {
                  "entryPoint": 4831,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                }
              },
              "object": "60806040523480156200001157600080fd5b5060043610620001095760003560e01c806366d9a9a011620000a3578063b5508aa9116200006e578063b5508aa914620001b9578063ba414fa614620001c3578063e20c9f7114620001de578063fa7626d414620001e857600080fd5b806366d9a9a0146200017d57806385226c811462000196578063916a17c614620001af5780639d6aed0b146200013c57600080fd5b80632ade388011620000e45780632ade388014620001465780633e5e3c23146200015f5780633f7286f414620001695780634f759d40146200017357600080fd5b80630a9254e4146200010e5780631ed7831c146200011a5780632761a0c8146200013c575b600080fd5b62000118620001f6565b005b620001246200040a565b60405162000133919062001047565b60405180910390f35b620001186200046e565b620001506200062d565b604051620001339190620010bc565b620001246200077b565b62000124620007dd565b620001186200083f565b62000187620008ba565b6040516200013391906200119d565b620001a0620009a4565b60405162000133919062001254565b6200018762000a7e565b620001a062000b68565b620001cd62000c42565b604051901515815260200162000133565b6200012462000d79565b600754620001cd9060ff1681565b60405162000204906200101d565b604051809103906000f08015801562000221573d6000803e3d6000fd5b50601c80546001600160a01b0319166001600160a01b0392909216918217905560405163da35a26f60e01b81526007600482015230602482015263da35a26f90604401600060405180830381600087803b1580156200027f57600080fd5b505af115801562000294573d6000803e3d6000fd5b50505050604051620002a6906200102b565b604051809103906000f080158015620002c3573d6000803e3d6000fd5b50601d80546001600160a01b0319166001600160a01b0392909216918217905560405163da35a26f60e01b81526007600482015230602482015263da35a26f90604401600060405180830381600087803b1580156200032157600080fd5b505af115801562000336573d6000803e3d6000fd5b5050601c546040516001600160a01b03909116925062000357915062001039565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562000393573d6000803e3d6000fd5b50601e80546001600160a01b0319166001600160a01b03928316179055601c5460408051630832958560e01b815290519190921691630832958591600480830192600092919082900301818387803b158015620003ef57600080fd5b505af115801562000404573d6000803e3d6000fd5b50505050565b606060148054806020026020016040519081016040528092919081815260200182805480156200046457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000445575b5050505050905090565b601c54601d54604051631b2ce7f360e11b81526001600160a01b039182166004820152911690633659cfe690602401600060405180830381600087803b158015620004b857600080fd5b505af1158015620004cd573d6000803e3d6000fd5b50505050601c60009054906101000a90046001600160a01b03166001600160a01b031663083295856040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200052257600080fd5b505af115801562000537573d6000803e3d6000fd5b50505050601d60009054906101000a90046001600160a01b03166001600160a01b031663f63da92e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200058c57600080fd5b505af1158015620005a1573d6000803e3d6000fd5b505050506200062b601c60009054906101000a90046001600160a01b03166001600160a01b031663a63b6cde6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006239190620012c5565b600562000ddb565b565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156200077257600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156200075a578382906000526020600020018054620006c690620012df565b80601f0160208091040260200160405190810160405280929190818152602001828054620006f490620012df565b8015620007455780601f10620007195761010080835404028352916020019162000745565b820191906000526020600020905b8154815290600101906020018083116200072757829003601f168201915b505050505081526020019060010190620006a4565b50505050815250508152602001906001019062000651565b50505050905090565b6060601680548060200260200160405190810160405280929190818152602001828054801562000464576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000445575050505050905090565b6060601580548060200260200160405190810160405280929190818152602001828054801562000464576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000445575050505050905090565b601c546040805163531db66f60e11b815290516200062b926001600160a01b03169163a63b6cde9160048083019260209291908290030181865afa1580156200088c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008b29190620012c5565b600662000ddb565b60606019805480602002602001604051908101604052809291908181526020016000905b82821015620007725760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200098b57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116200094c5790505b50505050508152505081526020019060010190620008de565b60606018805480602002602001604051908101604052809291908181526020016000905b8282101562000772578382906000526020600020018054620009ea90620012df565b80601f016020809104026020016040519081016040528092919081815260200182805462000a1890620012df565b801562000a695780601f1062000a3d5761010080835404028352916020019162000a69565b820191906000526020600020905b81548152906001019060200180831162000a4b57829003601f168201915b505050505081526020019060010190620009c8565b6060601a805480602002602001604051908101604052809291908181526020016000905b82821015620007725760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562000b4f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b0319168152602001906004019060208260030104928301926001038202915080841162000b105790505b5050505050815250508152602001906001019062000aa2565b60606017805480602002602001604051908101604052809291908181526020016000905b828210156200077257838290600052602060002001805462000bae90620012df565b80601f016020809104026020016040519081016040528092919081815260200182805462000bdc90620012df565b801562000c2d5780601f1062000c015761010080835404028352916020019162000c2d565b820191906000526020600020905b81548152906001019060200180831162000c0f57829003601f168201915b50505050508152602001906001019062000b8c565b600754600090610100900460ff161562000c655750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1562000d745760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909162000cf6917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016200131b565b60408051601f198184030181529082905262000d12916200134e565b6000604051808303816000865af19150503d806000811462000d51576040519150601f19603f3d011682016040523d82523d6000602084013e62000d56565b606091505b509150508080602001905181019062000d7091906200136c565b9150505b919050565b6060601380548060200260200160405190810160405280929190818152602001828054801562000464576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831162000445575050505050905090565b80821462000f06577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405162000e4e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a162000f0662000f0a565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156200100c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905262000fa792916020016200131b565b60408051601f198184030181529082905262000fc3916200134e565b6000604051808303816000865af19150503d806000811462001002576040519150601f19603f3d011682016040523d82523d6000602084013e62001007565b606091505b505050505b6007805461ff001916610100179055565b610b34806200139883390190565b610ba08062001ecc83390190565b61040a8062002a6c83390190565b6020808252825182820181905260009190848201906040850190845b818110156200108a5783516001600160a01b03168352928401929184019160010162001063565b50909695505050505050565b60005b83811015620010b357818101518382015260200162001099565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200119057603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156200117857898403605f190183528451805180865262001158818e88018f850162001096565b958c0195601f01601f1916949094018b019350918a01916001016200112e565b509197505050938601935090850190600101620010e3565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156200124557898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b808310156200122f5783516001600160e01b0319168252928b019260019290920191908b019062001203565b50978a01979550505091870191600101620011c5565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156200119057878503603f1901845281518051808752620012a5818989018a850162001096565b601f01601f1916959095018601945092850192908501906001016200127b565b600060208284031215620012d857600080fd5b5051919050565b600181811c90821680620012f457607f821691505b6020821081036200131557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160e01b03198316815281516000906200134081600485016020870162001096565b919091016004019392505050565b600082516200136281846020870162001096565b9190910192915050565b6000602082840312156200137f57600080fd5b815180151581146200139057600080fd5b939250505056fe60a06040523060805234801561001457600080fd5b50608051610af661003e600039600081816104030152818161042c01526105720152610af66000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b1461011b578063a63b6cde14610162578063ad3cb1cc14610178578063da35a26f146101b6578063f2fde38b146101d657600080fd5b806308329585146100965780633659cfe6146100ad5780634f1ef286146100cb57806352d1902d146100de578063715018a614610106575b600080fd5b3480156100a257600080fd5b506100ab6101f6565b005b3480156100b957600080fd5b506100ab6100c83660046108d4565b50565b6100ab6100d9366004610905565b610257565b3480156100ea57600080fd5b506100f3610276565b6040519081526020015b60405180910390f35b34801561011257600080fd5b506100ab610293565b34801561012757600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b0390911681526020016100fd565b34801561016e57600080fd5b506100f360005481565b34801561018457600080fd5b506101a9604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516100fd91906109eb565b3480156101c257600080fd5b506100ab6101d1366004610a1e565b6102a7565b3480156101e257600080fd5b506100ab6101f13660046108d4565b6103bd565b60016000541161023e5760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81cdb1a58d95cc81b19599d60921b60448201526064015b60405180910390fd5b60016000808282546102509190610a4a565b9091555050565b61025f6103f8565b6102688261049d565b61027282826104a5565b5050565b6000610280610567565b50600080516020610aa183398151915290565b61029b6105b0565b6102a5600061060b565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156102ed5750825b905060008267ffffffffffffffff16600114801561030a5750303b155b905081158015610318575080155b156103365760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561036057845460ff60401b1916600160401b1785555b600087905561036e8661067c565b83156103b457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6103c56105b0565b6001600160a01b0381166103ef57604051631e4fbdf760e01b815260006004820152602401610235565b6100c88161060b565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061047f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610473600080516020610aa1833981519152546001600160a01b031690565b6001600160a01b031614155b156102a55760405163703e46dd60e11b815260040160405180910390fd5b6100c86105b0565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156104ff575060408051601f3d908101601f191682019092526104fc91810190610a6b565b60015b61052757604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610235565b600080516020610aa1833981519152811461055857604051632a87526960e21b815260048101829052602401610235565b610562838361068d565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102a55760405163703e46dd60e11b815260040160405180910390fd5b336105e27f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102a55760405163118cdaa760e01b8152336004820152602401610235565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6106846106e3565b6100c88161072c565b61069682610734565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156106db576105628282610799565b610272610811565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166102a557604051631afcd79f60e31b815260040160405180910390fd5b6103c56106e3565b806001600160a01b03163b60000361076a57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610235565b600080516020610aa183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516107b69190610a84565b600060405180830381855af49150503d80600081146107f1576040519150601f19603f3d011682016040523d82523d6000602084013e6107f6565b606091505b5091509150610806858383610830565b925050505b92915050565b34156102a55760405163b398979f60e01b815260040160405180910390fd5b606082610845576108408261088f565b610888565b815115801561085c57506001600160a01b0384163b155b1561088557604051639996b31560e01b81526001600160a01b0385166004820152602401610235565b50805b9392505050565b80511561089f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146108cf57600080fd5b919050565b6000602082840312156108e657600080fd5b610888826108b8565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561091857600080fd5b610921836108b8565b9150602083013567ffffffffffffffff8082111561093e57600080fd5b818501915085601f83011261095257600080fd5b813581811115610964576109646108ef565b604051601f8201601f19908116603f0116810190838211818310171561098c5761098c6108ef565b816040528281528860208487010111156109a557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156109e25781810151838201526020016109ca565b50506000910152565b6020815260008251806020840152610a0a8160408501602087016109c7565b601f01601f19169190910160400192915050565b60008060408385031215610a3157600080fd5b82359150610a41602084016108b8565b90509250929050565b8181038181111561080b57634e487b7160e01b600052601160045260246000fd5b600060208284031215610a7d57600080fd5b5051919050565b60008251610a968184602087016109c7565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212202ae29bd15fb08e2dc26ce5590b0fe0fde1cdea4e41d1886e3788720a1b23c55664736f6c6343000814003360a06040523060805234801561001457600080fd5b50608051610b6261003e600039600081816104540152818161047d01526105c30152610b626000f3fe6080604052600436106100a75760003560e01c8063a63b6cde11610064578063a63b6cde14610178578063ad3cb1cc1461018e578063da35a26f146101cc578063f2fde38b146101ec578063f63da92e1461020c578063f64d99781461022157600080fd5b806308329585146100ac5780633659cfe6146100c35780634f1ef286146100e157806352d1902d146100f4578063715018a61461011c5780638da5cb5b14610131575b600080fd5b3480156100b857600080fd5b506100c1610235565b005b3480156100cf57600080fd5b506100c16100de366004610925565b50565b6100c16100ef366004610956565b610296565b34801561010057600080fd5b506101096102b5565b6040519081526020015b60405180910390f35b34801561012857600080fd5b506100c16102d2565b34801561013d57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b039091168152602001610113565b34801561018457600080fd5b5061010960005481565b34801561019a57600080fd5b506101bf604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101139190610a3c565b3480156101d857600080fd5b506100c16101e7366004610a6f565b6102e6565b3480156101f857600080fd5b506100c1610207366004610925565b6103fc565b34801561021857600080fd5b506100c1610437565b34801561022d57600080fd5b506002610109565b60016000541161027d5760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81cdb1a58d95cc81b19599d60921b60448201526064015b60405180910390fd5b600160008082825461028f9190610ab1565b9091555050565b61029e610449565b6102a7826104ee565b6102b182826104f6565b5050565b60006102bf6105b8565b50600080516020610b0d83398151915290565b6102da610601565b6102e4600061065c565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561032c5750825b905060008267ffffffffffffffff1660011480156103495750303b155b905081158015610357575080155b156103755760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561039f57845460ff60401b1916600160401b1785555b60008790556103ad866106cd565b83156103f357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610404610601565b6001600160a01b03811661042e57604051631e4fbdf760e01b815260006004820152602401610274565b6100de8161065c565b600160008082825461028f9190610ac4565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806104d057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104c4600080516020610b0d833981519152546001600160a01b031690565b6001600160a01b031614155b156102e45760405163703e46dd60e11b815260040160405180910390fd5b6100de610601565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610550575060408051601f3d908101601f1916820190925261054d91810190610ad7565b60015b61057857604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610274565b600080516020610b0d83398151915281146105a957604051632a87526960e21b815260048101829052602401610274565b6105b383836106de565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102e45760405163703e46dd60e11b815260040160405180910390fd5b336106337f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102e45760405163118cdaa760e01b8152336004820152602401610274565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6106d5610734565b6100de8161077d565b6106e782610785565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561072c576105b382826107ea565b6102b1610862565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166102e457604051631afcd79f60e31b815260040160405180910390fd5b610404610734565b806001600160a01b03163b6000036107bb57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610274565b600080516020610b0d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516108079190610af0565b600060405180830381855af49150503d8060008114610842576040519150601f19603f3d011682016040523d82523d6000602084013e610847565b606091505b5091509150610857858383610881565b925050505b92915050565b34156102e45760405163b398979f60e01b815260040160405180910390fd5b60608261089657610891826108e0565b6108d9565b81511580156108ad57506001600160a01b0384163b155b156108d657604051639996b31560e01b81526001600160a01b0385166004820152602401610274565b50805b9392505050565b8051156108f05780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461092057600080fd5b919050565b60006020828403121561093757600080fd5b6108d982610909565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561096957600080fd5b61097283610909565b9150602083013567ffffffffffffffff8082111561098f57600080fd5b818501915085601f8301126109a357600080fd5b8135818111156109b5576109b5610940565b604051601f8201601f19908116603f011681019083821181831017156109dd576109dd610940565b816040528281528860208487010111156109f657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015610a33578181015183820152602001610a1b565b50506000910152565b6020815260008251806020840152610a5b816040850160208701610a18565b601f01601f19169190910160400192915050565b60008060408385031215610a8257600080fd5b82359150610a9260208401610909565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561085c5761085c610a9b565b8082018082111561085c5761085c610a9b565b600060208284031215610ae957600080fd5b5051919050565b60008251610b02818460208701610a18565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f05f317defbf06949fa2a28d86264ff05e92c9f5f92f7d7f85283e05a8c6c61f64736f6c63430008140033608060405260405161040a38038061040a83398101604081905261002291610268565b61002c8282610033565b5050610352565b61003c82610092565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561008657610081828261010e565b505050565b61008e610185565b5050565b806001600160a01b03163b6000036100cd57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161012b9190610336565b600060405180830381855af49150503d8060008114610166576040519150601f19603f3d011682016040523d82523d6000602084013e61016b565b606091505b50909250905061017c8583836101a6565b95945050505050565b34156101a45760405163b398979f60e01b815260040160405180910390fd5b565b6060826101bb576101b682610205565b6101fe565b81511580156101d257506001600160a01b0384163b155b156101fb57604051639996b31560e01b81526001600160a01b03851660048201526024016100c4565b50805b9392505050565b8051156102155780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60005b8381101561025f578181015183820152602001610247565b50506000910152565b6000806040838503121561027b57600080fd5b82516001600160a01b038116811461029257600080fd5b60208401519092506001600160401b03808211156102af57600080fd5b818501915085601f8301126102c357600080fd5b8151818111156102d5576102d561022e565b604051601f8201601f19908116603f011681019083821181831017156102fd576102fd61022e565b8160405282815288602084870101111561031657600080fd5b610327836020830160208801610244565b80955050505050509250929050565b60008251610348818460208701610244565b9190910192915050565b60aa806103606000396000f3fe6080604052600a600c565b005b60186014601a565b6051565b565b6000604c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e808015606f573d6000f35b3d6000fdfea26469706673582212201cbf8bb7d78cbc6ddf7b4ac7072e0c59ccb55bfad849eb4670a27103451d39a864736f6c63430008140033a2646970667358221220e1e89939e522c983e6ee42208a9dd6c670a8c7f78fb0d648ced5f602ef2243ff64736f6c63430008140033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x109 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x66D9A9A0 GT PUSH3 0xA3 JUMPI DUP1 PUSH4 0xB5508AA9 GT PUSH3 0x6E JUMPI DUP1 PUSH4 0xB5508AA9 EQ PUSH3 0x1B9 JUMPI DUP1 PUSH4 0xBA414FA6 EQ PUSH3 0x1C3 JUMPI DUP1 PUSH4 0xE20C9F71 EQ PUSH3 0x1DE JUMPI DUP1 PUSH4 0xFA7626D4 EQ PUSH3 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x66D9A9A0 EQ PUSH3 0x17D JUMPI DUP1 PUSH4 0x85226C81 EQ PUSH3 0x196 JUMPI DUP1 PUSH4 0x916A17C6 EQ PUSH3 0x1AF JUMPI DUP1 PUSH4 0x9D6AED0B EQ PUSH3 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2ADE3880 GT PUSH3 0xE4 JUMPI DUP1 PUSH4 0x2ADE3880 EQ PUSH3 0x146 JUMPI DUP1 PUSH4 0x3E5E3C23 EQ PUSH3 0x15F JUMPI DUP1 PUSH4 0x3F7286F4 EQ PUSH3 0x169 JUMPI DUP1 PUSH4 0x4F759D40 EQ PUSH3 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9254E4 EQ PUSH3 0x10E JUMPI DUP1 PUSH4 0x1ED7831C EQ PUSH3 0x11A JUMPI DUP1 PUSH4 0x2761A0C8 EQ PUSH3 0x13C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x118 PUSH3 0x1F6 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x124 PUSH3 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x1047 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x118 PUSH3 0x46E JUMP JUMPDEST PUSH3 0x150 PUSH3 0x62D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x10BC JUMP JUMPDEST PUSH3 0x124 PUSH3 0x77B JUMP JUMPDEST PUSH3 0x124 PUSH3 0x7DD JUMP JUMPDEST PUSH3 0x118 PUSH3 0x83F JUMP JUMPDEST PUSH3 0x187 PUSH3 0x8BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x119D JUMP JUMPDEST PUSH3 0x1A0 PUSH3 0x9A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x133 SWAP2 SWAP1 PUSH3 0x1254 JUMP JUMPDEST PUSH3 0x187 PUSH3 0xA7E JUMP JUMPDEST PUSH3 0x1A0 PUSH3 0xB68 JUMP JUMPDEST PUSH3 0x1CD PUSH3 0xC42 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x133 JUMP JUMPDEST PUSH3 0x124 PUSH3 0xD79 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH3 0x1CD SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x204 SWAP1 PUSH3 0x101D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x221 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1C DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xDA35A26F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x7 PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH4 0xDA35A26F SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x294 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD PUSH3 0x2A6 SWAP1 PUSH3 0x102B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x2C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1D DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xDA35A26F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x7 PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH4 0xDA35A26F SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x336 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1C SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH3 0x357 SWAP2 POP PUSH3 0x1039 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x393 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1E DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1C SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x8329585 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x8329585 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x404 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x14 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x464 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x445 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1C SLOAD PUSH1 0x1D SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x3659CFE6 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x4CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1C PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8329585 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x537 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1D PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF63DA92E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x5A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH3 0x62B PUSH1 0x1C PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA63B6CDE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x5FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x623 SWAP2 SWAP1 PUSH3 0x12C5 JUMP JUMPDEST PUSH1 0x5 PUSH3 0xDDB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1B DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x2 DUP8 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP8 MUL DUP2 ADD DUP8 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP6 SWAP2 SWAP5 DUP7 DUP2 ADD SWAP5 SWAP2 SWAP3 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x75A JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH3 0x6C6 SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x6F4 SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 ISZERO PUSH3 0x745 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x719 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x745 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x727 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x6A4 JUMP JUMPDEST POP POP POP POP DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x651 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x16 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x464 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x445 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x15 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x464 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x445 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1C SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x531DB66F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH3 0x62B SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA63B6CDE SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x88C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x8B2 SWAP2 SWAP1 PUSH3 0x12C5 JUMP JUMPDEST PUSH1 0x6 PUSH3 0xDDB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x19 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP8 MUL DUP2 ADD DUP8 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 SWAP2 SWAP4 DUP6 DUP4 ADD SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH3 0x98B JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH3 0x94C JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x8DE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x18 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH3 0x9EA SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xA18 SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 ISZERO PUSH3 0xA69 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xA3D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xA69 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xA4B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x9C8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1A DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x2 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP8 MUL DUP2 ADD DUP8 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 SWAP2 SWAP4 DUP6 DUP4 ADD SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH3 0xB4F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH3 0xB10 JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xAA2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x17 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH3 0x772 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH3 0xBAE SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xBDC SWAP1 PUSH3 0x12DF JUMP JUMPDEST DUP1 ISZERO PUSH3 0xC2D JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xC01 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xC2D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xC0F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xB8C JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0xC65 JUMPI POP PUSH1 0x7 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D EXTCODESIZE ISZERO PUSH3 0xD74 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH6 0x19985A5B1959 PUSH1 0xD2 SHL DUP3 DUP5 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP1 SWAP4 MSTORE PUSH1 0x0 SWAP3 SWAP1 SWAP2 PUSH3 0xCF6 SWAP2 PUSH32 0x667F9D70CA411D70EAD50D8D5C22070DAFC36AD75F3DCF5E7237B22ADE9AECC4 SWAP2 PUSH1 0x80 ADD PUSH3 0x131B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0xD12 SWAP2 PUSH3 0x134E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0xD51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0xD56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH3 0xD70 SWAP2 SWAP1 PUSH3 0x136C JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x13 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x464 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x445 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 DUP3 EQ PUSH3 0xF06 JUMPI PUSH32 0x41304FACD9323D75B11BCDD609CB38EFFFFDB05710F7CAF0E9B16C6D9D709F50 PUSH1 0x40 MLOAD PUSH3 0xE4E SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4572726F723A2061203D3D2062206E6F7420736174697366696564205B75696E PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x745D PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD DUP2 DUP2 MSTORE PUSH1 0xA DUP2 DUP4 ADD MSTORE PUSH10 0x808080808081319599D PUSH1 0xB2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xB2DE2FBE801A0DF6C0CBDDFD448BA3C41D48A040CA35C56C8196EF0FCAE721A8 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD DUP2 DUP2 MSTORE PUSH1 0xA DUP2 DUP4 ADD MSTORE PUSH10 0x808080808149A59DA1D PUSH1 0xB2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xB2DE2FBE801A0DF6C0CBDDFD448BA3C41D48A040CA35C56C8196EF0FCAE721A8 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG1 PUSH3 0xF06 PUSH3 0xF0A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D EXTCODESIZE ISZERO PUSH3 0x100C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH6 0x19985A5B1959 PUSH1 0xD2 SHL SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH32 0x70CA10BBD0DBFD9020A9F4B13402C16CB120705E0D1C0AEAB10FA353AE586FC4 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0xFA7 SWAP3 SWAP2 PUSH1 0x20 ADD PUSH3 0x131B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0xFC3 SWAP2 PUSH3 0x134E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x1002 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1007 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xB34 DUP1 PUSH3 0x1398 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0xBA0 DUP1 PUSH3 0x1ECC DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x40A DUP1 PUSH3 0x2A6C DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x108A JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x1063 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x10B3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1099 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x1190 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE DUP7 ADD MLOAD PUSH1 0x40 DUP8 DUP8 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD SWAP1 DUP8 ADD DUP2 SWAP1 MSTORE SWAP1 DUP8 ADD SWAP1 PUSH1 0x60 PUSH1 0x5 DUP3 SWAP1 SHL DUP9 ADD DUP2 ADD SWAP2 SWAP1 DUP9 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1178 JUMPI DUP10 DUP5 SUB PUSH1 0x5F NOT ADD DUP4 MSTORE DUP5 MLOAD DUP1 MLOAD DUP1 DUP7 MSTORE PUSH3 0x1158 DUP2 DUP15 DUP9 ADD DUP16 DUP6 ADD PUSH3 0x1096 JUMP JUMPDEST SWAP6 DUP13 ADD SWAP6 PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP5 SWAP1 SWAP5 ADD DUP12 ADD SWAP4 POP SWAP2 DUP11 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x112E JUMP JUMPDEST POP SWAP2 SWAP8 POP POP POP SWAP4 DUP7 ADD SWAP4 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x10E3 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x1245 JUMPI DUP10 DUP5 SUB PUSH1 0x3F NOT ADD DUP7 MSTORE DUP3 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP9 ADD MLOAD DUP9 DUP6 ADD DUP9 SWAP1 MSTORE DUP1 MLOAD DUP9 DUP7 ADD DUP2 SWAP1 MSTORE SWAP1 DUP10 ADD SWAP1 DUP4 SWAP1 PUSH1 0x60 DUP8 ADD SWAP1 JUMPDEST DUP1 DUP4 LT ISZERO PUSH3 0x122F JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP3 MSTORE SWAP3 DUP12 ADD SWAP3 PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP12 ADD SWAP1 PUSH3 0x1203 JUMP JUMPDEST POP SWAP8 DUP11 ADD SWAP8 SWAP6 POP POP POP SWAP2 DUP8 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x11C5 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x1190 JUMPI DUP8 DUP6 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE PUSH3 0x12A5 DUP2 DUP10 DUP10 ADD DUP11 DUP6 ADD PUSH3 0x1096 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x127B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x12D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x12F4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1315 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND DUP2 MSTORE DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH3 0x1340 DUP2 PUSH1 0x4 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x1096 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x1362 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x1096 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x137F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x1390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0xAF6 PUSH2 0x3E PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x403 ADD MSTORE DUP2 DUP2 PUSH2 0x42C ADD MSTORE PUSH2 0x572 ADD MSTORE PUSH2 0xAF6 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0xA63B6CDE EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xDA35A26F EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8329585 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x106 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x1F6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xC8 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xAB PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x905 JUMP JUMPDEST PUSH2 0x257 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x112 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x293 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF3 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFD SWAP2 SWAP1 PUSH2 0x9EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA1E JUMP JUMPDEST PUSH2 0x2A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D4 JUMP JUMPDEST PUSH2 0x3BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SLOAD GT PUSH2 0x23E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B9BC81CDB1A58D95CC81B19599D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP3 DUP3 SLOAD PUSH2 0x250 SWAP2 SWAP1 PUSH2 0xA4A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH2 0x25F PUSH2 0x3F8 JUMP JUMPDEST PUSH2 0x268 DUP3 PUSH2 0x49D JUMP JUMPDEST PUSH2 0x272 DUP3 DUP3 PUSH2 0x4A5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x280 PUSH2 0x567 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x2A5 PUSH1 0x0 PUSH2 0x60B JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x2ED JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x30A JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x318 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x336 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x360 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x0 DUP8 SWAP1 SSTORE PUSH2 0x36E DUP7 PUSH2 0x67C JUMP JUMPDEST DUP4 ISZERO PUSH2 0x3B4 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3C5 PUSH2 0x5B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3EF JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0x60B JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x47F JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x473 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC8 PUSH2 0x5B0 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4FF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4FC SWAP2 DUP2 ADD SWAP1 PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x527 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH2 0x562 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH2 0x5E2 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x684 PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0x72C JUMP JUMPDEST PUSH2 0x696 DUP3 PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x6DB JUMPI PUSH2 0x562 DUP3 DUP3 PUSH2 0x799 JUMP JUMPDEST PUSH2 0x272 PUSH2 0x811 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C5 PUSH2 0x6E3 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x76A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xAA1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x7B6 SWAP2 SWAP1 PUSH2 0xA84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x806 DUP6 DUP4 DUP4 PUSH2 0x830 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x845 JUMPI PUSH2 0x840 DUP3 PUSH2 0x88F JUMP JUMPDEST PUSH2 0x888 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x85C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x885 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x235 JUMP JUMPDEST POP DUP1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x89F JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x888 DUP3 PUSH2 0x8B8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x921 DUP4 PUSH2 0x8B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x93E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x964 JUMPI PUSH2 0x964 PUSH2 0x8EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x98C JUMPI PUSH2 0x98C PUSH2 0x8EF JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x9A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9E2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9CA JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA0A DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x9C7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xA41 PUSH1 0x20 DUP5 ADD PUSH2 0x8B8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x80B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xA96 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x9C7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA26469706673582212202A 0xE2 SWAP12 0xD1 PUSH0 0xB0 DUP15 0x2D 0xC2 PUSH13 0xE5590B0FE0FDE1CDEA4E41D188 PUSH15 0x3788720A1B23C55664736F6C634300 ADDMOD EQ STOP CALLER PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0xB62 PUSH2 0x3E PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x454 ADD MSTORE DUP2 DUP2 PUSH2 0x47D ADD MSTORE PUSH2 0x5C3 ADD MSTORE PUSH2 0xB62 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA63B6CDE GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xA63B6CDE EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0xDA35A26F EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0xF63DA92E EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0xF64D9978 EQ PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8329585 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x131 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x235 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0xDE CALLDATASIZE PUSH1 0x4 PUSH2 0x925 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC1 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x956 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x109 PUSH2 0x2B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x2D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x113 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x109 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BF PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x113 SWAP2 SWAP1 PUSH2 0xA3C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x2E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x925 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x437 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 PUSH2 0x109 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SLOAD GT PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B9BC81CDB1A58D95CC81B19599D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP3 DUP3 SLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH2 0x29E PUSH2 0x449 JUMP JUMPDEST PUSH2 0x2A7 DUP3 PUSH2 0x4EE JUMP JUMPDEST PUSH2 0x2B1 DUP3 DUP3 PUSH2 0x4F6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BF PUSH2 0x5B8 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x601 JUMP JUMPDEST PUSH2 0x2E4 PUSH1 0x0 PUSH2 0x65C JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x32C JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x349 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x357 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x375 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x39F JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x0 DUP8 SWAP1 SSTORE PUSH2 0x3AD DUP7 PUSH2 0x6CD JUMP JUMPDEST DUP4 ISZERO PUSH2 0x3F3 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x404 PUSH2 0x601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x42E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH2 0xDE DUP2 PUSH2 0x65C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP3 DUP3 SLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0xAC4 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x4D0 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4C4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDE PUSH2 0x601 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x550 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x54D SWAP2 DUP2 ADD SWAP1 PUSH2 0xAD7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x578 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x5A9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH2 0x5B3 DUP4 DUP4 PUSH2 0x6DE JUMP JUMPDEST POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH2 0x633 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x6D5 PUSH2 0x734 JUMP JUMPDEST PUSH2 0xDE DUP2 PUSH2 0x77D JUMP JUMPDEST PUSH2 0x6E7 DUP3 PUSH2 0x785 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x72C JUMPI PUSH2 0x5B3 DUP3 DUP3 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x2B1 PUSH2 0x862 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x404 PUSH2 0x734 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x7BB JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xB0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x807 SWAP2 SWAP1 PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x847 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x857 DUP6 DUP4 DUP4 PUSH2 0x881 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x896 JUMPI PUSH2 0x891 DUP3 PUSH2 0x8E0 JUMP JUMPDEST PUSH2 0x8D9 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x8AD JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x274 JUMP JUMPDEST POP DUP1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x8F0 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x937 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8D9 DUP3 PUSH2 0x909 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x972 DUP4 PUSH2 0x909 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x98F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9B5 JUMPI PUSH2 0x9B5 PUSH2 0x940 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x9DD JUMPI PUSH2 0x9DD PUSH2 0x940 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x9F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA33 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA1B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xA5B DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xA92 PUSH1 0x20 DUP5 ADD PUSH2 0x909 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x85C JUMPI PUSH2 0x85C PUSH2 0xA9B JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x85C JUMPI PUSH2 0x85C PUSH2 0xA9B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xB02 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA18 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220F0 PUSH0 BALANCE PUSH30 0xEFBF06949FA2A28D86264FF05E92C9F5F92F7D7F85283E05A8C6C61F6473 PUSH16 0x6C634300081400336080604052604051 PUSH2 0x40A CODESIZE SUB DUP1 PUSH2 0x40A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0x268 JUMP JUMPDEST PUSH2 0x2C DUP3 DUP3 PUSH2 0x33 JUMP JUMPDEST POP POP PUSH2 0x352 JUMP JUMPDEST PUSH2 0x3C DUP3 PUSH2 0x92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x86 JUMPI PUSH2 0x81 DUP3 DUP3 PUSH2 0x10E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x8E PUSH2 0x185 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0xCD JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x12B SWAP2 SWAP1 PUSH2 0x336 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x166 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x17C DUP6 DUP4 DUP4 PUSH2 0x1A6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x1BB JUMPI PUSH2 0x1B6 DUP3 PUSH2 0x205 JUMP JUMPDEST PUSH2 0x1FE JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x1D2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x1FB JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xC4 JUMP JUMPDEST POP DUP1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x215 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x247 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2D5 JUMPI PUSH2 0x2D5 PUSH2 0x22E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2FD JUMPI PUSH2 0x2FD PUSH2 0x22E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x327 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x244 JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x348 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x244 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xAA DUP1 PUSH2 0x360 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0xC JUMP JUMPDEST STOP JUMPDEST PUSH1 0x18 PUSH1 0x14 PUSH1 0x1A JUMP JUMPDEST PUSH1 0x51 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4C PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH1 0x6F JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR 0xBF DUP12 0xB7 0xD7 DUP13 0xBC PUSH14 0xDF7B4AC7072E0C59CCB55BFAD849 0xEB CHAINID PUSH17 0xA27103451D39A864736F6C634300081400 CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xE8 SWAP10 CODECOPY 0xE5 0x22 0xC9 DUP4 0xE6 0xEE TIMESTAMP KECCAK256 DUP11 SWAP14 0xD6 0xC6 PUSH17 0xA8C7F78FB0D648CED5F602EF2243FF6473 PUSH16 0x6C634300081400330000000000000000 ",
              "sourceMap": "202:1432:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;369:339;;;:::i;:::-;;2531:136:8;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;992:188:33;;;:::i;3463:153:8:-;;;:::i;:::-;;;;;;;:::i;3320:135::-;;;:::i;3013:143::-;;;:::i;716:72:33:-;;;:::i;2825:180:8:-;;;:::i;:::-;;;;;;;:::i;2675:142::-;;;:::i;:::-;;;;;;;:::i;3164:148::-;;;:::i;2228:143::-;;;:::i;1865:600:2:-;;;:::i;:::-;;;5592:14:34;;5585:22;5567:41;;5555:2;5540:18;1865:600:2;5427:187:34;2379:144:8;;;:::i;1609:26:2:-;;;;;;;;;369:339:33;412:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;404:5:33;:19;;-1:-1:-1;;;;;;404:19:33;-1:-1:-1;;;;;404:19:33;;;;;;;;;434:34;;-1:-1:-1;;;434:34:33;;451:1;434:34;;;5801:25:34;462:4:33;5842:18:34;;;5835:60;434:16:33;;5774:18:34;;434:34:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;489:13;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;479:7:33;:23;;-1:-1:-1;;;;;;479:23:33;-1:-1:-1;;;;;479:23:33;;;;;;;;;513:36;;-1:-1:-1;;;513:36:33;;532:1;513:36;;;5801:25:34;543:4:33;5842:18:34;;;5835:60;513:18:33;;5774::34;;513:36:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;593:5:33;;568:36;;-1:-1:-1;;;;;593:5:33;;;;-1:-1:-1;568:36:33;;-1:-1:-1;568:36:33;:::i;:::-;-1:-1:-1;;;;;6135:32:34;;;6117:51;;6204:2;6199;6184:18;;6177:30;;;-1:-1:-1;6223:18:34;;;6216:29;6277:2;6262:18;568:36:33;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;560:5:33;:44;;-1:-1:-1;;;;;;560:44:33;-1:-1:-1;;;;;560:44:33;;;;;;682:5;;:16;;;-1:-1:-1;;;682:16:33;;;;:5;;;;;:14;;:16;;;;;-1:-1:-1;;682:16:33;;;;;;;-1:-1:-1;682:5:33;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;369:339::o;2531:136:8:-;2578:33;2643:16;2624:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2624:35:8;;;;;;;;;;;;;;;;;;;;;;;2531:136;:::o;992:188:33:-;1037:5;;1061:7;;1037:33;;-1:-1:-1;;;1037:33:33;;-1:-1:-1;;;;;1061:7:33;;;1037:33;;;6437:51:34;1037:5:33;;;:15;;6410:18:34;;1037:33:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1081:5;;;;;;;;;-1:-1:-1;;;;;1081:5:33;-1:-1:-1;;;;;1081:14:33;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1111:7;;;;;;;;;-1:-1:-1;;;;;1111:7:33;-1:-1:-1;;;;;1111:19:33;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1143:27;1152:5;;;;;;;;;-1:-1:-1;;;;;1152:5:33;-1:-1:-1;;;;;1152:12:33;;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1168:1;1143:8;:27::i;:::-;992:188::o;3463:153:8:-;3512:42;3589:19;3567:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3567:41:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3463:153;:::o;3320:135::-;3366:33;3431:16;3412:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3412:35:8;;;;;;;;;;;;;;;;;;;;;;3320:135;:::o;3013:143::-;3061:35;3130:18;3109:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3109:39:8;;;;;;;;;;;;;;;;;;;;;;3013:143;:::o;716:72:33:-;762:5;;:14;;;-1:-1:-1;;;762:14:33;;;;753:27;;-1:-1:-1;;;;;762:5:33;;:12;;:14;;;;;;;;;;;;;;:5;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;778:1;753:8;:27::i;2825:180:8:-;2881:48;2971:26;2942:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2942:55:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2942:55:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2675:142;2723:34;2791:18;2770:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3164:148;3212:40;3286:18;3265:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3265:39:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3265:39:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2228:143;2277:34;2345:18;2324:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1865:600:2;1920:7;;1899:4;;1920:7;;;;;1916:542;;;-1:-1:-1;1951:7:2;;;;;;;;1865:600::o;1916:542::-;1991:17;3077:42;3065:55;3148:16;2031:382;;2251:43;;;1712:64;2251:43;;;7247:51:34;;;-1:-1:-1;;;7314:18:34;;;7307:34;2251:43:2;;;;;;;;;7220:18:34;;;2251:43:2;;;-1:-1:-1;;1712:64:2;;2139:178;;2189:34;;2139:178;;;:::i;:::-;;;;-1:-1:-1;;2139:178:2;;;;;;;;;;2099:237;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2072:264;;;2381:7;2370:27;;;;;;;;;;;;:::i;:::-;2355:42;;2053:360;2031:382;2434:12;1865:600;-1:-1:-1;1865:600:2:o;2379:144:8:-;2428:35;2497:18;2476:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2476:39:8;;;;;;;;;;;;;;;;;;;;;;2379:144;:::o;5365:269:2:-;5428:1;5423;:6;5419:208;;5451:41;;;;;8517:2:34;8499:21;;;8556:2;8536:18;;;8529:30;8595:34;8590:2;8575:18;;8568:62;-1:-1:-1;;;8661:2:34;8646:18;;8639:32;8703:3;8688:19;;8315:398;5451:41:2;;;;;;;;5512:31;;;8930:21:34;;;8987:2;8967:18;;;8960:30;-1:-1:-1;;;9021:2:34;9006:18;;8999:40;9106:4;9091:20;;9084:36;;;5512:31:2;;;;;;;9071:3:34;5512:31:2;;;5563;;;9343:21:34;;;9400:2;9380:18;;;9373:30;-1:-1:-1;;;9434:2:34;9419:18;;9412:40;9519:4;9504:20;;9497:36;;;5563:31:2;;;;;;;9484:3:34;5563:31:2;;;5609:6;:4;:6::i;:::-;5365:269;;:::o;2473:443::-;3077:42;3065:55;3148:16;2517:367;;2721:67;;;1712:64;2721:67;;;9746:51:34;;;-1:-1:-1;;;9813:18:34;;;9806:34;;;;2781:4:2;9856:18:34;;;9849:34;2555:11:2;;1712:64;2654:43;;9719:18:34;;2721:67:2;;;-1:-1:-1;;2721:67:2;;;;;;;;;;2608:199;;;2721:67;2608:199;;:::i;:::-;;;;-1:-1:-1;;2608:199:2;;;;;;;;;;2572:250;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2517:367:2;2894:7;:14;;-1:-1:-1;;2894:14:2;;;;;2473:443::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::o;14:658:34:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:195;465:6;462:1;459:13;451:195;;;530:13;;-1:-1:-1;;;;;526:39:34;514:52;;621:15;;;;586:12;;;;562:1;480:9;451:195;;;-1:-1:-1;663:3:34;;14:658;-1:-1:-1;;;;;;14:658:34:o;677:250::-;762:1;772:113;786:6;783:1;780:13;772:113;;;862:11;;;856:18;843:11;;;836:39;808:2;801:10;772:113;;;-1:-1:-1;;919:1:34;901:16;;894:27;677:250::o;932:1899::-;1136:4;1165:2;1205;1194:9;1190:18;1235:2;1224:9;1217:21;1258:6;1293;1287:13;1324:6;1316;1309:22;1362:2;1351:9;1347:18;1340:25;;1424:2;1414:6;1411:1;1407:14;1396:9;1392:30;1388:39;1374:53;;1462:2;1454:6;1450:15;1483:1;1493:1309;1507:6;1504:1;1501:13;1493:1309;;;-1:-1:-1;;1572:22:34;;;1568:36;1556:49;;1628:13;;1715:9;;-1:-1:-1;;;;;1711:35:34;1696:51;;1786:11;;1780:18;1680:2;1818:15;;;1811:27;;;1899:19;;1668:15;;;1931:24;;;2111:21;;;;1978:2;2064:1;2060:16;;;2048:29;;2044:38;;;2002:15;;;;2156:1;2170:523;2186:8;2181:3;2178:17;2170:523;;;2267:19;;;-1:-1:-1;;2263:33:34;2249:48;;2324:15;;2372:9;;2398:24;;;2439:74;2372:9;2487:15;;;2474:11;;;2439:74;:::i;:::-;2622:17;;;;2583:2;2560:17;-1:-1:-1;;2556:31:34;2544:44;;;;2540:53;;;-1:-1:-1;2665:14:34;;;;2214:1;2205:11;2170:523;;;-1:-1:-1;2716:6:34;;-1:-1:-1;;;2780:12:34;;;;-1:-1:-1;2745:15:34;;;;1529:1;1522:9;1493:1309;;;-1:-1:-1;2819:6:34;;932:1899;-1:-1:-1;;;;;;;932:1899:34:o;2836:1567::-;3038:4;3067:2;3107;3096:9;3092:18;3137:2;3126:9;3119:21;3160:6;3195;3189:13;3226:6;3218;3211:22;3252:2;3242:12;;3285:2;3274:9;3270:18;3263:25;;3347:2;3337:6;3334:1;3330:14;3319:9;3315:30;3311:39;3385:2;3377:6;3373:15;3406:1;3427;3437:937;3453:6;3448:3;3445:15;3437:937;;;3522:22;;;-1:-1:-1;;3518:36:34;3506:49;;3578:13;;3665:9;;-1:-1:-1;;;;;3661:35:34;3646:51;;3736:11;;3730:18;3768:15;;;3761:27;;;3849:19;;3618:15;;;3881:24;;;3971:21;;;;4016:1;;3939:2;3927:15;;;4030:236;4046:8;4041:3;4038:17;4030:236;;;4127:15;;-1:-1:-1;;;;;;4123:42:34;4109:57;;4235:17;;;;4074:1;4065:11;;;;;4192:14;;;;4030:236;;;-1:-1:-1;4352:12:34;;;;4289:5;-1:-1:-1;;;4317:15:34;;;;3479:1;3470:11;3437:937;;;-1:-1:-1;4391:6:34;;2836:1567;-1:-1:-1;;;;;;;;;2836:1567:34:o;4408:1014::-;4570:4;4599:2;4639;4628:9;4624:18;4669:2;4658:9;4651:21;4692:6;4727;4721:13;4758:6;4750;4743:22;4796:2;4785:9;4781:18;4774:25;;4858:2;4848:6;4845:1;4841:14;4830:9;4826:30;4822:39;4808:53;;4896:2;4888:6;4884:15;4917:1;4927:466;4941:6;4938:1;4935:13;4927:466;;;5006:22;;;-1:-1:-1;;5002:36:34;4990:49;;5062:13;;5104:9;;5126:24;;;5163:74;5104:9;5211:15;;;5198:11;;;5163:74;:::i;:::-;5303:2;5280:17;-1:-1:-1;;5276:31:34;5264:44;;;;5260:53;;;-1:-1:-1;5371:12:34;;;;5336:15;;;;4963:1;4956:9;4927:466;;6499:184;6569:6;6622:2;6610:9;6601:7;6597:23;6593:32;6590:52;;;6638:1;6635;6628:12;6590:52;-1:-1:-1;6661:16:34;;6499:184;-1:-1:-1;6499:184:34:o;6688:380::-;6767:1;6763:12;;;;6810;;;6831:61;;6885:4;6877:6;6873:17;6863:27;;6831:61;6938:2;6930:6;6927:14;6907:18;6904:38;6901:161;;6984:10;6979:3;6975:20;6972:1;6965:31;7019:4;7016:1;7009:15;7047:4;7044:1;7037:15;6901:161;;6688:380;;;:::o;7352:384::-;-1:-1:-1;;;;;;7537:33:34;;7525:46;;7594:13;;7507:3;;7616:74;7594:13;7679:1;7670:11;;7663:4;7651:17;;7616:74;:::i;:::-;7710:16;;;;7728:1;7706:24;;7352:384;-1:-1:-1;;;7352:384:34:o;7741:287::-;7870:3;7908:6;7902:13;7924:66;7983:6;7978:3;7971:4;7963:6;7959:17;7924:66;:::i;:::-;8006:16;;;;;7741:287;-1:-1:-1;;7741:287:34:o;8033:277::-;8100:6;8153:2;8141:9;8132:7;8128:23;8124:32;8121:52;;;8169:1;8166;8159:12;8121:52;8201:9;8195:16;8254:5;8247:13;8240:21;8233:5;8230:32;8220:60;;8276:1;8273;8266:12;8220:60;8299:5;8033:277;-1:-1:-1;;;8033:277:34:o",
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:9891:34",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:34",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "165:507:34",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "175:12:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "185:2:34",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "179:2:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "196:32:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "214:9:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "225:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "210:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "210:18:34"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nodeType": "YulTypedName",
                                  "src": "200:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "244:9:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "255:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "237:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "237:21:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "237:21:34"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "267:17:34",
                              "value": {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "278:6:34"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulTypedName",
                                  "src": "271:3:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "293:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "313:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "307:5:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "307:13:34"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "297:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "336:6:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "344:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "329:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "329:22:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "329:22:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "360:25:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "371:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "382:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "367:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "367:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "360:3:34"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "394:29:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "412:6:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "420:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "408:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "408:15:34"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "398:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "432:10:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "441:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "436:1:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "500:146:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "521:3:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "srcPtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "536:6:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "530:5:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "530:13:34"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "553:3:34",
                                                      "type": "",
                                                      "value": "160"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "558:1:34",
                                                      "type": "",
                                                      "value": "1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "549:3:34"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "549:11:34"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "562:1:34",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "545:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "545:19:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "526:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "526:39:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "514:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "514:52:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "514:52:34"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "579:19:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "590:3:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "595:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "586:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "586:12:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "579:3:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "611:25:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "625:6:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "633:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "621:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "621:15:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "611:6:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "462:1:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "465:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "459:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "459:13:34"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "473:18:34",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "475:14:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "484:1:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "487:1:34",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "480:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "480:9:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "475:1:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "455:3:34",
                                "statements": []
                              },
                              "src": "451:195:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "655:11:34",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "663:3:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "655:4:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "134:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "145:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "156:4:34",
                            "type": ""
                          }
                        ],
                        "src": "14:658:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "743:184:34",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "753:10:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "762:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "757:1:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "822:63:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "847:3:34"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "852:1:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "843:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "843:11:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "866:3:34"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "871:1:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "862:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "862:11:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "856:5:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "856:18:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "836:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "836:39:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "836:39:34"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "783:1:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "786:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "780:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "780:13:34"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "794:19:34",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "796:15:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "805:1:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "808:2:34",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "801:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "801:10:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "796:1:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "776:3:34",
                                "statements": []
                              },
                              "src": "772:113:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dst",
                                        "nodeType": "YulIdentifier",
                                        "src": "905:3:34"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "910:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "901:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "901:16:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "919:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "894:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "894:27:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "894:27:34"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory_with_cleanup",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "src",
                            "nodeType": "YulTypedName",
                            "src": "721:3:34",
                            "type": ""
                          },
                          {
                            "name": "dst",
                            "nodeType": "YulTypedName",
                            "src": "726:3:34",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "731:6:34",
                            "type": ""
                          }
                        ],
                        "src": "677:250:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1145:1686:34",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1155:12:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1165:2:34",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "1159:2:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1176:32:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1194:9:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1205:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1190:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1190:18:34"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nodeType": "YulTypedName",
                                  "src": "1180:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1224:9:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1235:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1217:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1217:21:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1217:21:34"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1247:17:34",
                              "value": {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "1258:6:34"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulTypedName",
                                  "src": "1251:3:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1273:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1293:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1287:5:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1287:13:34"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "1277:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1316:6:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1324:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1309:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1309:22:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1309:22:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1340:25:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1351:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1362:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1347:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1347:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "1340:3:34"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1374:53:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1396:9:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1411:1:34",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "1414:6:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1407:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1407:14:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1392:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1392:30:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1424:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1388:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1388:39:34"
                              },
                              "variables": [
                                {
                                  "name": "tail_2",
                                  "nodeType": "YulTypedName",
                                  "src": "1378:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1436:29:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1454:6:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1462:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1450:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1450:15:34"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "1440:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1474:10:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1483:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "1478:1:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1542:1260:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "1563:3:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tail_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1576:6:34"
                                                },
                                                {
                                                  "name": "headStart",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1584:9:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "1572:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1572:22:34"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "1600:2:34",
                                                  "type": "",
                                                  "value": "63"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "1596:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1596:7:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1568:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1568:36:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1556:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1556:49:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1556:49:34"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1618:23:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1634:6:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1628:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1628:13:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulTypedName",
                                        "src": "1622:2:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1654:29:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1672:6:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1680:2:34",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1668:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1668:15:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "tail_3",
                                        "nodeType": "YulTypedName",
                                        "src": "1658:6:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1703:6:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1721:2:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "1715:5:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1715:9:34"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "1734:3:34",
                                                      "type": "",
                                                      "value": "160"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "1739:1:34",
                                                      "type": "",
                                                      "value": "1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "1730:3:34"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "1730:11:34"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "1743:1:34",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "1726:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1726:19:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "1711:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1711:35:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1696:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1696:51:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1696:51:34"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1760:38:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "1790:2:34"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "1794:2:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1786:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1786:11:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1780:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1780:18:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulTypedName",
                                        "src": "1764:12:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "1822:6:34"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "1830:2:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1818:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1818:15:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1835:2:34",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1811:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1811:27:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1811:27:34"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1851:19:34",
                                    "value": {
                                      "name": "tail_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1864:6:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "pos_1",
                                        "nodeType": "YulTypedName",
                                        "src": "1855:5:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1883:35:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "memberValue0",
                                          "nodeType": "YulIdentifier",
                                          "src": "1905:12:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1899:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1899:19:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "length_1",
                                        "nodeType": "YulTypedName",
                                        "src": "1887:8:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "tail_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "1938:6:34"
                                        },
                                        {
                                          "name": "length_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1946:8:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1931:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1931:24:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1931:24:34"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1968:12:34",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1978:2:34",
                                      "type": "",
                                      "value": "96"
                                    },
                                    "variables": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulTypedName",
                                        "src": "1972:2:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1993:24:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "2006:6:34"
                                        },
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "2014:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2002:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2002:15:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1993:5:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2030:52:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "2052:6:34"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2064:1:34",
                                                  "type": "",
                                                  "value": "5"
                                                },
                                                {
                                                  "name": "length_1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2067:8:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "2060:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2060:16:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2048:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2048:29:34"
                                        },
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "2079:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2044:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2044:38:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "tail_4",
                                        "nodeType": "YulTypedName",
                                        "src": "2034:6:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2095:37:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "memberValue0",
                                          "nodeType": "YulIdentifier",
                                          "src": "2115:12:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2129:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2111:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2111:21:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "srcPtr_1",
                                        "nodeType": "YulTypedName",
                                        "src": "2099:8:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2145:12:34",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2156:1:34",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i_1",
                                        "nodeType": "YulTypedName",
                                        "src": "2149:3:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2231:462:34",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "pos_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2256:5:34"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "tail_4",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2271:6:34"
                                                      },
                                                      {
                                                        "name": "tail_2",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2279:6:34"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "sub",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2267:3:34"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2267:19:34"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "kind": "number",
                                                        "nodeType": "YulLiteral",
                                                        "src": "2292:2:34",
                                                        "type": "",
                                                        "value": "95"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2288:3:34"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2288:7:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2263:3:34"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2263:33:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2249:6:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2249:48:34"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2249:48:34"
                                        },
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "2314:25:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcPtr_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2330:8:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2324:5:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2324:15:34"
                                          },
                                          "variables": [
                                            {
                                              "name": "_4",
                                              "nodeType": "YulTypedName",
                                              "src": "2318:2:34",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "2356:25:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "_4",
                                                "nodeType": "YulIdentifier",
                                                "src": "2378:2:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2372:5:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2372:9:34"
                                          },
                                          "variables": [
                                            {
                                              "name": "length_2",
                                              "nodeType": "YulTypedName",
                                              "src": "2360:8:34",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "tail_4",
                                                "nodeType": "YulIdentifier",
                                                "src": "2405:6:34"
                                              },
                                              {
                                                "name": "length_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "2413:8:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2398:6:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2398:24:34"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2398:24:34"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "_4",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2478:2:34"
                                                  },
                                                  {
                                                    "name": "_1",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2482:2:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2474:3:34"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2474:11:34"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "tail_4",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2491:6:34"
                                                  },
                                                  {
                                                    "name": "_1",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2499:2:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2487:3:34"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2487:15:34"
                                              },
                                              {
                                                "name": "length_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "2504:8:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "copy_memory_to_memory_with_cleanup",
                                              "nodeType": "YulIdentifier",
                                              "src": "2439:34:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2439:74:34"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2439:74:34"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2530:63:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "tail_4",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2548:6:34"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "name": "length_2",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "2564:8:34"
                                                          },
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "2574:2:34",
                                                            "type": "",
                                                            "value": "31"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "add",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2560:3:34"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2560:17:34"
                                                      },
                                                      {
                                                        "arguments": [
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "2583:2:34",
                                                            "type": "",
                                                            "value": "31"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "not",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2579:3:34"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2579:7:34"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "and",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2556:3:34"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2556:31:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2544:3:34"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2544:44:34"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2590:2:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2540:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2540:53:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "tail_4",
                                              "nodeType": "YulIdentifier",
                                              "src": "2530:6:34"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2610:29:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcPtr_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2626:8:34"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2636:2:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2622:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2622:17:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcPtr_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "2610:8:34"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2656:23:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "pos_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2669:5:34"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2676:2:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2665:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2665:14:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "pos_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "2656:5:34"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2181:3:34"
                                        },
                                        {
                                          "name": "length_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2186:8:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "2178:2:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2178:17:34"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "2196:22:34",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2198:18:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2209:3:34"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2214:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2205:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2205:11:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "2198:3:34"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "2174:3:34",
                                      "statements": []
                                    },
                                    "src": "2170:523:34"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2706:16:34",
                                    "value": {
                                      "name": "tail_4",
                                      "nodeType": "YulIdentifier",
                                      "src": "2716:6:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "tail_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "2706:6:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2735:25:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2749:6:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2757:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2745:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2745:15:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2735:6:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2773:19:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "2784:3:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2789:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2780:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2780:12:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "2773:3:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1504:1:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1507:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1501:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1501:13:34"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "1515:18:34",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1517:14:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "1526:1:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1529:1:34",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1522:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1522:9:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "1517:1:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "1497:3:34",
                                "statements": []
                              },
                              "src": "1493:1309:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2811:14:34",
                              "value": {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "2819:6:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "2811:4:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_struct$_FuzzInterface_$7572_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FuzzInterface_$7572_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1114:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1125:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1136:4:34",
                            "type": ""
                          }
                        ],
                        "src": "932:1899:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3047:1356:34",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3057:12:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3067:2:34",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "3061:2:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3078:32:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3096:9:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3107:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3092:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3092:18:34"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nodeType": "YulTypedName",
                                  "src": "3082:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3126:9:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3137:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3119:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3119:21:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3119:21:34"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3149:17:34",
                              "value": {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "3160:6:34"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulTypedName",
                                  "src": "3153:3:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3175:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3195:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3189:5:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3189:13:34"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "3179:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3218:6:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3226:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3211:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3211:22:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3211:22:34"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3242:12:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3252:2:34",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nodeType": "YulTypedName",
                                  "src": "3246:2:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3263:25:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3274:9:34"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3285:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3270:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3270:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "3263:3:34"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3297:53:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3319:9:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3334:1:34",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "3337:6:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "3330:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3330:14:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3315:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3315:30:34"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3347:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3311:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3311:39:34"
                              },
                              "variables": [
                                {
                                  "name": "tail_2",
                                  "nodeType": "YulTypedName",
                                  "src": "3301:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3359:29:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3377:6:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3385:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3373:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3373:15:34"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "3363:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3397:10:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3406:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "3401:1:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3416:12:34",
                              "value": {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3427:1:34"
                              },
                              "variables": [
                                {
                                  "name": "i_1",
                                  "nodeType": "YulTypedName",
                                  "src": "3420:3:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3492:882:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3513:3:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tail_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3526:6:34"
                                                },
                                                {
                                                  "name": "headStart",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3534:9:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "3522:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3522:22:34"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3550:2:34",
                                                  "type": "",
                                                  "value": "63"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "3546:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3546:7:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3518:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3518:36:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3506:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3506:49:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3506:49:34"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3568:23:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "3584:6:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3578:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3578:13:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulTypedName",
                                        "src": "3572:2:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3604:29:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "3622:6:34"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "3630:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3618:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3618:15:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "tail_3",
                                        "nodeType": "YulTypedName",
                                        "src": "3608:6:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "3653:6:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "_3",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3671:2:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "3665:5:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3665:9:34"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "3684:3:34",
                                                      "type": "",
                                                      "value": "160"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "3689:1:34",
                                                      "type": "",
                                                      "value": "1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3680:3:34"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "3680:11:34"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3693:1:34",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "3676:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3676:19:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "3661:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3661:35:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3646:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3646:51:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3646:51:34"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3710:38:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "3740:2:34"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "3744:2:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3736:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3736:11:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3730:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3730:18:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "memberValue0",
                                        "nodeType": "YulTypedName",
                                        "src": "3714:12:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "3772:6:34"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "3780:2:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3768:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3768:15:34"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "3785:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3761:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3761:27:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3761:27:34"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3801:19:34",
                                    "value": {
                                      "name": "tail_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "3814:6:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "pos_1",
                                        "nodeType": "YulTypedName",
                                        "src": "3805:5:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3833:35:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "memberValue0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3855:12:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3849:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3849:19:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "length_1",
                                        "nodeType": "YulTypedName",
                                        "src": "3837:8:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "tail_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "3888:6:34"
                                        },
                                        {
                                          "name": "length_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3896:8:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3881:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3881:24:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3881:24:34"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3918:24:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "3931:6:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3939:2:34",
                                          "type": "",
                                          "value": "96"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3927:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3927:15:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3918:5:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3955:37:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "memberValue0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3975:12:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3989:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3971:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3971:21:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "srcPtr_1",
                                        "nodeType": "YulTypedName",
                                        "src": "3959:8:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4005:12:34",
                                    "value": {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "4016:1:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "i_2",
                                        "nodeType": "YulTypedName",
                                        "src": "4009:3:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "4091:175:34",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "pos_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "4116:5:34"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "srcPtr_1",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "4133:8:34"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "mload",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "4127:5:34"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "4127:15:34"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "kind": "number",
                                                        "nodeType": "YulLiteral",
                                                        "src": "4148:3:34",
                                                        "type": "",
                                                        "value": "224"
                                                      },
                                                      {
                                                        "kind": "number",
                                                        "nodeType": "YulLiteral",
                                                        "src": "4153:10:34",
                                                        "type": "",
                                                        "value": "0xffffffff"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "shl",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "4144:3:34"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "4144:20:34"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4123:3:34"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4123:42:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "4109:6:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4109:57:34"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "4109:57:34"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4183:23:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "pos_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "4196:5:34"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "4203:2:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "4192:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4192:14:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "pos_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "4183:5:34"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4223:29:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcPtr_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "4239:8:34"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "4249:2:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "4235:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4235:17:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcPtr_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "4223:8:34"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "4041:3:34"
                                        },
                                        {
                                          "name": "length_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4046:8:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "4038:2:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4038:17:34"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "4056:22:34",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4058:18:34",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "4069:3:34"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4074:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "4065:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4065:11:34"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "4058:3:34"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "4034:3:34",
                                      "statements": []
                                    },
                                    "src": "4030:236:34"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4279:15:34",
                                    "value": {
                                      "name": "pos_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4289:5:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "tail_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4279:6:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4307:25:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "4321:6:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4329:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4317:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4317:15:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "4307:6:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4345:19:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4356:3:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4361:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4352:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4352:12:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "4345:3:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3448:3:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3453:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3445:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3445:15:34"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "3461:22:34",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3463:18:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3474:3:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3479:1:34",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3470:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3470:11:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3463:3:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "3441:3:34",
                                "statements": []
                              },
                              "src": "3437:937:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4383:14:34",
                              "value": {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "4391:6:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4383:4:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_struct$_FuzzSelector_$7566_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FuzzSelector_$7566_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3016:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3027:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "3038:4:34",
                            "type": ""
                          }
                        ],
                        "src": "2836:1567:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4579:843:34",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4589:12:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4599:2:34",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "4593:2:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4610:32:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4628:9:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4639:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4624:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4624:18:34"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nodeType": "YulTypedName",
                                  "src": "4614:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4658:9:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4669:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4651:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4651:21:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4651:21:34"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4681:17:34",
                              "value": {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "4692:6:34"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulTypedName",
                                  "src": "4685:3:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4707:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4727:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4721:5:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4721:13:34"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "4711:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4750:6:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4758:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4743:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4743:22:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4743:22:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4774:25:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4785:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4796:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4781:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4781:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "4774:3:34"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4808:53:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4830:9:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4845:1:34",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "4848:6:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "4841:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4841:14:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4826:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4826:30:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4858:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4822:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4822:39:34"
                              },
                              "variables": [
                                {
                                  "name": "tail_2",
                                  "nodeType": "YulTypedName",
                                  "src": "4812:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4870:29:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4888:6:34"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4896:2:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4884:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4884:15:34"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "4874:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4908:10:34",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4917:1:34",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "4912:1:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4976:417:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4997:3:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tail_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5010:6:34"
                                                },
                                                {
                                                  "name": "headStart",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5018:9:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "5006:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5006:22:34"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "5034:2:34",
                                                  "type": "",
                                                  "value": "63"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "5030:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5030:7:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5002:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5002:36:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4990:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4990:49:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4990:49:34"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5052:23:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "5068:6:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "5062:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5062:13:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulTypedName",
                                        "src": "5056:2:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5088:25:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "5110:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "5104:5:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5104:9:34"
                                    },
                                    "variables": [
                                      {
                                        "name": "length_1",
                                        "nodeType": "YulTypedName",
                                        "src": "5092:8:34",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "5133:6:34"
                                        },
                                        {
                                          "name": "length_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5141:8:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5126:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5126:24:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5126:24:34"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "5202:2:34"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "5206:2:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5198:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5198:11:34"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "5215:6:34"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "5223:2:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5211:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5211:15:34"
                                        },
                                        {
                                          "name": "length_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5228:8:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "copy_memory_to_memory_with_cleanup",
                                        "nodeType": "YulIdentifier",
                                        "src": "5163:34:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5163:74:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5163:74:34"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5250:63:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "5268:6:34"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "length_1",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "5284:8:34"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "5294:2:34",
                                                      "type": "",
                                                      "value": "31"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5280:3:34"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "5280:17:34"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "5303:2:34",
                                                      "type": "",
                                                      "value": "31"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "not",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5299:3:34"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "5299:7:34"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "and",
                                                "nodeType": "YulIdentifier",
                                                "src": "5276:3:34"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5276:31:34"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "5264:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5264:44:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5310:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5260:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5260:53:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "tail_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "5250:6:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5326:25:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "5340:6:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5348:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5336:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5336:15:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "5326:6:34"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5364:19:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5375:3:34"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "5380:2:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5371:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5371:12:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "5364:3:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "4938:1:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4941:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4935:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4935:13:34"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "4949:18:34",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4951:14:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "4960:1:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4963:1:34",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4956:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4956:9:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "4951:1:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "4931:3:34",
                                "statements": []
                              },
                              "src": "4927:466:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5402:14:34",
                              "value": {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "5410:6:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5402:4:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4548:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4559:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4570:4:34",
                            "type": ""
                          }
                        ],
                        "src": "4408:1014:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5522:92:34",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "5532:26:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5544:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5555:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5540:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5540:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5532:4:34"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5574:9:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "5599:6:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "5592:6:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5592:14:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "5585:6:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5585:22:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5567:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5567:41:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5567:41:34"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5491:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5502:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5513:4:34",
                            "type": ""
                          }
                        ],
                        "src": "5427:187:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5756:145:34",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "5766:26:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5778:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5789:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5774:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5774:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5766:4:34"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5808:9:34"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5819:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5801:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5801:25:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5801:25:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5846:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5857:2:34",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5842:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5842:18:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5866:6:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "5882:3:34",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "5887:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "5878:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "5878:11:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5891:1:34",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "5874:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5874:19:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5862:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5862:32:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5835:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5835:60:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5835:60:34"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_rational_7_by_1_t_address__to_t_uint256_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5717:9:34",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "5728:6:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5736:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5747:4:34",
                            "type": ""
                          }
                        ],
                        "src": "5619:282:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6107:179:34",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6124:9:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6139:6:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "6155:3:34",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "6160:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "6151:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "6151:11:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6164:1:34",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "6147:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6147:19:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6135:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6135:32:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6117:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6117:51:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6117:51:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6188:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6199:2:34",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6184:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6184:18:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6204:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6177:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6177:30:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6177:30:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6227:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6238:2:34",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6223:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6223:18:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6243:1:34",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6216:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6216:29:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6216:29:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6254:26:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6266:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6277:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6262:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6262:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6254:4:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_bytes_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6076:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "6087:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6098:4:34",
                            "type": ""
                          }
                        ],
                        "src": "5906:380:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6392:102:34",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "6402:26:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6414:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6425:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6410:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6410:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6402:4:34"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6444:9:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6459:6:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "6475:3:34",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "6480:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "6471:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "6471:11:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6484:1:34",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "6467:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6467:19:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6455:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6455:32:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6437:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6437:51:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6437:51:34"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6361:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "6372:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6383:4:34",
                            "type": ""
                          }
                        ],
                        "src": "6291:203:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6580:103:34",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6626:16:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6635:1:34",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6638:1:34",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6628:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6628:12:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6628:12:34"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "6601:7:34"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6610:9:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6597:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6597:23:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6622:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6593:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6593:32:34"
                              },
                              "nodeType": "YulIf",
                              "src": "6590:52:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6651:26:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6667:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6661:5:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6661:16:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "6651:6:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6546:9:34",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "6557:7:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "6569:6:34",
                            "type": ""
                          }
                        ],
                        "src": "6499:184:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6743:325:34",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "6753:22:34",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6767:1:34",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "6770:4:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "shr",
                                  "nodeType": "YulIdentifier",
                                  "src": "6763:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6763:12:34"
                              },
                              "variableNames": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "6753:6:34"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6784:38:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "6814:4:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6820:1:34",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6810:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6810:12:34"
                              },
                              "variables": [
                                {
                                  "name": "outOfPlaceEncoding",
                                  "nodeType": "YulTypedName",
                                  "src": "6788:18:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6861:31:34",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "6863:27:34",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "6877:6:34"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6885:4:34",
                                          "type": "",
                                          "value": "0x7f"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "6873:3:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6873:17:34"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "6863:6:34"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "outOfPlaceEncoding",
                                    "nodeType": "YulIdentifier",
                                    "src": "6841:18:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "6834:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6834:26:34"
                              },
                              "nodeType": "YulIf",
                              "src": "6831:61:34"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6951:111:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6972:1:34",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "6979:3:34",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "6984:10:34",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "6975:3:34"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6975:20:34"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "6965:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6965:31:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6965:31:34"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7016:1:34",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7019:4:34",
                                          "type": "",
                                          "value": "0x22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "7009:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7009:15:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7009:15:34"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7044:1:34",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7047:4:34",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "7037:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7037:15:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7037:15:34"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "outOfPlaceEncoding",
                                    "nodeType": "YulIdentifier",
                                    "src": "6907:18:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "6930:6:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6938:2:34",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "6927:2:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6927:14:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "6904:2:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6904:38:34"
                              },
                              "nodeType": "YulIf",
                              "src": "6901:161:34"
                            }
                          ]
                        },
                        "name": "extract_byte_array_length",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "data",
                            "nodeType": "YulTypedName",
                            "src": "6723:4:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "6732:6:34",
                            "type": ""
                          }
                        ],
                        "src": "6688:380:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7202:145:34",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "7212:26:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7224:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7235:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7220:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7220:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "7212:4:34"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7254:9:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7269:6:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "7285:3:34",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "7290:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "7281:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "7281:11:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7294:1:34",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "7277:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7277:19:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7265:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7265:32:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7247:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7247:51:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7247:51:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7318:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7329:2:34",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7314:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7314:18:34"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7334:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7307:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7307:34:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7307:34:34"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7163:9:34",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "7174:6:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "7182:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7193:4:34",
                            "type": ""
                          }
                        ],
                        "src": "7073:274:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7515:221:34",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7532:3:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7541:6:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7553:3:34",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7558:10:34",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "7549:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7549:20:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7537:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7537:33:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7525:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7525:46:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7525:46:34"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7580:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7600:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7594:5:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7594:13:34"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "7584:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7655:6:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7663:4:34",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7651:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7651:17:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "7674:3:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7679:1:34",
                                        "type": "",
                                        "value": "4"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7670:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7670:11:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7683:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nodeType": "YulIdentifier",
                                  "src": "7616:34:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7616:74:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7616:74:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7699:31:34",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "7714:3:34"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "7719:6:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7710:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7710:16:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7728:1:34",
                                    "type": "",
                                    "value": "4"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7706:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7706:24:34"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "7699:3:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes4_t_bytes_memory_ptr__to_t_bytes4_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "7483:3:34",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "7488:6:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "7496:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "7507:3:34",
                            "type": ""
                          }
                        ],
                        "src": "7352:384:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7878:150:34",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7888:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7908:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7902:5:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7902:13:34"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "7892:6:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7963:6:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7971:4:34",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7959:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7959:17:34"
                                  },
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7978:3:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7983:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nodeType": "YulIdentifier",
                                  "src": "7924:34:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7924:66:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7924:66:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7999:23:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8010:3:34"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "8015:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8006:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8006:16:34"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "7999:3:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "7854:3:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "7859:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "7870:3:34",
                            "type": ""
                          }
                        ],
                        "src": "7741:287:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8111:199:34",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8157:16:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8166:1:34",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8169:1:34",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "8159:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8159:12:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8159:12:34"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "8132:7:34"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8141:9:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8128:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8128:23:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8153:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "8124:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8124:32:34"
                              },
                              "nodeType": "YulIf",
                              "src": "8121:52:34"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8182:29:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8201:9:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8195:5:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8195:16:34"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "8186:5:34",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8264:16:34",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8273:1:34",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8276:1:34",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "8266:6:34"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8266:12:34"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8266:12:34"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "8233:5:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value",
                                                "nodeType": "YulIdentifier",
                                                "src": "8254:5:34"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "8247:6:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "8247:13:34"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "8240:6:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8240:21:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "8230:2:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8230:32:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "8223:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8223:40:34"
                              },
                              "nodeType": "YulIf",
                              "src": "8220:60:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8289:15:34",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8299:5:34"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "8289:6:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8077:9:34",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "8088:7:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "8100:6:34",
                            "type": ""
                          }
                        ],
                        "src": "8033:277:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8489:224:34",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8506:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8517:2:34",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8499:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8499:21:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8499:21:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8540:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8551:2:34",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8536:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8536:18:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8556:2:34",
                                    "type": "",
                                    "value": "34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8529:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8529:30:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8529:30:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8579:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8590:2:34",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8575:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8575:18:34"
                                  },
                                  {
                                    "hexValue": "4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8595:34:34",
                                    "type": "",
                                    "value": "Error: a == b not satisfied [uin"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8568:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8568:62:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8568:62:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8650:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8661:2:34",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8646:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8646:18:34"
                                  },
                                  {
                                    "hexValue": "745d",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8666:4:34",
                                    "type": "",
                                    "value": "t]"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8639:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8639:32:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8639:32:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8680:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8692:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8703:3:34",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8688:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8688:19:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8680:4:34"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_3bb05d3ba160a011999668447ff4a7cdd52bf87aeb1d7b9b284ef23b37a2b183__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8466:9:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8480:4:34",
                            "type": ""
                          }
                        ],
                        "src": "8315:398:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8920:206:34",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8937:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8948:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8930:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8930:21:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8930:21:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8971:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8982:2:34",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8967:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8967:18:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8987:2:34",
                                    "type": "",
                                    "value": "10"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8960:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8960:30:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8960:30:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9010:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9021:2:34",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9006:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9006:18:34"
                                  },
                                  {
                                    "hexValue": "2020202020204c656674",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9026:12:34",
                                    "type": "",
                                    "value": "      Left"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8999:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8999:40:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8999:40:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9048:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9060:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9071:3:34",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9056:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9056:19:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9048:4:34"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9095:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9106:4:34",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9091:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9091:20:34"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9113:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9084:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9084:36:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9084:36:34"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_bbf7c57905778f125dacfa4fd24c0b99a73d897099071adb94dd57d06b52ce31_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8889:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "8900:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8911:4:34",
                            "type": ""
                          }
                        ],
                        "src": "8718:408:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9333:206:34",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9350:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9361:2:34",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9343:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9343:21:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9343:21:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9384:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9395:2:34",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9380:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9380:18:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9400:2:34",
                                    "type": "",
                                    "value": "10"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9373:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9373:30:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9373:30:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9423:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9434:2:34",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9419:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9419:18:34"
                                  },
                                  {
                                    "hexValue": "20202020205269676874",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9439:12:34",
                                    "type": "",
                                    "value": "     Right"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9412:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9412:40:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9412:40:34"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9461:27:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9473:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9484:3:34",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9469:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9469:19:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9461:4:34"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9508:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9519:4:34",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9504:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9504:20:34"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9526:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9497:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9497:36:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9497:36:34"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_f594094f8f37a3e37fa75233058696f0caafa00827fc96f5c5afe6f0e2570053_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9302:9:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "9313:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9324:4:34",
                            "type": ""
                          }
                        ],
                        "src": "9131:408:34"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9701:188:34",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "9711:26:34",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9723:9:34"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9734:2:34",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9719:3:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9719:18:34"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9711:4:34"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9753:9:34"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "9768:6:34"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "9784:3:34",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "9789:1:34",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "9780:3:34"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "9780:11:34"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9793:1:34",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "9776:3:34"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9776:19:34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "9764:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9764:32:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9746:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9746:51:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9746:51:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9817:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9828:2:34",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9813:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9813:18:34"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9833:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9806:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9806:34:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9806:34:34"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9860:9:34"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9871:2:34",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9856:3:34"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9856:18:34"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9876:6:34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9849:6:34"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9849:34:34"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9849:34:34"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_bytes32_t_bytes32__to_t_address_t_bytes32_t_bytes32__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9654:9:34",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "9665:6:34",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "9673:6:34",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "9681:6:34",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9692:4:34",
                            "type": ""
                          }
                        ],
                        "src": "9544:345:34"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_array$_t_struct$_FuzzInterface_$7572_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FuzzInterface_$7572_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _2 := mload(srcPtr)\n            let tail_3 := add(tail_2, 64)\n            mstore(tail_2, and(mload(_2), sub(shl(160, 1), 1)))\n            let memberValue0 := mload(add(_2, _1))\n            mstore(add(tail_2, _1), 64)\n            let pos_1 := tail_3\n            let length_1 := mload(memberValue0)\n            mstore(tail_3, length_1)\n            let _3 := 96\n            pos_1 := add(tail_2, _3)\n            let tail_4 := add(add(tail_2, shl(5, length_1)), _3)\n            let srcPtr_1 := add(memberValue0, _1)\n            let i_1 := 0\n            for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n            {\n                mstore(pos_1, add(sub(tail_4, tail_2), not(95)))\n                let _4 := mload(srcPtr_1)\n                let length_2 := mload(_4)\n                mstore(tail_4, length_2)\n                copy_memory_to_memory_with_cleanup(add(_4, _1), add(tail_4, _1), length_2)\n                tail_4 := add(add(tail_4, and(add(length_2, 31), not(31))), _1)\n                srcPtr_1 := add(srcPtr_1, _1)\n                pos_1 := add(pos_1, _1)\n            }\n            tail_2 := tail_4\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_array$_t_struct$_FuzzSelector_$7566_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FuzzSelector_$7566_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let tail_2 := add(add(headStart, shl(5, length)), _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        let i_1 := i\n        for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _3 := mload(srcPtr)\n            let tail_3 := add(tail_2, _2)\n            mstore(tail_2, and(mload(_3), sub(shl(160, 1), 1)))\n            let memberValue0 := mload(add(_3, _1))\n            mstore(add(tail_2, _1), _2)\n            let pos_1 := tail_3\n            let length_1 := mload(memberValue0)\n            mstore(tail_3, length_1)\n            pos_1 := add(tail_2, 96)\n            let srcPtr_1 := add(memberValue0, _1)\n            let i_2 := i\n            for { } lt(i_2, length_1) { i_2 := add(i_2, 1) }\n            {\n                mstore(pos_1, and(mload(srcPtr_1), shl(224, 0xffffffff)))\n                pos_1 := add(pos_1, _1)\n                srcPtr_1 := add(srcPtr_1, _1)\n            }\n            tail_2 := pos_1\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _2 := mload(srcPtr)\n            let length_1 := mload(_2)\n            mstore(tail_2, length_1)\n            copy_memory_to_memory_with_cleanup(add(_2, _1), add(tail_2, _1), length_1)\n            tail_2 := add(add(tail_2, and(add(length_1, 31), not(31))), _1)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_rational_7_by_1_t_address__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 64)\n        mstore(add(headStart, 64), 0)\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes4_t_bytes_memory_ptr__to_t_bytes4_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(value0, shl(224, 0xffffffff)))\n        let length := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(pos, 4), length)\n        end := add(add(pos, length), 4)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_3bb05d3ba160a011999668447ff4a7cdd52bf87aeb1d7b9b284ef23b37a2b183__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Error: a == b not satisfied [uin\")\n        mstore(add(headStart, 96), \"t]\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_bbf7c57905778f125dacfa4fd24c0b99a73d897099071adb94dd57d06b52ce31_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), 10)\n        mstore(add(headStart, 96), \"      Left\")\n        tail := add(headStart, 128)\n        mstore(add(headStart, 0x20), value0)\n    }\n    function abi_encode_tuple_t_stringliteral_f594094f8f37a3e37fa75233058696f0caafa00827fc96f5c5afe6f0e2570053_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), 10)\n        mstore(add(headStart, 96), \"     Right\")\n        tail := add(headStart, 128)\n        mstore(add(headStart, 0x20), value0)\n    }\n    function abi_encode_tuple_t_address_t_bytes32_t_bytes32__to_t_address_t_bytes32_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n}",
                  "id": 34,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {}
            },
            "methodIdentifiers": {
              "IS_TEST()": "fa7626d4",
              "excludeArtifacts()": "b5508aa9",
              "excludeContracts()": "e20c9f71",
              "excludeSenders()": "1ed7831c",
              "failed()": "ba414fa6",
              "setUp()": "0a9254e4",
              "targetArtifactSelectors()": "66d9a9a0",
              "targetArtifacts()": "85226c81",
              "targetContracts()": "3f7286f4",
              "targetInterfaces()": "2ade3880",
              "targetSelectors()": "916a17c6",
              "targetSenders()": "3e5e3c23",
              "testEat()": "4f759d40",
              "testUpgrade()": "9d6aed0b",
              "testUpgradeFail()": "2761a0c8"
            }
          }
        }
      }
    }
  }
}